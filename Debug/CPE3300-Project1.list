
CPE3300-Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003638  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e8  080037e8  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  080037e8  080037e8  000047e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037f0  080037f0  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f0  080037f0  000047f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037f4  080037f4  000047f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080037f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000070  08003868  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003868  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e049  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ff  00000000  00000000  000130e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  000153e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a10  00000000  00000000  000160f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ca2  00000000  00000000  00016b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100b2  00000000  00000000  0002e7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009023c  00000000  00000000  0003e854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cea90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c14  00000000  00000000  000cead4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d26e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080037b8 	.word	0x080037b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080037b8 	.word	0x080037b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <resetBuffer>:
uint8_t one = 0x0f;

/* resetBuffer
 *
 */
void resetBuffer(char * buffer){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	for(int x=0; x<256; x++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e007      	b.n	80004e6 <resetBuffer+0x1e>
		buffer[x] = 0;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4413      	add	r3, r2
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
	for(int x=0; x<256; x++){
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2bff      	cmp	r3, #255	@ 0xff
 80004ea:	ddf4      	ble.n	80004d6 <resetBuffer+0xe>
	}
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <sendData>:
/*
 *  sends each byte as 2 bits
 *  baud rate = 8000 -> each half byte sends in 500us to act like one bit
 *
 */
void sendData(char * data, int length){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
	dataLength = (uint8_t) length;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b63      	ldr	r3, [pc, #396]	@ (8000698 <sendData+0x19c>)
 800050c:	701a      	strb	r2, [r3, #0]

	//HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState); w/ hal delay
	//other option

	//send preamble
	for(int x = 0; x < byteLenght; x++){
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	e030      	b.n	8000576 <sendData+0x7a>
		if(((preamble<<x) & 0x80) == 0x80){
 8000514:	4b61      	ldr	r3, [pc, #388]	@ (800069c <sendData+0x1a0>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000524:	2b00      	cmp	r3, #0
 8000526:	d006      	beq.n	8000536 <sendData+0x3a>
			//printf("1");
			//HAL_UART_Transmit(&huart2, (uint8_t *)&one, 1, HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800052e:	485c      	ldr	r0, [pc, #368]	@ (80006a0 <sendData+0x1a4>)
 8000530:	f000 ffd0 	bl	80014d4 <HAL_GPIO_WritePin>
 8000534:	e00f      	b.n	8000556 <sendData+0x5a>
		} else if(((preamble<<x) & 0x80) == 0x00){
 8000536:	4b59      	ldr	r3, [pc, #356]	@ (800069c <sendData+0x1a0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	461a      	mov	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000546:	2b00      	cmp	r3, #0
 8000548:	d105      	bne.n	8000556 <sendData+0x5a>
			//printf("0");
			//HAL_UART_Transmit(&huart2, (uint8_t *)&zero, 1, HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000550:	4853      	ldr	r0, [pc, #332]	@ (80006a0 <sendData+0x1a4>)
 8000552:	f000 ffbf 	bl	80014d4 <HAL_GPIO_WritePin>
		}
		delay_us(2650);
 8000556:	f640 205a 	movw	r0, #2650	@ 0xa5a
 800055a:	f000 f8a5 	bl	80006a8 <delay_us>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800055e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000562:	484f      	ldr	r0, [pc, #316]	@ (80006a0 <sendData+0x1a4>)
 8000564:	f000 ffcf 	bl	8001506 <HAL_GPIO_TogglePin>
		delay_us(2650);
 8000568:	f640 205a 	movw	r0, #2650	@ 0xa5a
 800056c:	f000 f89c 	bl	80006a8 <delay_us>
	for(int x = 0; x < byteLenght; x++){
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	3301      	adds	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	4b4b      	ldr	r3, [pc, #300]	@ (80006a4 <sendData+0x1a8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	697a      	ldr	r2, [r7, #20]
 800057c:	429a      	cmp	r2, r3
 800057e:	dbc9      	blt.n	8000514 <sendData+0x18>
	}

	//send length
	for(int x = 0; x < byteLenght; x++){
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	e030      	b.n	80005e8 <sendData+0xec>
		if(((dataLength<<x) & 0x80) == 0x80){
 8000586:	4b44      	ldr	r3, [pc, #272]	@ (8000698 <sendData+0x19c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <sendData+0xac>
			//HAL_UART_Transmit(&huart2, (uint8_t *)&one, 1, HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005a0:	483f      	ldr	r0, [pc, #252]	@ (80006a0 <sendData+0x1a4>)
 80005a2:	f000 ff97 	bl	80014d4 <HAL_GPIO_WritePin>
 80005a6:	e00f      	b.n	80005c8 <sendData+0xcc>
		} else if(((dataLength<<x) & 0x80) == 0x00){
 80005a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000698 <sendData+0x19c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d105      	bne.n	80005c8 <sendData+0xcc>
			//HAL_UART_Transmit(&huart2, (uint8_t *)&zero, 1, HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c2:	4837      	ldr	r0, [pc, #220]	@ (80006a0 <sendData+0x1a4>)
 80005c4:	f000 ff86 	bl	80014d4 <HAL_GPIO_WritePin>
		}
		delay_us(2650);
 80005c8:	f640 205a 	movw	r0, #2650	@ 0xa5a
 80005cc:	f000 f86c 	bl	80006a8 <delay_us>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80005d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d4:	4832      	ldr	r0, [pc, #200]	@ (80006a0 <sendData+0x1a4>)
 80005d6:	f000 ff96 	bl	8001506 <HAL_GPIO_TogglePin>
		delay_us(2650);
 80005da:	f640 205a 	movw	r0, #2650	@ 0xa5a
 80005de:	f000 f863 	bl	80006a8 <delay_us>
	for(int x = 0; x < byteLenght; x++){
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	3301      	adds	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <sendData+0x1a8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	693a      	ldr	r2, [r7, #16]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	dbc9      	blt.n	8000586 <sendData+0x8a>
	}

	//send data
	for(int x = 0; x < dataLength; x++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e03f      	b.n	8000678 <sendData+0x17c>
		for(int y = 0; y < byteLenght; y++){
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	e034      	b.n	8000668 <sendData+0x16c>
			if(((data[x]<<y) & 0x80) == 0x80){
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <sendData+0x128>
				//HAL_UART_Transmit(&huart2, (uint8_t *)&one, 1, HAL_MAX_DELAY);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800061c:	4820      	ldr	r0, [pc, #128]	@ (80006a0 <sendData+0x1a4>)
 800061e:	f000 ff59 	bl	80014d4 <HAL_GPIO_WritePin>
 8000622:	e011      	b.n	8000648 <sendData+0x14c>
			} else if(((data[x]<<y) & 0x80) == 0x00){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000638:	2b00      	cmp	r3, #0
 800063a:	d105      	bne.n	8000648 <sendData+0x14c>
				//HAL_UART_Transmit(&huart2, (uint8_t *)&zero, 1, HAL_MAX_DELAY);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000642:	4817      	ldr	r0, [pc, #92]	@ (80006a0 <sendData+0x1a4>)
 8000644:	f000 ff46 	bl	80014d4 <HAL_GPIO_WritePin>
			}
			delay_us(2650);
 8000648:	f640 205a 	movw	r0, #2650	@ 0xa5a
 800064c:	f000 f82c 	bl	80006a8 <delay_us>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000650:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000654:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <sendData+0x1a4>)
 8000656:	f000 ff56 	bl	8001506 <HAL_GPIO_TogglePin>
			delay_us(2650);
 800065a:	f640 205a 	movw	r0, #2650	@ 0xa5a
 800065e:	f000 f823 	bl	80006a8 <delay_us>
		for(int y = 0; y < byteLenght; y++){
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3301      	adds	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <sendData+0x1a8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	429a      	cmp	r2, r3
 8000670:	dbc5      	blt.n	80005fe <sendData+0x102>
	for(int x = 0; x < dataLength; x++){
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <sendData+0x19c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4293      	cmp	r3, r2
 8000682:	dbb9      	blt.n	80005f8 <sendData+0xfc>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <sendData+0x1a4>)
 800068c:	f000 ff22 	bl	80014d4 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000008c 	.word	0x2000008c
 800069c:	20000000 	.word	0x20000000
 80006a0:	40020000 	.word	0x40020000
 80006a4:	20000004 	.word	0x20000004

080006a8 <delay_us>:
 * @brief   This method uses the systick timer to wait
 * 			the specified amount of microseconds.
 * @param   delay - The amount of microseconds to wait
 */
void delay_us(int delay)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	// Set the load value to delay * cycles in 1us
	systick_base[LOAD] = (delay * CYCLE_PER_US) - 1;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <delay_us+0x4c>)
 80006b8:	3304      	adds	r3, #4
 80006ba:	601a      	str	r2, [r3, #0]
	// Set the timer value to 0
	systick_base[VAL] = 0;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <delay_us+0x4c>)
 80006be:	3308      	adds	r3, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
	// Enable the timer to start counting
	systick_base[CTRL] |= ENABLE;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <delay_us+0x4c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <delay_us+0x4c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

	// Waits until the count flag goes high
	// which means the timer has reached 0
	while(!(systick_base[CTRL] & COUNTFLAG))
 80006d0:	bf00      	nop
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <delay_us+0x4c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0f9      	beq.n	80006d2 <delay_us+0x2a>
	{
		// busy loop
	}
	// Disable the timer
	systick_base[CTRL] &= !ENABLE;
 80006de:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <delay_us+0x4c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <delay_us+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b49      	ldr	r3, [pc, #292]	@ (8000838 <MX_GPIO_Init+0x140>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a48      	ldr	r2, [pc, #288]	@ (8000838 <MX_GPIO_Init+0x140>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b46      	ldr	r3, [pc, #280]	@ (8000838 <MX_GPIO_Init+0x140>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b42      	ldr	r3, [pc, #264]	@ (8000838 <MX_GPIO_Init+0x140>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a41      	ldr	r2, [pc, #260]	@ (8000838 <MX_GPIO_Init+0x140>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b3f      	ldr	r3, [pc, #252]	@ (8000838 <MX_GPIO_Init+0x140>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b3b      	ldr	r3, [pc, #236]	@ (8000838 <MX_GPIO_Init+0x140>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a3a      	ldr	r2, [pc, #232]	@ (8000838 <MX_GPIO_Init+0x140>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b38      	ldr	r3, [pc, #224]	@ (8000838 <MX_GPIO_Init+0x140>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <MX_GPIO_Init+0x140>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a33      	ldr	r2, [pc, #204]	@ (8000838 <MX_GPIO_Init+0x140>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b31      	ldr	r3, [pc, #196]	@ (8000838 <MX_GPIO_Init+0x140>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	482e      	ldr	r0, [pc, #184]	@ (800083c <MX_GPIO_Init+0x144>)
 8000784:	f000 fea6 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800078e:	482b      	ldr	r0, [pc, #172]	@ (800083c <MX_GPIO_Init+0x144>)
 8000790:	f000 fea0 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4825      	ldr	r0, [pc, #148]	@ (8000840 <MX_GPIO_Init+0x148>)
 80007ac:	f000 fcf6 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b0:	2320      	movs	r3, #32
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	481d      	ldr	r0, [pc, #116]	@ (800083c <MX_GPIO_Init+0x144>)
 80007c8:	f000 fce8 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4816      	ldr	r0, [pc, #88]	@ (800083c <MX_GPIO_Init+0x144>)
 80007e4:	f000 fcda 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480e      	ldr	r0, [pc, #56]	@ (800083c <MX_GPIO_Init+0x144>)
 8000802:	f000 fccb 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RX_PIN_Pin;
 8000806:	2308      	movs	r3, #8
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800080a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RX_PIN_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480a      	ldr	r0, [pc, #40]	@ (8000844 <MX_GPIO_Init+0x14c>)
 800081c:	f000 fcbe 	bl	800119c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2009      	movs	r0, #9
 8000826:	f000 fc8f 	bl	8001148 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800082a:	2009      	movs	r0, #9
 800082c:	f000 fca8 	bl	8001180 <HAL_NVIC_EnableIRQ>

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	@ 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000
 8000840:	40020800 	.word	0x40020800
 8000844:	40020400 	.word	0x40020400

08000848 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000850:	1d39      	adds	r1, r7, #4
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	2201      	movs	r2, #1
 8000858:	4803      	ldr	r0, [pc, #12]	@ (8000868 <__io_putchar+0x20>)
 800085a:	f001 fe15 	bl	8002488 <HAL_UART_Transmit>
return ch;
 800085e:	687b      	ldr	r3, [r7, #4]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000e0 	.word	0x200000e0

0800086c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
uint8_t ch = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	71fb      	strb	r3, [r7, #7]
__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <__io_getchar+0x38>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <__io_getchar+0x38>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800088c:	1df9      	adds	r1, r7, #7
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	2201      	movs	r2, #1
 8000894:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <__io_getchar+0x38>)
 8000896:	f001 fe82 	bl	800259e <HAL_UART_Receive>
return ch;
 800089a:	79fb      	ldrb	r3, [r7, #7]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000e0 	.word	0x200000e0

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0c4      	sub	sp, #272	@ 0x110
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 80008ae:	4b3e      	ldr	r3, [pc, #248]	@ (80009a8 <main+0x100>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6858      	ldr	r0, [r3, #4]
 80008b4:	2300      	movs	r3, #0
 80008b6:	2202      	movs	r2, #2
 80008b8:	2100      	movs	r1, #0
 80008ba:	f002 fb01 	bl	8002ec0 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fb49 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f879 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff17 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008ca:	f000 faa7 	bl	8000e1c <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char rxString[255];
  int x = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  edgeTrigger = 0;
 80008d4:	4b35      	ldr	r3, [pc, #212]	@ (80009ac <main+0x104>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
	  //rx interrupt for clock edge - starts timer, calls function
	  //if statement for rx, if statement for tx

	  //idle at 1
	  //HAL_GPIO_WritePin(GPIOA, TX_PIN_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e0:	4833      	ldr	r0, [pc, #204]	@ (80009b0 <main+0x108>)
 80008e2:	f000 fdf7 	bl	80014d4 <HAL_GPIO_WritePin>
	 // HAL_UART_Receive_IT(huart, pData, Size)


	  /*if(HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_RX){
		 while(rx == HAL_BUSY){*/
	  rx = HAL_UART_Receive(&huart2, &data, 1, HAL_MAX_DELAY);
 80008e6:	1df9      	adds	r1, r7, #7
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2201      	movs	r2, #1
 80008ee:	4831      	ldr	r0, [pc, #196]	@ (80009b4 <main+0x10c>)
 80008f0:	f001 fe55 	bl	800259e <HAL_UART_Receive>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

	  if(data == 13 || data == 10){
 80008fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008fe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b0d      	cmp	r3, #13
 8000906:	d006      	beq.n	8000916 <main+0x6e>
 8000908:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800090c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b0a      	cmp	r3, #10
 8000914:	d12c      	bne.n	8000970 <main+0xc8>
		  for(int y=0; y<x; y++){
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800091c:	e00f      	b.n	800093e <main+0x96>
			  printf("%c", rxString[y]);
 800091e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000922:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000926:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fabe 	bl	8002eb0 <putchar>
		  for(int y=0; y<x; y++){
 8000934:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000938:	3301      	adds	r3, #1
 800093a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800093e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000946:	429a      	cmp	r2, r3
 8000948:	dbe9      	blt.n	800091e <main+0x76>
		  }
		  sendData(rxString, x);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fdd2 	bl	80004fc <sendData>
		  resetBuffer(rxString);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fdb3 	bl	80004c8 <resetBuffer>
		  printf("\n");
 8000962:	200a      	movs	r0, #10
 8000964:	f002 faa4 	bl	8002eb0 <putchar>
		  x=0;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800096e:	e012      	b.n	8000996 <main+0xee>
	  } else {
		  rxString[x] = data;
 8000970:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000974:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000978:	7819      	ldrb	r1, [r3, #0]
 800097a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800097e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000986:	4413      	add	r3, r2
 8000988:	460a      	mov	r2, r1
 800098a:	701a      	strb	r2, [r3, #0]
		  x++;
 800098c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000990:	3301      	adds	r3, #1
 8000992:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	  }
	  //printf("%c - %d\n", rxString[x], x);

	  if(x > 255){
 8000996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800099a:	2bff      	cmp	r3, #255	@ 0xff
 800099c:	dd9d      	ble.n	80008da <main+0x32>
		  x=0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  {
 80009a4:	e799      	b.n	80008da <main+0x32>
 80009a6:	bf00      	nop
 80009a8:	20000020 	.word	0x20000020
 80009ac:	20000090 	.word	0x20000090
 80009b0:	40020000 	.word	0x40020000
 80009b4:	200000e0 	.word	0x200000e0

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	@ 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2230      	movs	r2, #48	@ 0x30
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fb71 	bl	80030ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b28      	ldr	r3, [pc, #160]	@ (8000a84 <SystemClock_Config+0xcc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	4a27      	ldr	r2, [pc, #156]	@ (8000a84 <SystemClock_Config+0xcc>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ec:	4b25      	ldr	r3, [pc, #148]	@ (8000a84 <SystemClock_Config+0xcc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <SystemClock_Config+0xd0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <SystemClock_Config+0xd0>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <SystemClock_Config+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a2c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a36:	2304      	movs	r3, #4
 8000a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fd94 	bl	800156c <HAL_RCC_OscConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a4a:	f000 f84f 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	230f      	movs	r3, #15
 8000a50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a52:	2302      	movs	r3, #2
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fff6 	bl	8001a5c <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a76:	f000 f839 	bl	8000aec <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3750      	adds	r7, #80	@ 0x50
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
  //reset/set timer


  //skip next edge
  if(1){
	  edgeTrigger++;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a9e:	6013      	str	r3, [r2, #0]
	  edgeTrigger = 0;
  }

  //GPIO_PIN_RESET
  //GPIO_PIN_SET
  if(edgeTrigger == 1){
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d106      	bne.n	8000ab6 <HAL_GPIO_EXTI_Callback+0x2a>
	  int rxPin = (int)HAL_GPIO_ReadPin(RX_PIN_GPIO_Port, GPIO_Pin);
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000aae:	f000 fcf9 	bl	80014a4 <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	60fb      	str	r3, [r7, #12]
  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000090 	.word	0x20000090
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d101      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ada:	f000 fa5d 	bl	8000f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010000 	.word	0x40010000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 fafb 	bl	8001132 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	@ 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b60:	4a2d      	ldr	r2, [pc, #180]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b68:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 020c 	add.w	r2, r7, #12
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f98c 	bl	8001e9c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b84:	f001 f976 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8000b88:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8c:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <HAL_InitTick+0xd4>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b98:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000b9a:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <HAL_InitTick+0xdc>)
 8000b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b9e:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000ba0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bac:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bbe:	4818      	ldr	r0, [pc, #96]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bc0:	f001 f99e 	bl	8001f00 <HAL_TIM_Base_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d11b      	bne.n	8000c0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bd2:	4813      	ldr	r0, [pc, #76]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bd4:	f001 f9ee 	bl	8001fb4 <HAL_TIM_Base_Start_IT>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d111      	bne.n	8000c0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000be6:	2019      	movs	r0, #25
 8000be8:	f000 faca 	bl	8001180 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b0f      	cmp	r3, #15
 8000bf0:	d808      	bhi.n	8000c04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 faa6 	bl	8001148 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_InitTick+0xe0>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	e002      	b.n	8000c0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3730      	adds	r7, #48	@ 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	431bde83 	.word	0x431bde83
 8000c20:	20000094 	.word	0x20000094
 8000c24:	40010000 	.word	0x40010000
 8000c28:	2000000c 	.word	0x2000000c

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <MemManage_Handler+0x4>

08000c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RX_PIN_Pin);
 8000c90:	2008      	movs	r0, #8
 8000c92:	f000 fc53 	bl	800153c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ca2:	f001 f9e9 	bl	8002078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000094 	.word	0x20000094

08000cb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00a      	b.n	8000cd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cc2:	f7ff fdd3 	bl	800086c <__io_getchar>
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	b2ca      	uxtb	r2, r1
 8000cd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf0      	blt.n	8000cc2 <_read+0x12>
  }

  return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e009      	b.n	8000d10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd9f 	bl	8000848 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf1      	blt.n	8000cfc <_write+0x12>
  }
  return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_close>:

int _close(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_isatty>:

int _isatty(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f002 f9c6 	bl	800314c <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20020000 	.word	0x20020000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	200000dc 	.word	0x200000dc
 8000df4:	20000278 	.word	0x20000278

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <MX_USART2_UART_Init+0x50>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f001 fac8 	bl	80023e8 <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5e:	f7ff fe45 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000e0 	.word	0x200000e0
 8000e6c:	40004400 	.word	0x40004400

08000e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ef4 <HAL_UART_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12b      	bne.n	8000eea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_PIN_Pin|GPIO_PIN_3;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	@ (8000efc <HAL_UART_MspInit+0x8c>)
 8000ee6:	f000 f959 	bl	800119c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	@ 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f04:	f7ff ff78 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	@ (8000f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	@ (8000f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f002 f913 	bl	8003158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fcb9 	bl	80008a8 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f44:	080037f8 	.word	0x080037f8
  ldr r2, =_sbss
 8000f48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f4c:	20000278 	.word	0x20000278

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f8d8 	bl	8001132 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fde0 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fdb6 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000010 	.word	0x20000010
 8000fbc:	20000128 	.word	0x20000128

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000128 	.word	0x20000128

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	@ (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff4c 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115a:	f7ff ff61 	bl	8001020 <__NVIC_GetPriorityGrouping>
 800115e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	6978      	ldr	r0, [r7, #20]
 8001166:	f7ff ffb1 	bl	80010cc <NVIC_EncodePriority>
 800116a:	4602      	mov	r2, r0
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff80 	bl	8001078 <__NVIC_SetPriority>
}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff54 	bl	800103c <__NVIC_EnableIRQ>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e159      	b.n	800146c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 8148 	bne.w	8001466 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d005      	beq.n	80011ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b03      	cmp	r3, #3
 800125a:	d017      	beq.n	800128c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d123      	bne.n	80012e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80a2 	beq.w	8001466 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b57      	ldr	r3, [pc, #348]	@ (8001484 <HAL_GPIO_Init+0x2e8>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a56      	ldr	r2, [pc, #344]	@ (8001484 <HAL_GPIO_Init+0x2e8>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b54      	ldr	r3, [pc, #336]	@ (8001484 <HAL_GPIO_Init+0x2e8>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	4a52      	ldr	r2, [pc, #328]	@ (8001488 <HAL_GPIO_Init+0x2ec>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a49      	ldr	r2, [pc, #292]	@ (800148c <HAL_GPIO_Init+0x2f0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x202>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a48      	ldr	r2, [pc, #288]	@ (8001490 <HAL_GPIO_Init+0x2f4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x1fe>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a47      	ldr	r2, [pc, #284]	@ (8001494 <HAL_GPIO_Init+0x2f8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x1fa>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a46      	ldr	r2, [pc, #280]	@ (8001498 <HAL_GPIO_Init+0x2fc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x1f6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a45      	ldr	r2, [pc, #276]	@ (800149c <HAL_GPIO_Init+0x300>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x1f2>
 800138a:	2304      	movs	r3, #4
 800138c:	e008      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 800138e:	2307      	movs	r3, #7
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 8001392:	2303      	movs	r3, #3
 8001394:	e004      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 8001396:	2302      	movs	r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x204>
 800139e:	2300      	movs	r3, #0
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	f002 0203 	and.w	r2, r2, #3
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4093      	lsls	r3, r2
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b0:	4935      	ldr	r1, [pc, #212]	@ (8001488 <HAL_GPIO_Init+0x2ec>)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013be:	4b38      	ldr	r3, [pc, #224]	@ (80014a0 <HAL_GPIO_Init+0x304>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e2:	4a2f      	ldr	r2, [pc, #188]	@ (80014a0 <HAL_GPIO_Init+0x304>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e8:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <HAL_GPIO_Init+0x304>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800140c:	4a24      	ldr	r2, [pc, #144]	@ (80014a0 <HAL_GPIO_Init+0x304>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001412:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <HAL_GPIO_Init+0x304>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001436:	4a1a      	ldr	r2, [pc, #104]	@ (80014a0 <HAL_GPIO_Init+0x304>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <HAL_GPIO_Init+0x304>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001460:	4a0f      	ldr	r2, [pc, #60]	@ (80014a0 <HAL_GPIO_Init+0x304>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3301      	adds	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	2b0f      	cmp	r3, #15
 8001470:	f67f aea2 	bls.w	80011b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3724      	adds	r7, #36	@ 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40013800 	.word	0x40013800
 800148c:	40020000 	.word	0x40020000
 8001490:	40020400 	.word	0x40020400
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40021000 	.word	0x40021000
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e001      	b.n	80014c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001518:	887a      	ldrh	r2, [r7, #2]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	041a      	lsls	r2, r3, #16
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43d9      	mvns	r1, r3
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	400b      	ands	r3, r1
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	4013      	ands	r3, r2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001552:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fa96 	bl	8000a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40013c00 	.word	0x40013c00

0800156c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e267      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d075      	beq.n	8001676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800158a:	4b88      	ldr	r3, [pc, #544]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b04      	cmp	r3, #4
 8001594:	d00c      	beq.n	80015b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001596:	4b85      	ldr	r3, [pc, #532]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d112      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a2:	4b82      	ldr	r3, [pc, #520]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015ae:	d10b      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	4b7e      	ldr	r3, [pc, #504]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d05b      	beq.n	8001674 <HAL_RCC_OscConfig+0x108>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d157      	bne.n	8001674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e242      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d0:	d106      	bne.n	80015e0 <HAL_RCC_OscConfig+0x74>
 80015d2:	4b76      	ldr	r3, [pc, #472]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a75      	ldr	r2, [pc, #468]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e01d      	b.n	800161c <HAL_RCC_OscConfig+0xb0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x98>
 80015ea:	4b70      	ldr	r3, [pc, #448]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6f      	ldr	r2, [pc, #444]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b6d      	ldr	r3, [pc, #436]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a6c      	ldr	r2, [pc, #432]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0xb0>
 8001604:	4b69      	ldr	r3, [pc, #420]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a68      	ldr	r2, [pc, #416]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b66      	ldr	r3, [pc, #408]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a65      	ldr	r2, [pc, #404]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fccc 	bl	8000fc0 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fcc8 	bl	8000fc0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e207      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b5b      	ldr	r3, [pc, #364]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0xc0>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fcb8 	bl	8000fc0 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fcb4 	bl	8000fc0 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1f3      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001666:	4b51      	ldr	r3, [pc, #324]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0xe8>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d063      	beq.n	800174a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001682:	4b4a      	ldr	r3, [pc, #296]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168e:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001696:	2b08      	cmp	r3, #8
 8001698:	d11c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169a:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d116      	bne.n	80016d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_RCC_OscConfig+0x152>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d001      	beq.n	80016be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e1c7      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016be:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4937      	ldr	r1, [pc, #220]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	e03a      	b.n	800174a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d020      	beq.n	800171e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016dc:	4b34      	ldr	r3, [pc, #208]	@ (80017b0 <HAL_RCC_OscConfig+0x244>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fc6d 	bl	8000fc0 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fc69 	bl	8000fc0 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1a8      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4925      	ldr	r1, [pc, #148]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
 800171c:	e015      	b.n	800174a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171e:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <HAL_RCC_OscConfig+0x244>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff fc4c 	bl	8000fc0 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172c:	f7ff fc48 	bl	8000fc0 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e187      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d036      	beq.n	80017c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d016      	beq.n	800178c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_RCC_OscConfig+0x248>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff fc2c 	bl	8000fc0 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff fc28 	bl	8000fc0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e167      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x200>
 800178a:	e01b      	b.n	80017c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_RCC_OscConfig+0x248>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7ff fc15 	bl	8000fc0 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	e00e      	b.n	80017b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fc11 	bl	8000fc0 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d907      	bls.n	80017b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e150      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	42470000 	.word	0x42470000
 80017b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b88      	ldr	r3, [pc, #544]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ea      	bne.n	800179a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8097 	beq.w	8001900 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b81      	ldr	r3, [pc, #516]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10f      	bne.n	8001802 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b7d      	ldr	r3, [pc, #500]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a7c      	ldr	r2, [pc, #496]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b7a      	ldr	r3, [pc, #488]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	4b77      	ldr	r3, [pc, #476]	@ (80019e0 <HAL_RCC_OscConfig+0x474>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d118      	bne.n	8001840 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180e:	4b74      	ldr	r3, [pc, #464]	@ (80019e0 <HAL_RCC_OscConfig+0x474>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a73      	ldr	r2, [pc, #460]	@ (80019e0 <HAL_RCC_OscConfig+0x474>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181a:	f7ff fbd1 	bl	8000fc0 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001822:	f7ff fbcd 	bl	8000fc0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e10c      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	4b6a      	ldr	r3, [pc, #424]	@ (80019e0 <HAL_RCC_OscConfig+0x474>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x2ea>
 8001848:	4b64      	ldr	r3, [pc, #400]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184c:	4a63      	ldr	r2, [pc, #396]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6713      	str	r3, [r2, #112]	@ 0x70
 8001854:	e01c      	b.n	8001890 <HAL_RCC_OscConfig+0x324>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x30c>
 800185e:	4b5f      	ldr	r3, [pc, #380]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001862:	4a5e      	ldr	r2, [pc, #376]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6713      	str	r3, [r2, #112]	@ 0x70
 800186a:	4b5c      	ldr	r3, [pc, #368]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186e:	4a5b      	ldr	r2, [pc, #364]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6713      	str	r3, [r2, #112]	@ 0x70
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0x324>
 8001878:	4b58      	ldr	r3, [pc, #352]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800187c:	4a57      	ldr	r2, [pc, #348]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	6713      	str	r3, [r2, #112]	@ 0x70
 8001884:	4b55      	ldr	r3, [pc, #340]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001888:	4a54      	ldr	r2, [pc, #336]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800188a:	f023 0304 	bic.w	r3, r3, #4
 800188e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d015      	beq.n	80018c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fb92 	bl	8000fc0 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f7ff fb8e 	bl	8000fc0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e0cb      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	4b49      	ldr	r3, [pc, #292]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0ee      	beq.n	80018a0 <HAL_RCC_OscConfig+0x334>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fb7c 	bl	8000fc0 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018cc:	f7ff fb78 	bl	8000fc0 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e0b5      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e2:	4b3e      	ldr	r3, [pc, #248]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ee      	bne.n	80018cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f4:	4b39      	ldr	r3, [pc, #228]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	4a38      	ldr	r2, [pc, #224]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80018fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80a1 	beq.w	8001a4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190a:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b08      	cmp	r3, #8
 8001914:	d05c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d141      	bne.n	80019a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <HAL_RCC_OscConfig+0x478>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fb4c 	bl	8000fc0 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff fb48 	bl	8000fc0 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e087      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69da      	ldr	r2, [r3, #28]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	019b      	lsls	r3, r3, #6
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001960:	085b      	lsrs	r3, r3, #1
 8001962:	3b01      	subs	r3, #1
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	491b      	ldr	r1, [pc, #108]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_RCC_OscConfig+0x478>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff fb21 	bl	8000fc0 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff fb1d 	bl	8000fc0 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e05c      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x416>
 80019a0:	e054      	b.n	8001a4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <HAL_RCC_OscConfig+0x478>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb0a 	bl	8000fc0 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fb06 	bl	8000fc0 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e045      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x444>
 80019ce:	e03d      	b.n	8001a4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e038      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000
 80019e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <HAL_RCC_OscConfig+0x4ec>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d028      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d121      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d11a      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a18:	4013      	ands	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d111      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	3b01      	subs	r3, #1
 8001a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0cc      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b68      	ldr	r3, [pc, #416]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d90c      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b65      	ldr	r3, [pc, #404]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b63      	ldr	r3, [pc, #396]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0b8      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab0:	4b59      	ldr	r3, [pc, #356]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a58      	ldr	r2, [pc, #352]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac8:	4b53      	ldr	r3, [pc, #332]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a52      	ldr	r2, [pc, #328]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad4:	4b50      	ldr	r3, [pc, #320]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	494d      	ldr	r1, [pc, #308]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d044      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b47      	ldr	r3, [pc, #284]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d119      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e07f      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e06f      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e067      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b37      	ldr	r3, [pc, #220]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4934      	ldr	r1, [pc, #208]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7ff fa38 	bl	8000fc0 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7ff fa34 	bl	8000fc0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e04f      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 020c 	and.w	r2, r3, #12
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1eb      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d20c      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b22      	ldr	r3, [pc, #136]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e032      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4916      	ldr	r1, [pc, #88]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bce:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	490e      	ldr	r1, [pc, #56]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001be2:	f000 f821 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	490a      	ldr	r1, [pc, #40]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	5ccb      	ldrb	r3, [r1, r3]
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	4a09      	ldr	r2, [pc, #36]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe ffa0 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	080037d0 	.word	0x080037d0
 8001c20:	20000008 	.word	0x20000008
 8001c24:	2000000c 	.word	0x2000000c

08001c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c2c:	b094      	sub	sp, #80	@ 0x50
 8001c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c40:	4b79      	ldr	r3, [pc, #484]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d00d      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x40>
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	f200 80e1 	bhi.w	8001e14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x34>
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5a:	e0db      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b73      	ldr	r3, [pc, #460]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c60:	e0db      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c62:	4b73      	ldr	r3, [pc, #460]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c66:	e0d8      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c68:	4b6f      	ldr	r3, [pc, #444]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c72:	4b6d      	ldr	r3, [pc, #436]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d063      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	2200      	movs	r2, #0
 8001c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c92:	2300      	movs	r3, #0
 8001c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	462b      	mov	r3, r5
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	f04f 0100 	mov.w	r1, #0
 8001ca6:	0159      	lsls	r1, r3, #5
 8001ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cac:	0150      	lsls	r0, r2, #5
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1a51      	subs	r1, r2, r1
 8001cb6:	6139      	str	r1, [r7, #16]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ccc:	4659      	mov	r1, fp
 8001cce:	018b      	lsls	r3, r1, #6
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd6:	4651      	mov	r1, sl
 8001cd8:	018a      	lsls	r2, r1, #6
 8001cda:	4651      	mov	r1, sl
 8001cdc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cfa:	4690      	mov	r8, r2
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	eb18 0303 	adds.w	r3, r8, r3
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	462b      	mov	r3, r5
 8001d08:	eb49 0303 	adc.w	r3, r9, r3
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	024b      	lsls	r3, r1, #9
 8001d1e:	4621      	mov	r1, r4
 8001d20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d24:	4621      	mov	r1, r4
 8001d26:	024a      	lsls	r2, r1, #9
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2e:	2200      	movs	r2, #0
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d38:	f7fe fa4e 	bl	80001d8 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4613      	mov	r3, r2
 8001d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d44:	e058      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b38      	ldr	r3, [pc, #224]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4611      	mov	r1, r2
 8001d52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d60:	4642      	mov	r2, r8
 8001d62:	464b      	mov	r3, r9
 8001d64:	f04f 0000 	mov.w	r0, #0
 8001d68:	f04f 0100 	mov.w	r1, #0
 8001d6c:	0159      	lsls	r1, r3, #5
 8001d6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d72:	0150      	lsls	r0, r2, #5
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4641      	mov	r1, r8
 8001d7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d7e:	4649      	mov	r1, r9
 8001d80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d98:	ebb2 040a 	subs.w	r4, r2, sl
 8001d9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	00eb      	lsls	r3, r5, #3
 8001daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dae:	00e2      	lsls	r2, r4, #3
 8001db0:	4614      	mov	r4, r2
 8001db2:	461d      	mov	r5, r3
 8001db4:	4643      	mov	r3, r8
 8001db6:	18e3      	adds	r3, r4, r3
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	464b      	mov	r3, r9
 8001dbc:	eb45 0303 	adc.w	r3, r5, r3
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dce:	4629      	mov	r1, r5
 8001dd0:	028b      	lsls	r3, r1, #10
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dd8:	4621      	mov	r1, r4
 8001dda:	028a      	lsls	r2, r1, #10
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de2:	2200      	movs	r2, #0
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	61fa      	str	r2, [r7, #28]
 8001de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dec:	f7fe f9f4 	bl	80001d8 <__aeabi_uldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4613      	mov	r3, r2
 8001df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	0c1b      	lsrs	r3, r3, #16
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	3301      	adds	r3, #1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e12:	e002      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3750      	adds	r7, #80	@ 0x50
 8001e20:	46bd      	mov	sp, r7
 8001e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	007a1200 	.word	0x007a1200

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b03      	ldr	r3, [pc, #12]	@ (8001e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e50:	f7ff fff0 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	0a9b      	lsrs	r3, r3, #10
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4903      	ldr	r1, [pc, #12]	@ (8001e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	080037e0 	.word	0x080037e0

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e78:	f7ff ffdc 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0b5b      	lsrs	r3, r3, #13
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4903      	ldr	r1, [pc, #12]	@ (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	080037e0 	.word	0x080037e0

08001e9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0203 	and.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ed0:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <HAL_RCC_GetClockConfig+0x60>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0207 	and.w	r2, r3, #7
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	601a      	str	r2, [r3, #0]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e041      	b.n	8001f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f839 	bl	8001f9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f000 f9b2 	bl	80022a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e044      	b.n	8002056 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8002064 <HAL_TIM_Base_Start_IT+0xb0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d018      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff6:	d013      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8002068 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00e      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_TIM_Base_Start_IT+0xb8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a17      	ldr	r2, [pc, #92]	@ (8002070 <HAL_TIM_Base_Start_IT+0xbc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d004      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x6c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a16      	ldr	r2, [pc, #88]	@ (8002074 <HAL_TIM_Base_Start_IT+0xc0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d111      	bne.n	8002044 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b06      	cmp	r3, #6
 8002030:	d010      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002042:	e007      	b.n	8002054 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	40000400 	.word	0x40000400
 800206c:	40000800 	.word	0x40000800
 8002070:	40000c00 	.word	0x40000c00
 8002074:	40014000 	.word	0x40014000

08002078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d020      	beq.n	80020dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0202 	mvn.w	r2, #2
 80020ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8d2 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8c4 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f8d5 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01b      	beq.n	8002128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0204 	mvn.w	r2, #4
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8ac 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f89e 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f8af 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d020      	beq.n	8002174 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0208 	mvn.w	r2, #8
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f886 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f878 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f889 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d020      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0210 	mvn.w	r2, #16
 8002190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2208      	movs	r2, #8
 8002196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f860 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f852 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f863 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0201 	mvn.w	r2, #1
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fc72 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f8e6 	bl	80023d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f834 	bl	8002294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00c      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0220 	mvn.w	r2, #32
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8b8 	bl	80023c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3a      	ldr	r2, [pc, #232]	@ (80023a4 <TIM_Base_SetConfig+0xfc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00f      	beq.n	80022e0 <TIM_Base_SetConfig+0x38>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c6:	d00b      	beq.n	80022e0 <TIM_Base_SetConfig+0x38>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a37      	ldr	r2, [pc, #220]	@ (80023a8 <TIM_Base_SetConfig+0x100>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <TIM_Base_SetConfig+0x38>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a36      	ldr	r2, [pc, #216]	@ (80023ac <TIM_Base_SetConfig+0x104>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d003      	beq.n	80022e0 <TIM_Base_SetConfig+0x38>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a35      	ldr	r2, [pc, #212]	@ (80023b0 <TIM_Base_SetConfig+0x108>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d108      	bne.n	80022f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2b      	ldr	r2, [pc, #172]	@ (80023a4 <TIM_Base_SetConfig+0xfc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01b      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002300:	d017      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a28      	ldr	r2, [pc, #160]	@ (80023a8 <TIM_Base_SetConfig+0x100>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a27      	ldr	r2, [pc, #156]	@ (80023ac <TIM_Base_SetConfig+0x104>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00f      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a26      	ldr	r2, [pc, #152]	@ (80023b0 <TIM_Base_SetConfig+0x108>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00b      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a25      	ldr	r2, [pc, #148]	@ (80023b4 <TIM_Base_SetConfig+0x10c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d007      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a24      	ldr	r2, [pc, #144]	@ (80023b8 <TIM_Base_SetConfig+0x110>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a23      	ldr	r2, [pc, #140]	@ (80023bc <TIM_Base_SetConfig+0x114>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d108      	bne.n	8002344 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <TIM_Base_SetConfig+0xfc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d103      	bne.n	8002378 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f023 0201 	bic.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
  }
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	40014000 	.word	0x40014000
 80023b8:	40014400 	.word	0x40014400
 80023bc:	40014800 	.word	0x40014800

080023c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e042      	b.n	8002480 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fd2e 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	@ 0x24
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800242a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fa09 	bl	8002844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d175      	bne.n	8002594 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_UART_Transmit+0x2c>
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e06e      	b.n	8002596 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2221      	movs	r2, #33	@ 0x21
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024c6:	f7fe fd7b 	bl	8000fc0 <HAL_GetTick>
 80024ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	88fa      	ldrh	r2, [r7, #6]
 80024d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024e0:	d108      	bne.n	80024f4 <HAL_UART_Transmit+0x6c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d104      	bne.n	80024f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	e003      	b.n	80024fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024fc:	e02e      	b.n	800255c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2200      	movs	r2, #0
 8002506:	2180      	movs	r1, #128	@ 0x80
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f8df 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e03a      	b.n	8002596 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10b      	bne.n	800253e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	3302      	adds	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	e007      	b.n	800254e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3301      	adds	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1cb      	bne.n	80024fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2200      	movs	r2, #0
 800256e:	2140      	movs	r1, #64	@ 0x40
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f8ab 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e006      	b.n	8002596 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b08a      	sub	sp, #40	@ 0x28
 80025a2:	af02      	add	r7, sp, #8
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	f040 8081 	bne.w	80026c2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_UART_Receive+0x2e>
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e079      	b.n	80026c4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2222      	movs	r2, #34	@ 0x22
 80025da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fcec 	bl	8000fc0 <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	88fa      	ldrh	r2, [r7, #6]
 80025ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025fe:	d108      	bne.n	8002612 <HAL_UART_Receive+0x74>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e003      	b.n	800261a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800261a:	e047      	b.n	80026ac <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2200      	movs	r2, #0
 8002624:	2120      	movs	r1, #32
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f850 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e042      	b.n	80026c4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002650:	b29a      	uxth	r2, r3
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	3302      	adds	r3, #2
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	e01f      	b.n	800269e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002666:	d007      	beq.n	8002678 <HAL_UART_Receive+0xda>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <HAL_UART_Receive+0xe8>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e008      	b.n	8002698 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002692:	b2da      	uxtb	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3301      	adds	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1b2      	bne.n	800261c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026dc:	e03b      	b.n	8002756 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d037      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7fe fc6b 	bl	8000fc0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	6a3a      	ldr	r2, [r7, #32]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <UART_WaitOnFlagUntilTimeout+0x30>
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e03a      	b.n	8002776 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d023      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0x8a>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b80      	cmp	r3, #128	@ 0x80
 8002712:	d020      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b40      	cmp	r3, #64	@ 0x40
 8002718:	d01d      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b08      	cmp	r3, #8
 8002726:	d116      	bne.n	8002756 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f81d 	bl	800277e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2208      	movs	r2, #8
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	429a      	cmp	r2, r3
 8002772:	d0b4      	beq.n	80026de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800277e:	b480      	push	{r7}
 8002780:	b095      	sub	sp, #84	@ 0x54
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800279c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80027a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027ae:	e841 2300 	strex	r3, r2, [r1]
 80027b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e5      	bne.n	8002786 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3314      	adds	r3, #20
 80027c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3314      	adds	r3, #20
 80027d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e5      	bne.n	80027ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d119      	bne.n	800282a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	e853 3f00 	ldrex	r3, [r3]
 8002804:	60bb      	str	r3, [r7, #8]
   return(result);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f023 0310 	bic.w	r3, r3, #16
 800280c:	647b      	str	r3, [r7, #68]	@ 0x44
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	330c      	adds	r3, #12
 8002814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002816:	61ba      	str	r2, [r7, #24]
 8002818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281a:	6979      	ldr	r1, [r7, #20]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	613b      	str	r3, [r7, #16]
   return(result);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e5      	bne.n	80027f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002838:	bf00      	nop
 800283a:	3754      	adds	r7, #84	@ 0x54
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002848:	b0c0      	sub	sp, #256	@ 0x100
 800284a:	af00      	add	r7, sp, #0
 800284c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	68d9      	ldr	r1, [r3, #12]
 8002862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	ea40 0301 	orr.w	r3, r0, r1
 800286c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	431a      	orrs	r2, r3
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	431a      	orrs	r2, r3
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800289c:	f021 010c 	bic.w	r1, r1, #12
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028aa:	430b      	orrs	r3, r1
 80028ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028be:	6999      	ldr	r1, [r3, #24]
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	ea40 0301 	orr.w	r3, r0, r1
 80028ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b10 <UART_SetConfig+0x2cc>)
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d005      	beq.n	80028e4 <UART_SetConfig+0xa0>
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b8d      	ldr	r3, [pc, #564]	@ (8002b14 <UART_SetConfig+0x2d0>)
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d104      	bne.n	80028ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028e4:	f7ff fac6 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 80028e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028ec:	e003      	b.n	80028f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028ee:	f7ff faad 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 80028f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002900:	f040 810c 	bne.w	8002b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002908:	2200      	movs	r2, #0
 800290a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800290e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002916:	4622      	mov	r2, r4
 8002918:	462b      	mov	r3, r5
 800291a:	1891      	adds	r1, r2, r2
 800291c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800291e:	415b      	adcs	r3, r3
 8002920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002926:	4621      	mov	r1, r4
 8002928:	eb12 0801 	adds.w	r8, r2, r1
 800292c:	4629      	mov	r1, r5
 800292e:	eb43 0901 	adc.w	r9, r3, r1
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800293e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002946:	4690      	mov	r8, r2
 8002948:	4699      	mov	r9, r3
 800294a:	4623      	mov	r3, r4
 800294c:	eb18 0303 	adds.w	r3, r8, r3
 8002950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002954:	462b      	mov	r3, r5
 8002956:	eb49 0303 	adc.w	r3, r9, r3
 800295a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800296a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800296e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002972:	460b      	mov	r3, r1
 8002974:	18db      	adds	r3, r3, r3
 8002976:	653b      	str	r3, [r7, #80]	@ 0x50
 8002978:	4613      	mov	r3, r2
 800297a:	eb42 0303 	adc.w	r3, r2, r3
 800297e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002988:	f7fd fc26 	bl	80001d8 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4b61      	ldr	r3, [pc, #388]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002992:	fba3 2302 	umull	r2, r3, r3, r2
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	011c      	lsls	r4, r3, #4
 800299a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029ac:	4642      	mov	r2, r8
 80029ae:	464b      	mov	r3, r9
 80029b0:	1891      	adds	r1, r2, r2
 80029b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029b4:	415b      	adcs	r3, r3
 80029b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029bc:	4641      	mov	r1, r8
 80029be:	eb12 0a01 	adds.w	sl, r2, r1
 80029c2:	4649      	mov	r1, r9
 80029c4:	eb43 0b01 	adc.w	fp, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029dc:	4692      	mov	sl, r2
 80029de:	469b      	mov	fp, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	eb1a 0303 	adds.w	r3, sl, r3
 80029e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029ea:	464b      	mov	r3, r9
 80029ec:	eb4b 0303 	adc.w	r3, fp, r3
 80029f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	18db      	adds	r3, r3, r3
 8002a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a0e:	4613      	mov	r3, r2
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a1e:	f7fd fbdb 	bl	80001d8 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	4b3b      	ldr	r3, [pc, #236]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2264      	movs	r2, #100	@ 0x64
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	1acb      	subs	r3, r1, r3
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a3e:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002a40:	fba3 2302 	umull	r2, r3, r3, r2
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a4c:	441c      	add	r4, r3
 8002a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a60:	4642      	mov	r2, r8
 8002a62:	464b      	mov	r3, r9
 8002a64:	1891      	adds	r1, r2, r2
 8002a66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a68:	415b      	adcs	r3, r3
 8002a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a70:	4641      	mov	r1, r8
 8002a72:	1851      	adds	r1, r2, r1
 8002a74:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a76:	4649      	mov	r1, r9
 8002a78:	414b      	adcs	r3, r1
 8002a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a88:	4659      	mov	r1, fp
 8002a8a:	00cb      	lsls	r3, r1, #3
 8002a8c:	4651      	mov	r1, sl
 8002a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a92:	4651      	mov	r1, sl
 8002a94:	00ca      	lsls	r2, r1, #3
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4642      	mov	r2, r8
 8002a9e:	189b      	adds	r3, r3, r2
 8002aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	460a      	mov	r2, r1
 8002aa8:	eb42 0303 	adc.w	r3, r2, r3
 8002aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002abc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	18db      	adds	r3, r3, r3
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aca:	4613      	mov	r3, r2
 8002acc:	eb42 0303 	adc.w	r3, r2, r3
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ada:	f7fd fb7d 	bl	80001d8 <__aeabi_uldivmod>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	2164      	movs	r1, #100	@ 0x64
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	3332      	adds	r3, #50	@ 0x32
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <UART_SetConfig+0x2d4>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	f003 0207 	and.w	r2, r3, #7
 8002b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4422      	add	r2, r4
 8002b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b0c:	e106      	b.n	8002d1c <UART_SetConfig+0x4d8>
 8002b0e:	bf00      	nop
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40011400 	.word	0x40011400
 8002b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b20:	2200      	movs	r2, #0
 8002b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b2e:	4642      	mov	r2, r8
 8002b30:	464b      	mov	r3, r9
 8002b32:	1891      	adds	r1, r2, r2
 8002b34:	6239      	str	r1, [r7, #32]
 8002b36:	415b      	adcs	r3, r3
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b3e:	4641      	mov	r1, r8
 8002b40:	1854      	adds	r4, r2, r1
 8002b42:	4649      	mov	r1, r9
 8002b44:	eb43 0501 	adc.w	r5, r3, r1
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	00eb      	lsls	r3, r5, #3
 8002b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b56:	00e2      	lsls	r2, r4, #3
 8002b58:	4614      	mov	r4, r2
 8002b5a:	461d      	mov	r5, r3
 8002b5c:	4643      	mov	r3, r8
 8002b5e:	18e3      	adds	r3, r4, r3
 8002b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b64:	464b      	mov	r3, r9
 8002b66:	eb45 0303 	adc.w	r3, r5, r3
 8002b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	008b      	lsls	r3, r1, #2
 8002b8e:	4621      	mov	r1, r4
 8002b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b94:	4621      	mov	r1, r4
 8002b96:	008a      	lsls	r2, r1, #2
 8002b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b9c:	f7fd fb1c 	bl	80001d8 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4b60      	ldr	r3, [pc, #384]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	011c      	lsls	r4, r3, #4
 8002bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	1891      	adds	r1, r2, r2
 8002bc6:	61b9      	str	r1, [r7, #24]
 8002bc8:	415b      	adcs	r3, r3
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	1851      	adds	r1, r2, r1
 8002bd4:	6139      	str	r1, [r7, #16]
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	414b      	adcs	r3, r1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be8:	4659      	mov	r1, fp
 8002bea:	00cb      	lsls	r3, r1, #3
 8002bec:	4651      	mov	r1, sl
 8002bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	00ca      	lsls	r2, r1, #3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	189b      	adds	r3, r3, r2
 8002c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c04:	464b      	mov	r3, r9
 8002c06:	460a      	mov	r2, r1
 8002c08:	eb42 0303 	adc.w	r3, r2, r3
 8002c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c28:	4649      	mov	r1, r9
 8002c2a:	008b      	lsls	r3, r1, #2
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c32:	4641      	mov	r1, r8
 8002c34:	008a      	lsls	r2, r1, #2
 8002c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c3a:	f7fd facd 	bl	80001d8 <__aeabi_uldivmod>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002c46:	fba3 2301 	umull	r2, r3, r3, r1
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2264      	movs	r2, #100	@ 0x64
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	1acb      	subs	r3, r1, r3
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	3332      	adds	r3, #50	@ 0x32
 8002c58:	4a33      	ldr	r2, [pc, #204]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c64:	441c      	add	r4, r3
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	1891      	adds	r1, r2, r2
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	415b      	adcs	r3, r3
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c84:	4641      	mov	r1, r8
 8002c86:	1851      	adds	r1, r2, r1
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	414b      	adcs	r3, r1
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c9c:	4659      	mov	r1, fp
 8002c9e:	00cb      	lsls	r3, r1, #3
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	00ca      	lsls	r2, r1, #3
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4642      	mov	r2, r8
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	460a      	mov	r2, r1
 8002cba:	eb42 0303 	adc.w	r3, r2, r3
 8002cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cca:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cd8:	4649      	mov	r1, r9
 8002cda:	008b      	lsls	r3, r1, #2
 8002cdc:	4641      	mov	r1, r8
 8002cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	008a      	lsls	r2, r1, #2
 8002ce6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cea:	f7fd fa75 	bl	80001d8 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	2164      	movs	r1, #100	@ 0x64
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	3332      	adds	r3, #50	@ 0x32
 8002d06:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <UART_SetConfig+0x4e4>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4422      	add	r2, r4
 8002d1a:	609a      	str	r2, [r3, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d22:	46bd      	mov	sp, r7
 8002d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d28:	51eb851f 	.word	0x51eb851f

08002d2c <std>:
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	b510      	push	{r4, lr}
 8002d30:	4604      	mov	r4, r0
 8002d32:	e9c0 3300 	strd	r3, r3, [r0]
 8002d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d3a:	6083      	str	r3, [r0, #8]
 8002d3c:	8181      	strh	r1, [r0, #12]
 8002d3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d40:	81c2      	strh	r2, [r0, #14]
 8002d42:	6183      	str	r3, [r0, #24]
 8002d44:	4619      	mov	r1, r3
 8002d46:	2208      	movs	r2, #8
 8002d48:	305c      	adds	r0, #92	@ 0x5c
 8002d4a:	f000 f9b0 	bl	80030ae <memset>
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <std+0x58>)
 8002d50:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <std+0x5c>)
 8002d54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d56:	4b0d      	ldr	r3, [pc, #52]	@ (8002d8c <std+0x60>)
 8002d58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <std+0x64>)
 8002d5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <std+0x68>)
 8002d60:	6224      	str	r4, [r4, #32]
 8002d62:	429c      	cmp	r4, r3
 8002d64:	d006      	beq.n	8002d74 <std+0x48>
 8002d66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d6a:	4294      	cmp	r4, r2
 8002d6c:	d002      	beq.n	8002d74 <std+0x48>
 8002d6e:	33d0      	adds	r3, #208	@ 0xd0
 8002d70:	429c      	cmp	r4, r3
 8002d72:	d105      	bne.n	8002d80 <std+0x54>
 8002d74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d7c:	f000 ba10 	b.w	80031a0 <__retarget_lock_init_recursive>
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	bf00      	nop
 8002d84:	08003029 	.word	0x08003029
 8002d88:	0800304b 	.word	0x0800304b
 8002d8c:	08003083 	.word	0x08003083
 8002d90:	080030a7 	.word	0x080030a7
 8002d94:	2000012c 	.word	0x2000012c

08002d98 <stdio_exit_handler>:
 8002d98:	4a02      	ldr	r2, [pc, #8]	@ (8002da4 <stdio_exit_handler+0xc>)
 8002d9a:	4903      	ldr	r1, [pc, #12]	@ (8002da8 <stdio_exit_handler+0x10>)
 8002d9c:	4803      	ldr	r0, [pc, #12]	@ (8002dac <stdio_exit_handler+0x14>)
 8002d9e:	f000 b869 	b.w	8002e74 <_fwalk_sglue>
 8002da2:	bf00      	nop
 8002da4:	20000014 	.word	0x20000014
 8002da8:	080034b1 	.word	0x080034b1
 8002dac:	20000024 	.word	0x20000024

08002db0 <cleanup_stdio>:
 8002db0:	6841      	ldr	r1, [r0, #4]
 8002db2:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <cleanup_stdio+0x34>)
 8002db4:	4299      	cmp	r1, r3
 8002db6:	b510      	push	{r4, lr}
 8002db8:	4604      	mov	r4, r0
 8002dba:	d001      	beq.n	8002dc0 <cleanup_stdio+0x10>
 8002dbc:	f000 fb78 	bl	80034b0 <_fflush_r>
 8002dc0:	68a1      	ldr	r1, [r4, #8]
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <cleanup_stdio+0x38>)
 8002dc4:	4299      	cmp	r1, r3
 8002dc6:	d002      	beq.n	8002dce <cleanup_stdio+0x1e>
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f000 fb71 	bl	80034b0 <_fflush_r>
 8002dce:	68e1      	ldr	r1, [r4, #12]
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <cleanup_stdio+0x3c>)
 8002dd2:	4299      	cmp	r1, r3
 8002dd4:	d004      	beq.n	8002de0 <cleanup_stdio+0x30>
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ddc:	f000 bb68 	b.w	80034b0 <_fflush_r>
 8002de0:	bd10      	pop	{r4, pc}
 8002de2:	bf00      	nop
 8002de4:	2000012c 	.word	0x2000012c
 8002de8:	20000194 	.word	0x20000194
 8002dec:	200001fc 	.word	0x200001fc

08002df0 <global_stdio_init.part.0>:
 8002df0:	b510      	push	{r4, lr}
 8002df2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <global_stdio_init.part.0+0x30>)
 8002df4:	4c0b      	ldr	r4, [pc, #44]	@ (8002e24 <global_stdio_init.part.0+0x34>)
 8002df6:	4a0c      	ldr	r2, [pc, #48]	@ (8002e28 <global_stdio_init.part.0+0x38>)
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2104      	movs	r1, #4
 8002e00:	f7ff ff94 	bl	8002d2c <std>
 8002e04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2109      	movs	r1, #9
 8002e0c:	f7ff ff8e 	bl	8002d2c <std>
 8002e10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e14:	2202      	movs	r2, #2
 8002e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e1a:	2112      	movs	r1, #18
 8002e1c:	f7ff bf86 	b.w	8002d2c <std>
 8002e20:	20000264 	.word	0x20000264
 8002e24:	2000012c 	.word	0x2000012c
 8002e28:	08002d99 	.word	0x08002d99

08002e2c <__sfp_lock_acquire>:
 8002e2c:	4801      	ldr	r0, [pc, #4]	@ (8002e34 <__sfp_lock_acquire+0x8>)
 8002e2e:	f000 b9b8 	b.w	80031a2 <__retarget_lock_acquire_recursive>
 8002e32:	bf00      	nop
 8002e34:	2000026d 	.word	0x2000026d

08002e38 <__sfp_lock_release>:
 8002e38:	4801      	ldr	r0, [pc, #4]	@ (8002e40 <__sfp_lock_release+0x8>)
 8002e3a:	f000 b9b3 	b.w	80031a4 <__retarget_lock_release_recursive>
 8002e3e:	bf00      	nop
 8002e40:	2000026d 	.word	0x2000026d

08002e44 <__sinit>:
 8002e44:	b510      	push	{r4, lr}
 8002e46:	4604      	mov	r4, r0
 8002e48:	f7ff fff0 	bl	8002e2c <__sfp_lock_acquire>
 8002e4c:	6a23      	ldr	r3, [r4, #32]
 8002e4e:	b11b      	cbz	r3, 8002e58 <__sinit+0x14>
 8002e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e54:	f7ff bff0 	b.w	8002e38 <__sfp_lock_release>
 8002e58:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <__sinit+0x28>)
 8002e5a:	6223      	str	r3, [r4, #32]
 8002e5c:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <__sinit+0x2c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f5      	bne.n	8002e50 <__sinit+0xc>
 8002e64:	f7ff ffc4 	bl	8002df0 <global_stdio_init.part.0>
 8002e68:	e7f2      	b.n	8002e50 <__sinit+0xc>
 8002e6a:	bf00      	nop
 8002e6c:	08002db1 	.word	0x08002db1
 8002e70:	20000264 	.word	0x20000264

08002e74 <_fwalk_sglue>:
 8002e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e78:	4607      	mov	r7, r0
 8002e7a:	4688      	mov	r8, r1
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	2600      	movs	r6, #0
 8002e80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e84:	f1b9 0901 	subs.w	r9, r9, #1
 8002e88:	d505      	bpl.n	8002e96 <_fwalk_sglue+0x22>
 8002e8a:	6824      	ldr	r4, [r4, #0]
 8002e8c:	2c00      	cmp	r4, #0
 8002e8e:	d1f7      	bne.n	8002e80 <_fwalk_sglue+0xc>
 8002e90:	4630      	mov	r0, r6
 8002e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e96:	89ab      	ldrh	r3, [r5, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d907      	bls.n	8002eac <_fwalk_sglue+0x38>
 8002e9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	d003      	beq.n	8002eac <_fwalk_sglue+0x38>
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	47c0      	blx	r8
 8002eaa:	4306      	orrs	r6, r0
 8002eac:	3568      	adds	r5, #104	@ 0x68
 8002eae:	e7e9      	b.n	8002e84 <_fwalk_sglue+0x10>

08002eb0 <putchar>:
 8002eb0:	4b02      	ldr	r3, [pc, #8]	@ (8002ebc <putchar+0xc>)
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	6882      	ldr	r2, [r0, #8]
 8002eb8:	f000 bb84 	b.w	80035c4 <_putc_r>
 8002ebc:	20000020 	.word	0x20000020

08002ec0 <setvbuf>:
 8002ec0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002ec4:	461d      	mov	r5, r3
 8002ec6:	4b57      	ldr	r3, [pc, #348]	@ (8003024 <setvbuf+0x164>)
 8002ec8:	681f      	ldr	r7, [r3, #0]
 8002eca:	4604      	mov	r4, r0
 8002ecc:	460e      	mov	r6, r1
 8002ece:	4690      	mov	r8, r2
 8002ed0:	b127      	cbz	r7, 8002edc <setvbuf+0x1c>
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	b913      	cbnz	r3, 8002edc <setvbuf+0x1c>
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	f7ff ffb4 	bl	8002e44 <__sinit>
 8002edc:	f1b8 0f02 	cmp.w	r8, #2
 8002ee0:	d006      	beq.n	8002ef0 <setvbuf+0x30>
 8002ee2:	f1b8 0f01 	cmp.w	r8, #1
 8002ee6:	f200 809a 	bhi.w	800301e <setvbuf+0x15e>
 8002eea:	2d00      	cmp	r5, #0
 8002eec:	f2c0 8097 	blt.w	800301e <setvbuf+0x15e>
 8002ef0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ef2:	07d9      	lsls	r1, r3, #31
 8002ef4:	d405      	bmi.n	8002f02 <setvbuf+0x42>
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	059a      	lsls	r2, r3, #22
 8002efa:	d402      	bmi.n	8002f02 <setvbuf+0x42>
 8002efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002efe:	f000 f950 	bl	80031a2 <__retarget_lock_acquire_recursive>
 8002f02:	4621      	mov	r1, r4
 8002f04:	4638      	mov	r0, r7
 8002f06:	f000 fad3 	bl	80034b0 <_fflush_r>
 8002f0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f0c:	b141      	cbz	r1, 8002f20 <setvbuf+0x60>
 8002f0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f12:	4299      	cmp	r1, r3
 8002f14:	d002      	beq.n	8002f1c <setvbuf+0x5c>
 8002f16:	4638      	mov	r0, r7
 8002f18:	f000 f946 	bl	80031a8 <_free_r>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f20:	2300      	movs	r3, #0
 8002f22:	61a3      	str	r3, [r4, #24]
 8002f24:	6063      	str	r3, [r4, #4]
 8002f26:	89a3      	ldrh	r3, [r4, #12]
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	d503      	bpl.n	8002f34 <setvbuf+0x74>
 8002f2c:	6921      	ldr	r1, [r4, #16]
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f000 f93a 	bl	80031a8 <_free_r>
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	f1b8 0f02 	cmp.w	r8, #2
 8002f42:	81a3      	strh	r3, [r4, #12]
 8002f44:	d061      	beq.n	800300a <setvbuf+0x14a>
 8002f46:	ab01      	add	r3, sp, #4
 8002f48:	466a      	mov	r2, sp
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	f000 fad7 	bl	8003500 <__swhatbuf_r>
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	4318      	orrs	r0, r3
 8002f56:	81a0      	strh	r0, [r4, #12]
 8002f58:	bb2d      	cbnz	r5, 8002fa6 <setvbuf+0xe6>
 8002f5a:	9d00      	ldr	r5, [sp, #0]
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 f96d 	bl	800323c <malloc>
 8002f62:	4606      	mov	r6, r0
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d152      	bne.n	800300e <setvbuf+0x14e>
 8002f68:	f8dd 9000 	ldr.w	r9, [sp]
 8002f6c:	45a9      	cmp	r9, r5
 8002f6e:	d140      	bne.n	8002ff2 <setvbuf+0x132>
 8002f70:	f04f 35ff 	mov.w	r5, #4294967295
 8002f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f78:	f043 0202 	orr.w	r2, r3, #2
 8002f7c:	81a2      	strh	r2, [r4, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60a2      	str	r2, [r4, #8]
 8002f82:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002f86:	6022      	str	r2, [r4, #0]
 8002f88:	6122      	str	r2, [r4, #16]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	6162      	str	r2, [r4, #20]
 8002f8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f90:	07d6      	lsls	r6, r2, #31
 8002f92:	d404      	bmi.n	8002f9e <setvbuf+0xde>
 8002f94:	0598      	lsls	r0, r3, #22
 8002f96:	d402      	bmi.n	8002f9e <setvbuf+0xde>
 8002f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f9a:	f000 f903 	bl	80031a4 <__retarget_lock_release_recursive>
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	b003      	add	sp, #12
 8002fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fa6:	2e00      	cmp	r6, #0
 8002fa8:	d0d8      	beq.n	8002f5c <setvbuf+0x9c>
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	b913      	cbnz	r3, 8002fb4 <setvbuf+0xf4>
 8002fae:	4638      	mov	r0, r7
 8002fb0:	f7ff ff48 	bl	8002e44 <__sinit>
 8002fb4:	f1b8 0f01 	cmp.w	r8, #1
 8002fb8:	bf08      	it	eq
 8002fba:	89a3      	ldrheq	r3, [r4, #12]
 8002fbc:	6026      	str	r6, [r4, #0]
 8002fbe:	bf04      	itt	eq
 8002fc0:	f043 0301 	orreq.w	r3, r3, #1
 8002fc4:	81a3      	strheq	r3, [r4, #12]
 8002fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fca:	f013 0208 	ands.w	r2, r3, #8
 8002fce:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002fd2:	d01e      	beq.n	8003012 <setvbuf+0x152>
 8002fd4:	07d9      	lsls	r1, r3, #31
 8002fd6:	bf41      	itttt	mi
 8002fd8:	2200      	movmi	r2, #0
 8002fda:	426d      	negmi	r5, r5
 8002fdc:	60a2      	strmi	r2, [r4, #8]
 8002fde:	61a5      	strmi	r5, [r4, #24]
 8002fe0:	bf58      	it	pl
 8002fe2:	60a5      	strpl	r5, [r4, #8]
 8002fe4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fe6:	07d2      	lsls	r2, r2, #31
 8002fe8:	d401      	bmi.n	8002fee <setvbuf+0x12e>
 8002fea:	059b      	lsls	r3, r3, #22
 8002fec:	d513      	bpl.n	8003016 <setvbuf+0x156>
 8002fee:	2500      	movs	r5, #0
 8002ff0:	e7d5      	b.n	8002f9e <setvbuf+0xde>
 8002ff2:	4648      	mov	r0, r9
 8002ff4:	f000 f922 	bl	800323c <malloc>
 8002ff8:	4606      	mov	r6, r0
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d0b8      	beq.n	8002f70 <setvbuf+0xb0>
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003004:	81a3      	strh	r3, [r4, #12]
 8003006:	464d      	mov	r5, r9
 8003008:	e7cf      	b.n	8002faa <setvbuf+0xea>
 800300a:	2500      	movs	r5, #0
 800300c:	e7b2      	b.n	8002f74 <setvbuf+0xb4>
 800300e:	46a9      	mov	r9, r5
 8003010:	e7f5      	b.n	8002ffe <setvbuf+0x13e>
 8003012:	60a2      	str	r2, [r4, #8]
 8003014:	e7e6      	b.n	8002fe4 <setvbuf+0x124>
 8003016:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003018:	f000 f8c4 	bl	80031a4 <__retarget_lock_release_recursive>
 800301c:	e7e7      	b.n	8002fee <setvbuf+0x12e>
 800301e:	f04f 35ff 	mov.w	r5, #4294967295
 8003022:	e7bc      	b.n	8002f9e <setvbuf+0xde>
 8003024:	20000020 	.word	0x20000020

08003028 <__sread>:
 8003028:	b510      	push	{r4, lr}
 800302a:	460c      	mov	r4, r1
 800302c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003030:	f000 f868 	bl	8003104 <_read_r>
 8003034:	2800      	cmp	r0, #0
 8003036:	bfab      	itete	ge
 8003038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800303a:	89a3      	ldrhlt	r3, [r4, #12]
 800303c:	181b      	addge	r3, r3, r0
 800303e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003042:	bfac      	ite	ge
 8003044:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003046:	81a3      	strhlt	r3, [r4, #12]
 8003048:	bd10      	pop	{r4, pc}

0800304a <__swrite>:
 800304a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800304e:	461f      	mov	r7, r3
 8003050:	898b      	ldrh	r3, [r1, #12]
 8003052:	05db      	lsls	r3, r3, #23
 8003054:	4605      	mov	r5, r0
 8003056:	460c      	mov	r4, r1
 8003058:	4616      	mov	r6, r2
 800305a:	d505      	bpl.n	8003068 <__swrite+0x1e>
 800305c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003060:	2302      	movs	r3, #2
 8003062:	2200      	movs	r2, #0
 8003064:	f000 f83c 	bl	80030e0 <_lseek_r>
 8003068:	89a3      	ldrh	r3, [r4, #12]
 800306a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800306e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003072:	81a3      	strh	r3, [r4, #12]
 8003074:	4632      	mov	r2, r6
 8003076:	463b      	mov	r3, r7
 8003078:	4628      	mov	r0, r5
 800307a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800307e:	f000 b853 	b.w	8003128 <_write_r>

08003082 <__sseek>:
 8003082:	b510      	push	{r4, lr}
 8003084:	460c      	mov	r4, r1
 8003086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800308a:	f000 f829 	bl	80030e0 <_lseek_r>
 800308e:	1c43      	adds	r3, r0, #1
 8003090:	89a3      	ldrh	r3, [r4, #12]
 8003092:	bf15      	itete	ne
 8003094:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800309a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800309e:	81a3      	strheq	r3, [r4, #12]
 80030a0:	bf18      	it	ne
 80030a2:	81a3      	strhne	r3, [r4, #12]
 80030a4:	bd10      	pop	{r4, pc}

080030a6 <__sclose>:
 80030a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030aa:	f000 b809 	b.w	80030c0 <_close_r>

080030ae <memset>:
 80030ae:	4402      	add	r2, r0
 80030b0:	4603      	mov	r3, r0
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d100      	bne.n	80030b8 <memset+0xa>
 80030b6:	4770      	bx	lr
 80030b8:	f803 1b01 	strb.w	r1, [r3], #1
 80030bc:	e7f9      	b.n	80030b2 <memset+0x4>
	...

080030c0 <_close_r>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4d06      	ldr	r5, [pc, #24]	@ (80030dc <_close_r+0x1c>)
 80030c4:	2300      	movs	r3, #0
 80030c6:	4604      	mov	r4, r0
 80030c8:	4608      	mov	r0, r1
 80030ca:	602b      	str	r3, [r5, #0]
 80030cc:	f7fd fe29 	bl	8000d22 <_close>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d102      	bne.n	80030da <_close_r+0x1a>
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	b103      	cbz	r3, 80030da <_close_r+0x1a>
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	bd38      	pop	{r3, r4, r5, pc}
 80030dc:	20000268 	.word	0x20000268

080030e0 <_lseek_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	4d07      	ldr	r5, [pc, #28]	@ (8003100 <_lseek_r+0x20>)
 80030e4:	4604      	mov	r4, r0
 80030e6:	4608      	mov	r0, r1
 80030e8:	4611      	mov	r1, r2
 80030ea:	2200      	movs	r2, #0
 80030ec:	602a      	str	r2, [r5, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	f7fd fe3e 	bl	8000d70 <_lseek>
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d102      	bne.n	80030fe <_lseek_r+0x1e>
 80030f8:	682b      	ldr	r3, [r5, #0]
 80030fa:	b103      	cbz	r3, 80030fe <_lseek_r+0x1e>
 80030fc:	6023      	str	r3, [r4, #0]
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
 8003100:	20000268 	.word	0x20000268

08003104 <_read_r>:
 8003104:	b538      	push	{r3, r4, r5, lr}
 8003106:	4d07      	ldr	r5, [pc, #28]	@ (8003124 <_read_r+0x20>)
 8003108:	4604      	mov	r4, r0
 800310a:	4608      	mov	r0, r1
 800310c:	4611      	mov	r1, r2
 800310e:	2200      	movs	r2, #0
 8003110:	602a      	str	r2, [r5, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	f7fd fdcc 	bl	8000cb0 <_read>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d102      	bne.n	8003122 <_read_r+0x1e>
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	b103      	cbz	r3, 8003122 <_read_r+0x1e>
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	20000268 	.word	0x20000268

08003128 <_write_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	4d07      	ldr	r5, [pc, #28]	@ (8003148 <_write_r+0x20>)
 800312c:	4604      	mov	r4, r0
 800312e:	4608      	mov	r0, r1
 8003130:	4611      	mov	r1, r2
 8003132:	2200      	movs	r2, #0
 8003134:	602a      	str	r2, [r5, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	f7fd fdd7 	bl	8000cea <_write>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d102      	bne.n	8003146 <_write_r+0x1e>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	b103      	cbz	r3, 8003146 <_write_r+0x1e>
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	bd38      	pop	{r3, r4, r5, pc}
 8003148:	20000268 	.word	0x20000268

0800314c <__errno>:
 800314c:	4b01      	ldr	r3, [pc, #4]	@ (8003154 <__errno+0x8>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000020 	.word	0x20000020

08003158 <__libc_init_array>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	4d0d      	ldr	r5, [pc, #52]	@ (8003190 <__libc_init_array+0x38>)
 800315c:	4c0d      	ldr	r4, [pc, #52]	@ (8003194 <__libc_init_array+0x3c>)
 800315e:	1b64      	subs	r4, r4, r5
 8003160:	10a4      	asrs	r4, r4, #2
 8003162:	2600      	movs	r6, #0
 8003164:	42a6      	cmp	r6, r4
 8003166:	d109      	bne.n	800317c <__libc_init_array+0x24>
 8003168:	4d0b      	ldr	r5, [pc, #44]	@ (8003198 <__libc_init_array+0x40>)
 800316a:	4c0c      	ldr	r4, [pc, #48]	@ (800319c <__libc_init_array+0x44>)
 800316c:	f000 fb24 	bl	80037b8 <_init>
 8003170:	1b64      	subs	r4, r4, r5
 8003172:	10a4      	asrs	r4, r4, #2
 8003174:	2600      	movs	r6, #0
 8003176:	42a6      	cmp	r6, r4
 8003178:	d105      	bne.n	8003186 <__libc_init_array+0x2e>
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003180:	4798      	blx	r3
 8003182:	3601      	adds	r6, #1
 8003184:	e7ee      	b.n	8003164 <__libc_init_array+0xc>
 8003186:	f855 3b04 	ldr.w	r3, [r5], #4
 800318a:	4798      	blx	r3
 800318c:	3601      	adds	r6, #1
 800318e:	e7f2      	b.n	8003176 <__libc_init_array+0x1e>
 8003190:	080037f0 	.word	0x080037f0
 8003194:	080037f0 	.word	0x080037f0
 8003198:	080037f0 	.word	0x080037f0
 800319c:	080037f4 	.word	0x080037f4

080031a0 <__retarget_lock_init_recursive>:
 80031a0:	4770      	bx	lr

080031a2 <__retarget_lock_acquire_recursive>:
 80031a2:	4770      	bx	lr

080031a4 <__retarget_lock_release_recursive>:
 80031a4:	4770      	bx	lr
	...

080031a8 <_free_r>:
 80031a8:	b538      	push	{r3, r4, r5, lr}
 80031aa:	4605      	mov	r5, r0
 80031ac:	2900      	cmp	r1, #0
 80031ae:	d041      	beq.n	8003234 <_free_r+0x8c>
 80031b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031b4:	1f0c      	subs	r4, r1, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bfb8      	it	lt
 80031ba:	18e4      	addlt	r4, r4, r3
 80031bc:	f000 f8e8 	bl	8003390 <__malloc_lock>
 80031c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003238 <_free_r+0x90>)
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	b933      	cbnz	r3, 80031d4 <_free_r+0x2c>
 80031c6:	6063      	str	r3, [r4, #4]
 80031c8:	6014      	str	r4, [r2, #0]
 80031ca:	4628      	mov	r0, r5
 80031cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031d0:	f000 b8e4 	b.w	800339c <__malloc_unlock>
 80031d4:	42a3      	cmp	r3, r4
 80031d6:	d908      	bls.n	80031ea <_free_r+0x42>
 80031d8:	6820      	ldr	r0, [r4, #0]
 80031da:	1821      	adds	r1, r4, r0
 80031dc:	428b      	cmp	r3, r1
 80031de:	bf01      	itttt	eq
 80031e0:	6819      	ldreq	r1, [r3, #0]
 80031e2:	685b      	ldreq	r3, [r3, #4]
 80031e4:	1809      	addeq	r1, r1, r0
 80031e6:	6021      	streq	r1, [r4, #0]
 80031e8:	e7ed      	b.n	80031c6 <_free_r+0x1e>
 80031ea:	461a      	mov	r2, r3
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	b10b      	cbz	r3, 80031f4 <_free_r+0x4c>
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	d9fa      	bls.n	80031ea <_free_r+0x42>
 80031f4:	6811      	ldr	r1, [r2, #0]
 80031f6:	1850      	adds	r0, r2, r1
 80031f8:	42a0      	cmp	r0, r4
 80031fa:	d10b      	bne.n	8003214 <_free_r+0x6c>
 80031fc:	6820      	ldr	r0, [r4, #0]
 80031fe:	4401      	add	r1, r0
 8003200:	1850      	adds	r0, r2, r1
 8003202:	4283      	cmp	r3, r0
 8003204:	6011      	str	r1, [r2, #0]
 8003206:	d1e0      	bne.n	80031ca <_free_r+0x22>
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	6053      	str	r3, [r2, #4]
 800320e:	4408      	add	r0, r1
 8003210:	6010      	str	r0, [r2, #0]
 8003212:	e7da      	b.n	80031ca <_free_r+0x22>
 8003214:	d902      	bls.n	800321c <_free_r+0x74>
 8003216:	230c      	movs	r3, #12
 8003218:	602b      	str	r3, [r5, #0]
 800321a:	e7d6      	b.n	80031ca <_free_r+0x22>
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	1821      	adds	r1, r4, r0
 8003220:	428b      	cmp	r3, r1
 8003222:	bf04      	itt	eq
 8003224:	6819      	ldreq	r1, [r3, #0]
 8003226:	685b      	ldreq	r3, [r3, #4]
 8003228:	6063      	str	r3, [r4, #4]
 800322a:	bf04      	itt	eq
 800322c:	1809      	addeq	r1, r1, r0
 800322e:	6021      	streq	r1, [r4, #0]
 8003230:	6054      	str	r4, [r2, #4]
 8003232:	e7ca      	b.n	80031ca <_free_r+0x22>
 8003234:	bd38      	pop	{r3, r4, r5, pc}
 8003236:	bf00      	nop
 8003238:	20000274 	.word	0x20000274

0800323c <malloc>:
 800323c:	4b02      	ldr	r3, [pc, #8]	@ (8003248 <malloc+0xc>)
 800323e:	4601      	mov	r1, r0
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f000 b825 	b.w	8003290 <_malloc_r>
 8003246:	bf00      	nop
 8003248:	20000020 	.word	0x20000020

0800324c <sbrk_aligned>:
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	4e0f      	ldr	r6, [pc, #60]	@ (800328c <sbrk_aligned+0x40>)
 8003250:	460c      	mov	r4, r1
 8003252:	6831      	ldr	r1, [r6, #0]
 8003254:	4605      	mov	r5, r0
 8003256:	b911      	cbnz	r1, 800325e <sbrk_aligned+0x12>
 8003258:	f000 fa9e 	bl	8003798 <_sbrk_r>
 800325c:	6030      	str	r0, [r6, #0]
 800325e:	4621      	mov	r1, r4
 8003260:	4628      	mov	r0, r5
 8003262:	f000 fa99 	bl	8003798 <_sbrk_r>
 8003266:	1c43      	adds	r3, r0, #1
 8003268:	d103      	bne.n	8003272 <sbrk_aligned+0x26>
 800326a:	f04f 34ff 	mov.w	r4, #4294967295
 800326e:	4620      	mov	r0, r4
 8003270:	bd70      	pop	{r4, r5, r6, pc}
 8003272:	1cc4      	adds	r4, r0, #3
 8003274:	f024 0403 	bic.w	r4, r4, #3
 8003278:	42a0      	cmp	r0, r4
 800327a:	d0f8      	beq.n	800326e <sbrk_aligned+0x22>
 800327c:	1a21      	subs	r1, r4, r0
 800327e:	4628      	mov	r0, r5
 8003280:	f000 fa8a 	bl	8003798 <_sbrk_r>
 8003284:	3001      	adds	r0, #1
 8003286:	d1f2      	bne.n	800326e <sbrk_aligned+0x22>
 8003288:	e7ef      	b.n	800326a <sbrk_aligned+0x1e>
 800328a:	bf00      	nop
 800328c:	20000270 	.word	0x20000270

08003290 <_malloc_r>:
 8003290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003294:	1ccd      	adds	r5, r1, #3
 8003296:	f025 0503 	bic.w	r5, r5, #3
 800329a:	3508      	adds	r5, #8
 800329c:	2d0c      	cmp	r5, #12
 800329e:	bf38      	it	cc
 80032a0:	250c      	movcc	r5, #12
 80032a2:	2d00      	cmp	r5, #0
 80032a4:	4606      	mov	r6, r0
 80032a6:	db01      	blt.n	80032ac <_malloc_r+0x1c>
 80032a8:	42a9      	cmp	r1, r5
 80032aa:	d904      	bls.n	80032b6 <_malloc_r+0x26>
 80032ac:	230c      	movs	r3, #12
 80032ae:	6033      	str	r3, [r6, #0]
 80032b0:	2000      	movs	r0, #0
 80032b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800338c <_malloc_r+0xfc>
 80032ba:	f000 f869 	bl	8003390 <__malloc_lock>
 80032be:	f8d8 3000 	ldr.w	r3, [r8]
 80032c2:	461c      	mov	r4, r3
 80032c4:	bb44      	cbnz	r4, 8003318 <_malloc_r+0x88>
 80032c6:	4629      	mov	r1, r5
 80032c8:	4630      	mov	r0, r6
 80032ca:	f7ff ffbf 	bl	800324c <sbrk_aligned>
 80032ce:	1c43      	adds	r3, r0, #1
 80032d0:	4604      	mov	r4, r0
 80032d2:	d158      	bne.n	8003386 <_malloc_r+0xf6>
 80032d4:	f8d8 4000 	ldr.w	r4, [r8]
 80032d8:	4627      	mov	r7, r4
 80032da:	2f00      	cmp	r7, #0
 80032dc:	d143      	bne.n	8003366 <_malloc_r+0xd6>
 80032de:	2c00      	cmp	r4, #0
 80032e0:	d04b      	beq.n	800337a <_malloc_r+0xea>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	4639      	mov	r1, r7
 80032e6:	4630      	mov	r0, r6
 80032e8:	eb04 0903 	add.w	r9, r4, r3
 80032ec:	f000 fa54 	bl	8003798 <_sbrk_r>
 80032f0:	4581      	cmp	r9, r0
 80032f2:	d142      	bne.n	800337a <_malloc_r+0xea>
 80032f4:	6821      	ldr	r1, [r4, #0]
 80032f6:	1a6d      	subs	r5, r5, r1
 80032f8:	4629      	mov	r1, r5
 80032fa:	4630      	mov	r0, r6
 80032fc:	f7ff ffa6 	bl	800324c <sbrk_aligned>
 8003300:	3001      	adds	r0, #1
 8003302:	d03a      	beq.n	800337a <_malloc_r+0xea>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	442b      	add	r3, r5
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	f8d8 3000 	ldr.w	r3, [r8]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	bb62      	cbnz	r2, 800336c <_malloc_r+0xdc>
 8003312:	f8c8 7000 	str.w	r7, [r8]
 8003316:	e00f      	b.n	8003338 <_malloc_r+0xa8>
 8003318:	6822      	ldr	r2, [r4, #0]
 800331a:	1b52      	subs	r2, r2, r5
 800331c:	d420      	bmi.n	8003360 <_malloc_r+0xd0>
 800331e:	2a0b      	cmp	r2, #11
 8003320:	d917      	bls.n	8003352 <_malloc_r+0xc2>
 8003322:	1961      	adds	r1, r4, r5
 8003324:	42a3      	cmp	r3, r4
 8003326:	6025      	str	r5, [r4, #0]
 8003328:	bf18      	it	ne
 800332a:	6059      	strne	r1, [r3, #4]
 800332c:	6863      	ldr	r3, [r4, #4]
 800332e:	bf08      	it	eq
 8003330:	f8c8 1000 	streq.w	r1, [r8]
 8003334:	5162      	str	r2, [r4, r5]
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	4630      	mov	r0, r6
 800333a:	f000 f82f 	bl	800339c <__malloc_unlock>
 800333e:	f104 000b 	add.w	r0, r4, #11
 8003342:	1d23      	adds	r3, r4, #4
 8003344:	f020 0007 	bic.w	r0, r0, #7
 8003348:	1ac2      	subs	r2, r0, r3
 800334a:	bf1c      	itt	ne
 800334c:	1a1b      	subne	r3, r3, r0
 800334e:	50a3      	strne	r3, [r4, r2]
 8003350:	e7af      	b.n	80032b2 <_malloc_r+0x22>
 8003352:	6862      	ldr	r2, [r4, #4]
 8003354:	42a3      	cmp	r3, r4
 8003356:	bf0c      	ite	eq
 8003358:	f8c8 2000 	streq.w	r2, [r8]
 800335c:	605a      	strne	r2, [r3, #4]
 800335e:	e7eb      	b.n	8003338 <_malloc_r+0xa8>
 8003360:	4623      	mov	r3, r4
 8003362:	6864      	ldr	r4, [r4, #4]
 8003364:	e7ae      	b.n	80032c4 <_malloc_r+0x34>
 8003366:	463c      	mov	r4, r7
 8003368:	687f      	ldr	r7, [r7, #4]
 800336a:	e7b6      	b.n	80032da <_malloc_r+0x4a>
 800336c:	461a      	mov	r2, r3
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	42a3      	cmp	r3, r4
 8003372:	d1fb      	bne.n	800336c <_malloc_r+0xdc>
 8003374:	2300      	movs	r3, #0
 8003376:	6053      	str	r3, [r2, #4]
 8003378:	e7de      	b.n	8003338 <_malloc_r+0xa8>
 800337a:	230c      	movs	r3, #12
 800337c:	6033      	str	r3, [r6, #0]
 800337e:	4630      	mov	r0, r6
 8003380:	f000 f80c 	bl	800339c <__malloc_unlock>
 8003384:	e794      	b.n	80032b0 <_malloc_r+0x20>
 8003386:	6005      	str	r5, [r0, #0]
 8003388:	e7d6      	b.n	8003338 <_malloc_r+0xa8>
 800338a:	bf00      	nop
 800338c:	20000274 	.word	0x20000274

08003390 <__malloc_lock>:
 8003390:	4801      	ldr	r0, [pc, #4]	@ (8003398 <__malloc_lock+0x8>)
 8003392:	f7ff bf06 	b.w	80031a2 <__retarget_lock_acquire_recursive>
 8003396:	bf00      	nop
 8003398:	2000026c 	.word	0x2000026c

0800339c <__malloc_unlock>:
 800339c:	4801      	ldr	r0, [pc, #4]	@ (80033a4 <__malloc_unlock+0x8>)
 800339e:	f7ff bf01 	b.w	80031a4 <__retarget_lock_release_recursive>
 80033a2:	bf00      	nop
 80033a4:	2000026c 	.word	0x2000026c

080033a8 <__sflush_r>:
 80033a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b0:	0716      	lsls	r6, r2, #28
 80033b2:	4605      	mov	r5, r0
 80033b4:	460c      	mov	r4, r1
 80033b6:	d454      	bmi.n	8003462 <__sflush_r+0xba>
 80033b8:	684b      	ldr	r3, [r1, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	dc02      	bgt.n	80033c4 <__sflush_r+0x1c>
 80033be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	dd48      	ble.n	8003456 <__sflush_r+0xae>
 80033c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033c6:	2e00      	cmp	r6, #0
 80033c8:	d045      	beq.n	8003456 <__sflush_r+0xae>
 80033ca:	2300      	movs	r3, #0
 80033cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80033d0:	682f      	ldr	r7, [r5, #0]
 80033d2:	6a21      	ldr	r1, [r4, #32]
 80033d4:	602b      	str	r3, [r5, #0]
 80033d6:	d030      	beq.n	800343a <__sflush_r+0x92>
 80033d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	0759      	lsls	r1, r3, #29
 80033de:	d505      	bpl.n	80033ec <__sflush_r+0x44>
 80033e0:	6863      	ldr	r3, [r4, #4]
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80033e6:	b10b      	cbz	r3, 80033ec <__sflush_r+0x44>
 80033e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033ea:	1ad2      	subs	r2, r2, r3
 80033ec:	2300      	movs	r3, #0
 80033ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033f0:	6a21      	ldr	r1, [r4, #32]
 80033f2:	4628      	mov	r0, r5
 80033f4:	47b0      	blx	r6
 80033f6:	1c43      	adds	r3, r0, #1
 80033f8:	89a3      	ldrh	r3, [r4, #12]
 80033fa:	d106      	bne.n	800340a <__sflush_r+0x62>
 80033fc:	6829      	ldr	r1, [r5, #0]
 80033fe:	291d      	cmp	r1, #29
 8003400:	d82b      	bhi.n	800345a <__sflush_r+0xb2>
 8003402:	4a2a      	ldr	r2, [pc, #168]	@ (80034ac <__sflush_r+0x104>)
 8003404:	410a      	asrs	r2, r1
 8003406:	07d6      	lsls	r6, r2, #31
 8003408:	d427      	bmi.n	800345a <__sflush_r+0xb2>
 800340a:	2200      	movs	r2, #0
 800340c:	6062      	str	r2, [r4, #4]
 800340e:	04d9      	lsls	r1, r3, #19
 8003410:	6922      	ldr	r2, [r4, #16]
 8003412:	6022      	str	r2, [r4, #0]
 8003414:	d504      	bpl.n	8003420 <__sflush_r+0x78>
 8003416:	1c42      	adds	r2, r0, #1
 8003418:	d101      	bne.n	800341e <__sflush_r+0x76>
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	b903      	cbnz	r3, 8003420 <__sflush_r+0x78>
 800341e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003422:	602f      	str	r7, [r5, #0]
 8003424:	b1b9      	cbz	r1, 8003456 <__sflush_r+0xae>
 8003426:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800342a:	4299      	cmp	r1, r3
 800342c:	d002      	beq.n	8003434 <__sflush_r+0x8c>
 800342e:	4628      	mov	r0, r5
 8003430:	f7ff feba 	bl	80031a8 <_free_r>
 8003434:	2300      	movs	r3, #0
 8003436:	6363      	str	r3, [r4, #52]	@ 0x34
 8003438:	e00d      	b.n	8003456 <__sflush_r+0xae>
 800343a:	2301      	movs	r3, #1
 800343c:	4628      	mov	r0, r5
 800343e:	47b0      	blx	r6
 8003440:	4602      	mov	r2, r0
 8003442:	1c50      	adds	r0, r2, #1
 8003444:	d1c9      	bne.n	80033da <__sflush_r+0x32>
 8003446:	682b      	ldr	r3, [r5, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0c6      	beq.n	80033da <__sflush_r+0x32>
 800344c:	2b1d      	cmp	r3, #29
 800344e:	d001      	beq.n	8003454 <__sflush_r+0xac>
 8003450:	2b16      	cmp	r3, #22
 8003452:	d11e      	bne.n	8003492 <__sflush_r+0xea>
 8003454:	602f      	str	r7, [r5, #0]
 8003456:	2000      	movs	r0, #0
 8003458:	e022      	b.n	80034a0 <__sflush_r+0xf8>
 800345a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800345e:	b21b      	sxth	r3, r3
 8003460:	e01b      	b.n	800349a <__sflush_r+0xf2>
 8003462:	690f      	ldr	r7, [r1, #16]
 8003464:	2f00      	cmp	r7, #0
 8003466:	d0f6      	beq.n	8003456 <__sflush_r+0xae>
 8003468:	0793      	lsls	r3, r2, #30
 800346a:	680e      	ldr	r6, [r1, #0]
 800346c:	bf08      	it	eq
 800346e:	694b      	ldreq	r3, [r1, #20]
 8003470:	600f      	str	r7, [r1, #0]
 8003472:	bf18      	it	ne
 8003474:	2300      	movne	r3, #0
 8003476:	eba6 0807 	sub.w	r8, r6, r7
 800347a:	608b      	str	r3, [r1, #8]
 800347c:	f1b8 0f00 	cmp.w	r8, #0
 8003480:	dde9      	ble.n	8003456 <__sflush_r+0xae>
 8003482:	6a21      	ldr	r1, [r4, #32]
 8003484:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003486:	4643      	mov	r3, r8
 8003488:	463a      	mov	r2, r7
 800348a:	4628      	mov	r0, r5
 800348c:	47b0      	blx	r6
 800348e:	2800      	cmp	r0, #0
 8003490:	dc08      	bgt.n	80034a4 <__sflush_r+0xfc>
 8003492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800349a:	81a3      	strh	r3, [r4, #12]
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034a4:	4407      	add	r7, r0
 80034a6:	eba8 0800 	sub.w	r8, r8, r0
 80034aa:	e7e7      	b.n	800347c <__sflush_r+0xd4>
 80034ac:	dfbffffe 	.word	0xdfbffffe

080034b0 <_fflush_r>:
 80034b0:	b538      	push	{r3, r4, r5, lr}
 80034b2:	690b      	ldr	r3, [r1, #16]
 80034b4:	4605      	mov	r5, r0
 80034b6:	460c      	mov	r4, r1
 80034b8:	b913      	cbnz	r3, 80034c0 <_fflush_r+0x10>
 80034ba:	2500      	movs	r5, #0
 80034bc:	4628      	mov	r0, r5
 80034be:	bd38      	pop	{r3, r4, r5, pc}
 80034c0:	b118      	cbz	r0, 80034ca <_fflush_r+0x1a>
 80034c2:	6a03      	ldr	r3, [r0, #32]
 80034c4:	b90b      	cbnz	r3, 80034ca <_fflush_r+0x1a>
 80034c6:	f7ff fcbd 	bl	8002e44 <__sinit>
 80034ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f3      	beq.n	80034ba <_fflush_r+0xa>
 80034d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80034d4:	07d0      	lsls	r0, r2, #31
 80034d6:	d404      	bmi.n	80034e2 <_fflush_r+0x32>
 80034d8:	0599      	lsls	r1, r3, #22
 80034da:	d402      	bmi.n	80034e2 <_fflush_r+0x32>
 80034dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034de:	f7ff fe60 	bl	80031a2 <__retarget_lock_acquire_recursive>
 80034e2:	4628      	mov	r0, r5
 80034e4:	4621      	mov	r1, r4
 80034e6:	f7ff ff5f 	bl	80033a8 <__sflush_r>
 80034ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034ec:	07da      	lsls	r2, r3, #31
 80034ee:	4605      	mov	r5, r0
 80034f0:	d4e4      	bmi.n	80034bc <_fflush_r+0xc>
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	059b      	lsls	r3, r3, #22
 80034f6:	d4e1      	bmi.n	80034bc <_fflush_r+0xc>
 80034f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034fa:	f7ff fe53 	bl	80031a4 <__retarget_lock_release_recursive>
 80034fe:	e7dd      	b.n	80034bc <_fflush_r+0xc>

08003500 <__swhatbuf_r>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	460c      	mov	r4, r1
 8003504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003508:	2900      	cmp	r1, #0
 800350a:	b096      	sub	sp, #88	@ 0x58
 800350c:	4615      	mov	r5, r2
 800350e:	461e      	mov	r6, r3
 8003510:	da0d      	bge.n	800352e <__swhatbuf_r+0x2e>
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	bf14      	ite	ne
 800351e:	2340      	movne	r3, #64	@ 0x40
 8003520:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003524:	2000      	movs	r0, #0
 8003526:	6031      	str	r1, [r6, #0]
 8003528:	602b      	str	r3, [r5, #0]
 800352a:	b016      	add	sp, #88	@ 0x58
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	466a      	mov	r2, sp
 8003530:	f000 f910 	bl	8003754 <_fstat_r>
 8003534:	2800      	cmp	r0, #0
 8003536:	dbec      	blt.n	8003512 <__swhatbuf_r+0x12>
 8003538:	9901      	ldr	r1, [sp, #4]
 800353a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800353e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003542:	4259      	negs	r1, r3
 8003544:	4159      	adcs	r1, r3
 8003546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800354a:	e7eb      	b.n	8003524 <__swhatbuf_r+0x24>

0800354c <__smakebuf_r>:
 800354c:	898b      	ldrh	r3, [r1, #12]
 800354e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003550:	079d      	lsls	r5, r3, #30
 8003552:	4606      	mov	r6, r0
 8003554:	460c      	mov	r4, r1
 8003556:	d507      	bpl.n	8003568 <__smakebuf_r+0x1c>
 8003558:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	6123      	str	r3, [r4, #16]
 8003560:	2301      	movs	r3, #1
 8003562:	6163      	str	r3, [r4, #20]
 8003564:	b003      	add	sp, #12
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003568:	ab01      	add	r3, sp, #4
 800356a:	466a      	mov	r2, sp
 800356c:	f7ff ffc8 	bl	8003500 <__swhatbuf_r>
 8003570:	9f00      	ldr	r7, [sp, #0]
 8003572:	4605      	mov	r5, r0
 8003574:	4639      	mov	r1, r7
 8003576:	4630      	mov	r0, r6
 8003578:	f7ff fe8a 	bl	8003290 <_malloc_r>
 800357c:	b948      	cbnz	r0, 8003592 <__smakebuf_r+0x46>
 800357e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003582:	059a      	lsls	r2, r3, #22
 8003584:	d4ee      	bmi.n	8003564 <__smakebuf_r+0x18>
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	e7e2      	b.n	8003558 <__smakebuf_r+0xc>
 8003592:	89a3      	ldrh	r3, [r4, #12]
 8003594:	6020      	str	r0, [r4, #0]
 8003596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800359a:	81a3      	strh	r3, [r4, #12]
 800359c:	9b01      	ldr	r3, [sp, #4]
 800359e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80035a2:	b15b      	cbz	r3, 80035bc <__smakebuf_r+0x70>
 80035a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035a8:	4630      	mov	r0, r6
 80035aa:	f000 f8e5 	bl	8003778 <_isatty_r>
 80035ae:	b128      	cbz	r0, 80035bc <__smakebuf_r+0x70>
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	81a3      	strh	r3, [r4, #12]
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	431d      	orrs	r5, r3
 80035c0:	81a5      	strh	r5, [r4, #12]
 80035c2:	e7cf      	b.n	8003564 <__smakebuf_r+0x18>

080035c4 <_putc_r>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	460d      	mov	r5, r1
 80035c8:	4614      	mov	r4, r2
 80035ca:	4606      	mov	r6, r0
 80035cc:	b118      	cbz	r0, 80035d6 <_putc_r+0x12>
 80035ce:	6a03      	ldr	r3, [r0, #32]
 80035d0:	b90b      	cbnz	r3, 80035d6 <_putc_r+0x12>
 80035d2:	f7ff fc37 	bl	8002e44 <__sinit>
 80035d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035d8:	07d8      	lsls	r0, r3, #31
 80035da:	d405      	bmi.n	80035e8 <_putc_r+0x24>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	0599      	lsls	r1, r3, #22
 80035e0:	d402      	bmi.n	80035e8 <_putc_r+0x24>
 80035e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035e4:	f7ff fddd 	bl	80031a2 <__retarget_lock_acquire_recursive>
 80035e8:	68a3      	ldr	r3, [r4, #8]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	60a3      	str	r3, [r4, #8]
 80035f0:	da05      	bge.n	80035fe <_putc_r+0x3a>
 80035f2:	69a2      	ldr	r2, [r4, #24]
 80035f4:	4293      	cmp	r3, r2
 80035f6:	db12      	blt.n	800361e <_putc_r+0x5a>
 80035f8:	b2eb      	uxtb	r3, r5
 80035fa:	2b0a      	cmp	r3, #10
 80035fc:	d00f      	beq.n	800361e <_putc_r+0x5a>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	6022      	str	r2, [r4, #0]
 8003604:	701d      	strb	r5, [r3, #0]
 8003606:	b2ed      	uxtb	r5, r5
 8003608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800360a:	07da      	lsls	r2, r3, #31
 800360c:	d405      	bmi.n	800361a <_putc_r+0x56>
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	059b      	lsls	r3, r3, #22
 8003612:	d402      	bmi.n	800361a <_putc_r+0x56>
 8003614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003616:	f7ff fdc5 	bl	80031a4 <__retarget_lock_release_recursive>
 800361a:	4628      	mov	r0, r5
 800361c:	bd70      	pop	{r4, r5, r6, pc}
 800361e:	4629      	mov	r1, r5
 8003620:	4622      	mov	r2, r4
 8003622:	4630      	mov	r0, r6
 8003624:	f000 f802 	bl	800362c <__swbuf_r>
 8003628:	4605      	mov	r5, r0
 800362a:	e7ed      	b.n	8003608 <_putc_r+0x44>

0800362c <__swbuf_r>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	460e      	mov	r6, r1
 8003630:	4614      	mov	r4, r2
 8003632:	4605      	mov	r5, r0
 8003634:	b118      	cbz	r0, 800363e <__swbuf_r+0x12>
 8003636:	6a03      	ldr	r3, [r0, #32]
 8003638:	b90b      	cbnz	r3, 800363e <__swbuf_r+0x12>
 800363a:	f7ff fc03 	bl	8002e44 <__sinit>
 800363e:	69a3      	ldr	r3, [r4, #24]
 8003640:	60a3      	str	r3, [r4, #8]
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	071a      	lsls	r2, r3, #28
 8003646:	d501      	bpl.n	800364c <__swbuf_r+0x20>
 8003648:	6923      	ldr	r3, [r4, #16]
 800364a:	b943      	cbnz	r3, 800365e <__swbuf_r+0x32>
 800364c:	4621      	mov	r1, r4
 800364e:	4628      	mov	r0, r5
 8003650:	f000 f82a 	bl	80036a8 <__swsetup_r>
 8003654:	b118      	cbz	r0, 800365e <__swbuf_r+0x32>
 8003656:	f04f 37ff 	mov.w	r7, #4294967295
 800365a:	4638      	mov	r0, r7
 800365c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	6922      	ldr	r2, [r4, #16]
 8003662:	1a98      	subs	r0, r3, r2
 8003664:	6963      	ldr	r3, [r4, #20]
 8003666:	b2f6      	uxtb	r6, r6
 8003668:	4283      	cmp	r3, r0
 800366a:	4637      	mov	r7, r6
 800366c:	dc05      	bgt.n	800367a <__swbuf_r+0x4e>
 800366e:	4621      	mov	r1, r4
 8003670:	4628      	mov	r0, r5
 8003672:	f7ff ff1d 	bl	80034b0 <_fflush_r>
 8003676:	2800      	cmp	r0, #0
 8003678:	d1ed      	bne.n	8003656 <__swbuf_r+0x2a>
 800367a:	68a3      	ldr	r3, [r4, #8]
 800367c:	3b01      	subs	r3, #1
 800367e:	60a3      	str	r3, [r4, #8]
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	6022      	str	r2, [r4, #0]
 8003686:	701e      	strb	r6, [r3, #0]
 8003688:	6962      	ldr	r2, [r4, #20]
 800368a:	1c43      	adds	r3, r0, #1
 800368c:	429a      	cmp	r2, r3
 800368e:	d004      	beq.n	800369a <__swbuf_r+0x6e>
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	07db      	lsls	r3, r3, #31
 8003694:	d5e1      	bpl.n	800365a <__swbuf_r+0x2e>
 8003696:	2e0a      	cmp	r6, #10
 8003698:	d1df      	bne.n	800365a <__swbuf_r+0x2e>
 800369a:	4621      	mov	r1, r4
 800369c:	4628      	mov	r0, r5
 800369e:	f7ff ff07 	bl	80034b0 <_fflush_r>
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d0d9      	beq.n	800365a <__swbuf_r+0x2e>
 80036a6:	e7d6      	b.n	8003656 <__swbuf_r+0x2a>

080036a8 <__swsetup_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4b29      	ldr	r3, [pc, #164]	@ (8003750 <__swsetup_r+0xa8>)
 80036ac:	4605      	mov	r5, r0
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	460c      	mov	r4, r1
 80036b2:	b118      	cbz	r0, 80036bc <__swsetup_r+0x14>
 80036b4:	6a03      	ldr	r3, [r0, #32]
 80036b6:	b90b      	cbnz	r3, 80036bc <__swsetup_r+0x14>
 80036b8:	f7ff fbc4 	bl	8002e44 <__sinit>
 80036bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c0:	0719      	lsls	r1, r3, #28
 80036c2:	d422      	bmi.n	800370a <__swsetup_r+0x62>
 80036c4:	06da      	lsls	r2, r3, #27
 80036c6:	d407      	bmi.n	80036d8 <__swsetup_r+0x30>
 80036c8:	2209      	movs	r2, #9
 80036ca:	602a      	str	r2, [r5, #0]
 80036cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036d0:	81a3      	strh	r3, [r4, #12]
 80036d2:	f04f 30ff 	mov.w	r0, #4294967295
 80036d6:	e033      	b.n	8003740 <__swsetup_r+0x98>
 80036d8:	0758      	lsls	r0, r3, #29
 80036da:	d512      	bpl.n	8003702 <__swsetup_r+0x5a>
 80036dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036de:	b141      	cbz	r1, 80036f2 <__swsetup_r+0x4a>
 80036e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036e4:	4299      	cmp	r1, r3
 80036e6:	d002      	beq.n	80036ee <__swsetup_r+0x46>
 80036e8:	4628      	mov	r0, r5
 80036ea:	f7ff fd5d 	bl	80031a8 <_free_r>
 80036ee:	2300      	movs	r3, #0
 80036f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036f8:	81a3      	strh	r3, [r4, #12]
 80036fa:	2300      	movs	r3, #0
 80036fc:	6063      	str	r3, [r4, #4]
 80036fe:	6923      	ldr	r3, [r4, #16]
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	f043 0308 	orr.w	r3, r3, #8
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	b94b      	cbnz	r3, 8003722 <__swsetup_r+0x7a>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003718:	d003      	beq.n	8003722 <__swsetup_r+0x7a>
 800371a:	4621      	mov	r1, r4
 800371c:	4628      	mov	r0, r5
 800371e:	f7ff ff15 	bl	800354c <__smakebuf_r>
 8003722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003726:	f013 0201 	ands.w	r2, r3, #1
 800372a:	d00a      	beq.n	8003742 <__swsetup_r+0x9a>
 800372c:	2200      	movs	r2, #0
 800372e:	60a2      	str	r2, [r4, #8]
 8003730:	6962      	ldr	r2, [r4, #20]
 8003732:	4252      	negs	r2, r2
 8003734:	61a2      	str	r2, [r4, #24]
 8003736:	6922      	ldr	r2, [r4, #16]
 8003738:	b942      	cbnz	r2, 800374c <__swsetup_r+0xa4>
 800373a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800373e:	d1c5      	bne.n	80036cc <__swsetup_r+0x24>
 8003740:	bd38      	pop	{r3, r4, r5, pc}
 8003742:	0799      	lsls	r1, r3, #30
 8003744:	bf58      	it	pl
 8003746:	6962      	ldrpl	r2, [r4, #20]
 8003748:	60a2      	str	r2, [r4, #8]
 800374a:	e7f4      	b.n	8003736 <__swsetup_r+0x8e>
 800374c:	2000      	movs	r0, #0
 800374e:	e7f7      	b.n	8003740 <__swsetup_r+0x98>
 8003750:	20000020 	.word	0x20000020

08003754 <_fstat_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4d07      	ldr	r5, [pc, #28]	@ (8003774 <_fstat_r+0x20>)
 8003758:	2300      	movs	r3, #0
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	602b      	str	r3, [r5, #0]
 8003762:	f7fd faea 	bl	8000d3a <_fstat>
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	d102      	bne.n	8003770 <_fstat_r+0x1c>
 800376a:	682b      	ldr	r3, [r5, #0]
 800376c:	b103      	cbz	r3, 8003770 <_fstat_r+0x1c>
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	bd38      	pop	{r3, r4, r5, pc}
 8003772:	bf00      	nop
 8003774:	20000268 	.word	0x20000268

08003778 <_isatty_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4d06      	ldr	r5, [pc, #24]	@ (8003794 <_isatty_r+0x1c>)
 800377c:	2300      	movs	r3, #0
 800377e:	4604      	mov	r4, r0
 8003780:	4608      	mov	r0, r1
 8003782:	602b      	str	r3, [r5, #0]
 8003784:	f7fd fae9 	bl	8000d5a <_isatty>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d102      	bne.n	8003792 <_isatty_r+0x1a>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	b103      	cbz	r3, 8003792 <_isatty_r+0x1a>
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	20000268 	.word	0x20000268

08003798 <_sbrk_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4d06      	ldr	r5, [pc, #24]	@ (80037b4 <_sbrk_r+0x1c>)
 800379c:	2300      	movs	r3, #0
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f7fd faf2 	bl	8000d8c <_sbrk>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d102      	bne.n	80037b2 <_sbrk_r+0x1a>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b103      	cbz	r3, 80037b2 <_sbrk_r+0x1a>
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	20000268 	.word	0x20000268

080037b8 <_init>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	bf00      	nop
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr

080037c4 <_fini>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	bf00      	nop
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr
