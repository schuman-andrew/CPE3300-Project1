
Project 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f3c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080040d4  080040d4  000050d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f0  080040f0  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  080040f0  080040f0  000050f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040f8  080040f8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f8  080040f8  000050f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040fc  080040fc  000050fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004100  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000070  08004170  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004170  00006274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb6f  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ff  00000000  00000000  00014c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00017110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a80  00000000  00000000  00017ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e79  00000000  00000000  00018928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fa4  00000000  00000000  000307a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009050a  00000000  00000000  00041745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1c4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea0  00000000  00000000  000d1c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000d5b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080040bc 	.word	0x080040bc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080040bc 	.word	0x080040bc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <resetBuffer>:
uint8_t one = 0x0f;

/* resetBuffer
 *
 */
void resetBuffer(char * buffer){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	for(int x=0; x<256; x++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e007      	b.n	80004e6 <resetBuffer+0x1e>
		buffer[x] = 0;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4413      	add	r3, r2
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
	for(int x=0; x<256; x++){
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2bff      	cmp	r3, #255	@ 0xff
 80004ea:	ddf4      	ble.n	80004d6 <resetBuffer+0xe>
	}
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <sendData>:
/*
 *  sends each byte as 2 bits
 *  baud rate = 8000 -> each half byte sends in 500us to act like one bit
 *
 */
void sendData(char * data, int length){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
	dataLength = (uint8_t) length;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b63      	ldr	r3, [pc, #396]	@ (8000698 <sendData+0x19c>)
 800050c:	701a      	strb	r2, [r3, #0]

	//HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState); w/ hal delay
	//other option

	//send preamble
	for(int x = 0; x < byteLenght; x++){
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	e030      	b.n	8000576 <sendData+0x7a>
		if(((preamble<<x) & 0x80) == 0x80){
 8000514:	4b61      	ldr	r3, [pc, #388]	@ (800069c <sendData+0x1a0>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000524:	2b00      	cmp	r3, #0
 8000526:	d006      	beq.n	8000536 <sendData+0x3a>
			//printf("1");
			//HAL_UART_Transmit(&huart2, (uint8_t *)&one, 1, HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800052e:	485c      	ldr	r0, [pc, #368]	@ (80006a0 <sendData+0x1a4>)
 8000530:	f001 f820 	bl	8001574 <HAL_GPIO_WritePin>
 8000534:	e00f      	b.n	8000556 <sendData+0x5a>
		} else if(((preamble<<x) & 0x80) == 0x00){
 8000536:	4b59      	ldr	r3, [pc, #356]	@ (800069c <sendData+0x1a0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	461a      	mov	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000546:	2b00      	cmp	r3, #0
 8000548:	d105      	bne.n	8000556 <sendData+0x5a>
			//printf("0");
			//HAL_UART_Transmit(&huart2, (uint8_t *)&zero, 1, HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000550:	4853      	ldr	r0, [pc, #332]	@ (80006a0 <sendData+0x1a4>)
 8000552:	f001 f80f 	bl	8001574 <HAL_GPIO_WritePin>
		}
		delay_us(2650);
 8000556:	f640 205a 	movw	r0, #2650	@ 0xa5a
 800055a:	f000 f8a5 	bl	80006a8 <delay_us>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800055e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000562:	484f      	ldr	r0, [pc, #316]	@ (80006a0 <sendData+0x1a4>)
 8000564:	f001 f81f 	bl	80015a6 <HAL_GPIO_TogglePin>
		delay_us(2650);
 8000568:	f640 205a 	movw	r0, #2650	@ 0xa5a
 800056c:	f000 f89c 	bl	80006a8 <delay_us>
	for(int x = 0; x < byteLenght; x++){
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	3301      	adds	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	4b4b      	ldr	r3, [pc, #300]	@ (80006a4 <sendData+0x1a8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	697a      	ldr	r2, [r7, #20]
 800057c:	429a      	cmp	r2, r3
 800057e:	dbc9      	blt.n	8000514 <sendData+0x18>
	}

	//send length
	for(int x = 0; x < byteLenght; x++){
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	e030      	b.n	80005e8 <sendData+0xec>
		if(((dataLength<<x) & 0x80) == 0x80){
 8000586:	4b44      	ldr	r3, [pc, #272]	@ (8000698 <sendData+0x19c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <sendData+0xac>
			//HAL_UART_Transmit(&huart2, (uint8_t *)&one, 1, HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005a0:	483f      	ldr	r0, [pc, #252]	@ (80006a0 <sendData+0x1a4>)
 80005a2:	f000 ffe7 	bl	8001574 <HAL_GPIO_WritePin>
 80005a6:	e00f      	b.n	80005c8 <sendData+0xcc>
		} else if(((dataLength<<x) & 0x80) == 0x00){
 80005a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000698 <sendData+0x19c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d105      	bne.n	80005c8 <sendData+0xcc>
			//HAL_UART_Transmit(&huart2, (uint8_t *)&zero, 1, HAL_MAX_DELAY);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c2:	4837      	ldr	r0, [pc, #220]	@ (80006a0 <sendData+0x1a4>)
 80005c4:	f000 ffd6 	bl	8001574 <HAL_GPIO_WritePin>
		}
		delay_us(2650);
 80005c8:	f640 205a 	movw	r0, #2650	@ 0xa5a
 80005cc:	f000 f86c 	bl	80006a8 <delay_us>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80005d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d4:	4832      	ldr	r0, [pc, #200]	@ (80006a0 <sendData+0x1a4>)
 80005d6:	f000 ffe6 	bl	80015a6 <HAL_GPIO_TogglePin>
		delay_us(2650);
 80005da:	f640 205a 	movw	r0, #2650	@ 0xa5a
 80005de:	f000 f863 	bl	80006a8 <delay_us>
	for(int x = 0; x < byteLenght; x++){
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	3301      	adds	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <sendData+0x1a8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	693a      	ldr	r2, [r7, #16]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	dbc9      	blt.n	8000586 <sendData+0x8a>
	}

	//send data
	for(int x = 0; x < dataLength; x++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e03f      	b.n	8000678 <sendData+0x17c>
		for(int y = 0; y < byteLenght; y++){
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	e034      	b.n	8000668 <sendData+0x16c>
			if(((data[x]<<y) & 0x80) == 0x80){
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <sendData+0x128>
				//HAL_UART_Transmit(&huart2, (uint8_t *)&one, 1, HAL_MAX_DELAY);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800061c:	4820      	ldr	r0, [pc, #128]	@ (80006a0 <sendData+0x1a4>)
 800061e:	f000 ffa9 	bl	8001574 <HAL_GPIO_WritePin>
 8000622:	e011      	b.n	8000648 <sendData+0x14c>
			} else if(((data[x]<<y) & 0x80) == 0x00){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000638:	2b00      	cmp	r3, #0
 800063a:	d105      	bne.n	8000648 <sendData+0x14c>
				//HAL_UART_Transmit(&huart2, (uint8_t *)&zero, 1, HAL_MAX_DELAY);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000642:	4817      	ldr	r0, [pc, #92]	@ (80006a0 <sendData+0x1a4>)
 8000644:	f000 ff96 	bl	8001574 <HAL_GPIO_WritePin>
			}
			delay_us(2650);
 8000648:	f640 205a 	movw	r0, #2650	@ 0xa5a
 800064c:	f000 f82c 	bl	80006a8 <delay_us>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000650:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000654:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <sendData+0x1a4>)
 8000656:	f000 ffa6 	bl	80015a6 <HAL_GPIO_TogglePin>
			delay_us(2650);
 800065a:	f640 205a 	movw	r0, #2650	@ 0xa5a
 800065e:	f000 f823 	bl	80006a8 <delay_us>
		for(int y = 0; y < byteLenght; y++){
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3301      	adds	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <sendData+0x1a8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	429a      	cmp	r2, r3
 8000670:	dbc5      	blt.n	80005fe <sendData+0x102>
	for(int x = 0; x < dataLength; x++){
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <sendData+0x19c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4293      	cmp	r3, r2
 8000682:	dbb9      	blt.n	80005f8 <sendData+0xfc>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <sendData+0x1a4>)
 800068c:	f000 ff72 	bl	8001574 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000008c 	.word	0x2000008c
 800069c:	20000000 	.word	0x20000000
 80006a0:	40020000 	.word	0x40020000
 80006a4:	20000004 	.word	0x20000004

080006a8 <delay_us>:
 * @brief   This method uses the systick timer to wait
 * 			the specified amount of microseconds.
 * @param   delay - The amount of microseconds to wait
 */
void delay_us(int delay)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	// Set the load value to delay * cycles in 1us
	systick_base[LOAD] = (delay * CYCLE_PER_US) - 1;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <delay_us+0x4c>)
 80006b8:	3304      	adds	r3, #4
 80006ba:	601a      	str	r2, [r3, #0]
	// Set the timer value to 0
	systick_base[VAL] = 0;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <delay_us+0x4c>)
 80006be:	3308      	adds	r3, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
	// Enable the timer to start counting
	systick_base[CTRL] |= ENABLE;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <delay_us+0x4c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <delay_us+0x4c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

	// Waits until the count flag goes high
	// which means the timer has reached 0
	while(!(systick_base[CTRL] & COUNTFLAG))
 80006d0:	bf00      	nop
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <delay_us+0x4c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0f9      	beq.n	80006d2 <delay_us+0x2a>
	{
		// busy loop
	}
	// Disable the timer
	systick_base[CTRL] &= !ENABLE;
 80006de:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <delay_us+0x4c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <delay_us+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a37      	ldr	r2, [pc, #220]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b35      	ldr	r3, [pc, #212]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a30      	ldr	r2, [pc, #192]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b2e      	ldr	r3, [pc, #184]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a29      	ldr	r2, [pc, #164]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a22      	ldr	r2, [pc, #136]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <MX_GPIO_Init+0xfc>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	481d      	ldr	r0, [pc, #116]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000784:	f000 fef6 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800078e:	481a      	ldr	r0, [pc, #104]	@ (80007f8 <MX_GPIO_Init+0x100>)
 8000790:	f000 fef0 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4814      	ldr	r0, [pc, #80]	@ (80007fc <MX_GPIO_Init+0x104>)
 80007ac:	f000 fd5e 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b0:	2320      	movs	r3, #32
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_GPIO_Init+0x100>)
 80007c8:	f000 fd50 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_GPIO_Init+0x100>)
 80007e6:	f000 fd41 	bl	800126c <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	@ 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020800 	.word	0x40020800

08000800 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000808:	1d39      	adds	r1, r7, #4
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	2201      	movs	r2, #1
 8000810:	4803      	ldr	r0, [pc, #12]	@ (8000820 <__io_putchar+0x20>)
 8000812:	f001 fe71 	bl	80024f8 <HAL_UART_Transmit>
return ch;
 8000816:	687b      	ldr	r3, [r7, #4]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000dc 	.word	0x200000dc

08000824 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
uint8_t ch = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	71fb      	strb	r3, [r7, #7]
__HAL_UART_CLEAR_OREFLAG(&huart2);
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <__io_getchar+0x38>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <__io_getchar+0x38>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]
HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000844:	1df9      	adds	r1, r7, #7
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	2201      	movs	r2, #1
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <__io_getchar+0x38>)
 800084e:	f001 fede 	bl	800260e <HAL_UART_Receive>
return ch;
 8000852:	79fb      	ldrb	r3, [r7, #7]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000dc 	.word	0x200000dc

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0c4      	sub	sp, #272	@ 0x110
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 8000866:	4b3f      	ldr	r3, [pc, #252]	@ (8000964 <main+0x104>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	6858      	ldr	r0, [r3, #4]
 800086c:	2300      	movs	r3, #0
 800086e:	2202      	movs	r2, #2
 8000870:	2100      	movs	r1, #0
 8000872:	f002 ffa7 	bl	80037c4 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 fb43 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f879 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f7ff ff3b 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000882:	f000 fa99 	bl	8000db8 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char rxString[255];
  int x = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  {
	  uint8_t data;
	  HAL_StatusTypeDef rx;

	  //idle at 1
	  HAL_GPIO_WritePin(GPIOA, TX_PIN_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2104      	movs	r1, #4
 8000890:	4835      	ldr	r0, [pc, #212]	@ (8000968 <main+0x108>)
 8000892:	f000 fe6f 	bl	8001574 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800089c:	4832      	ldr	r0, [pc, #200]	@ (8000968 <main+0x108>)
 800089e:	f000 fe69 	bl	8001574 <HAL_GPIO_WritePin>
	  //HAL_Delay(100);
	 // HAL_UART_Receive_IT(huart, pData, Size)

	  /*if(HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_RX){
		 while(rx == HAL_BUSY){*/
	  rx = HAL_UART_Receive(&huart2, &data, 1, HAL_MAX_DELAY);
 80008a2:	1df9      	adds	r1, r7, #7
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	2201      	movs	r2, #1
 80008aa:	4830      	ldr	r0, [pc, #192]	@ (800096c <main+0x10c>)
 80008ac:	f001 feaf 	bl	800260e <HAL_UART_Receive>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

	  if(data == 13 || data == 10){
 80008b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008ba:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b0d      	cmp	r3, #13
 80008c2:	d006      	beq.n	80008d2 <main+0x72>
 80008c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008c8:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b0a      	cmp	r3, #10
 80008d0:	d12c      	bne.n	800092c <main+0xcc>
		  for(int y=0; y<x; y++){
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80008d8:	e00f      	b.n	80008fa <main+0x9a>
			  printf("%c", rxString[y]);
 80008da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008de:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80008e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 ff04 	bl	80036f8 <putchar>
		  for(int y=0; y<x; y++){
 80008f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80008f4:	3301      	adds	r3, #1
 80008f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80008fa:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80008fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000902:	429a      	cmp	r2, r3
 8000904:	dbe9      	blt.n	80008da <main+0x7a>
		  }
		  sendData(rxString, x);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fdf4 	bl	80004fc <sendData>
		  resetBuffer(rxString);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fdd5 	bl	80004c8 <resetBuffer>
		  printf("\n");
 800091e:	200a      	movs	r0, #10
 8000920:	f002 feea 	bl	80036f8 <putchar>
		  x=0;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800092a:	e012      	b.n	8000952 <main+0xf2>
	  } else {
		  rxString[x] = data;
 800092c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000930:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000934:	7819      	ldrb	r1, [r3, #0]
 8000936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800093a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800093e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000942:	4413      	add	r3, r2
 8000944:	460a      	mov	r2, r1
 8000946:	701a      	strb	r2, [r3, #0]
		  x++;
 8000948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800094c:	3301      	adds	r3, #1
 800094e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	  }
	  //printf("%c - %d\n", rxString[x], x);

	  if(x > 255){
 8000952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000956:	2bff      	cmp	r3, #255	@ 0xff
 8000958:	dd98      	ble.n	800088c <main+0x2c>
		  x=0;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  {
 8000960:	e794      	b.n	800088c <main+0x2c>
 8000962:	bf00      	nop
 8000964:	20000020 	.word	0x20000020
 8000968:	40020000 	.word	0x40020000
 800096c:	200000dc 	.word	0x200000dc

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	@ 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2230      	movs	r2, #48	@ 0x30
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f003 f8ac 	bl	8003adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <SystemClock_Config+0xcc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a27      	ldr	r2, [pc, #156]	@ (8000a3c <SystemClock_Config+0xcc>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a4:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <SystemClock_Config+0xcc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <SystemClock_Config+0xd0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a21      	ldr	r2, [pc, #132]	@ (8000a40 <SystemClock_Config+0xd0>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <SystemClock_Config+0xd0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2310      	movs	r3, #16
 80009d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e0:	2310      	movs	r3, #16
 80009e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fdf0 	bl	80015dc <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a02:	f000 f83f 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f852 	bl	8001acc <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a2e:	f000 f829 	bl	8000a84 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	@ 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	printf("hi\n");
 8000a4c:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <HAL_UART_RxCpltCallback+0x18>)
 8000a4e:	f002 feb1 	bl	80037b4 <puts>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	080040d4 	.word	0x080040d4

08000a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a72:	f000 fa67 	bl	8000f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010000 	.word	0x40010000

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f000 fb05 	bl	80010de <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	@ 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb0 <HAL_InitTick+0xd0>)
 8000af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af8:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb0 <HAL_InitTick+0xd0>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b00:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <HAL_InitTick+0xd0>)
 8000b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b0c:	f107 020c 	add.w	r2, r7, #12
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f9f8 	bl	8001f0c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b1c:	f001 f9e2 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8000b20:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b24:	4a23      	ldr	r2, [pc, #140]	@ (8000bb4 <HAL_InitTick+0xd4>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	0c9b      	lsrs	r3, r3, #18
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b30:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <HAL_InitTick+0xd8>)
 8000b32:	4a22      	ldr	r2, [pc, #136]	@ (8000bbc <HAL_InitTick+0xdc>)
 8000b34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <HAL_InitTick+0xd8>)
 8000b38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb8 <HAL_InitTick+0xd8>)
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_InitTick+0xd8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <HAL_InitTick+0xd8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_InitTick+0xd8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b56:	4818      	ldr	r0, [pc, #96]	@ (8000bb8 <HAL_InitTick+0xd8>)
 8000b58:	f001 fa0a 	bl	8001f70 <HAL_TIM_Base_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d11b      	bne.n	8000ba2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b6a:	4813      	ldr	r0, [pc, #76]	@ (8000bb8 <HAL_InitTick+0xd8>)
 8000b6c:	f001 fa5a 	bl	8002024 <HAL_TIM_Base_Start_IT>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d111      	bne.n	8000ba2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b7e:	2019      	movs	r0, #25
 8000b80:	f000 fad4 	bl	800112c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b0f      	cmp	r3, #15
 8000b88:	d808      	bhi.n	8000b9c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	2019      	movs	r0, #25
 8000b90:	f000 fab0 	bl	80010f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b94:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <HAL_InitTick+0xe0>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e002      	b.n	8000ba2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3730      	adds	r7, #48	@ 0x30
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	20000090 	.word	0x20000090
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	2000000c 	.word	0x2000000c

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c2a:	f001 fa5d 	bl	80020e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000090 	.word	0x20000090

08000c38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <USART2_IRQHandler+0x10>)
 8000c3e:	f001 fd7d 	bl	800273c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000dc 	.word	0x200000dc

08000c4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e00a      	b.n	8000c74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c5e:	f7ff fde1 	bl	8000824 <__io_getchar>
 8000c62:	4601      	mov	r1, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf0      	blt.n	8000c5e <_read+0x12>
  }

  return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e009      	b.n	8000cac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fdad 	bl	8000800 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf1      	blt.n	8000c98 <_write+0x12>
  }
  return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_close>:

int _close(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_isatty>:

int _isatty(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	@ (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 ff0e 	bl	8003b78 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	@ (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	200000d8 	.word	0x200000d8
 8000d90:	20000278 	.word	0x20000278

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <MX_USART2_UART_Init+0x50>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 8000;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f001 fb32 	bl	8002458 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfa:	f7ff fe43 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000dc 	.word	0x200000dc
 8000e08:	40004400 	.word	0x40004400

08000e0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea0 <HAL_UART_MspInit+0x94>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d133      	bne.n	8000e96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_PIN_Pin|GPIO_PIN_3;
 8000e66:	230c      	movs	r3, #12
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e76:	2307      	movs	r3, #7
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <HAL_UART_MspInit+0x9c>)
 8000e82:	f000 f9f3 	bl	800126c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2026      	movs	r0, #38	@ 0x26
 8000e8c:	f000 f932 	bl	80010f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e90:	2026      	movs	r0, #38	@ 0x26
 8000e92:	f000 f94b 	bl	800112c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	@ 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb0:	f7ff ff70 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	@ (8000eec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f002 fe53 	bl	8003b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff fcbf 	bl	8000860 <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ef0:	08004100 	.word	0x08004100
  ldr r2, =_sbss
 8000ef4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ef8:	20000274 	.word	0x20000274

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f8d8 	bl	80010de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fdd6 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fdac 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000010 	.word	0x20000010
 8000f68:	20000124 	.word	0x20000124

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000124 	.word	0x20000124

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4907      	ldr	r1, [pc, #28]	@ (8001020 <__NVIC_EnableIRQ+0x38>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	@ (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	@ (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	@ 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff4c 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001106:	f7ff ff61 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 800110a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff ffb1 	bl	8001078 <NVIC_EncodePriority>
 8001116:	4602      	mov	r2, r0
 8001118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff80 	bl	8001024 <__NVIC_SetPriority>
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff54 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001154:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001156:	f7ff ff09 	bl	8000f6c <HAL_GetTick>
 800115a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d008      	beq.n	800117a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2280      	movs	r2, #128	@ 0x80
 800116c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e052      	b.n	8001220 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0216 	bic.w	r2, r2, #22
 8001188:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001198:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <HAL_DMA_Abort+0x62>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0208 	bic.w	r2, r2, #8
 80011b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ca:	e013      	b.n	80011f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011cc:	f7ff fece 	bl	8000f6c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d90c      	bls.n	80011f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2220      	movs	r2, #32
 80011de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e015      	b.n	8001220 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1e4      	bne.n	80011cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001206:	223f      	movs	r2, #63	@ 0x3f
 8001208:	409a      	lsls	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d004      	beq.n	8001246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00c      	b.n	8001260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2205      	movs	r2, #5
 800124a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0201 	bic.w	r2, r2, #1
 800125c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e159      	b.n	800153c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8148 	bne.w	8001536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a2 	beq.w	8001536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b57      	ldr	r3, [pc, #348]	@ (8001554 <HAL_GPIO_Init+0x2e8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a56      	ldr	r2, [pc, #344]	@ (8001554 <HAL_GPIO_Init+0x2e8>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <HAL_GPIO_Init+0x2e8>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a52      	ldr	r2, [pc, #328]	@ (8001558 <HAL_GPIO_Init+0x2ec>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a49      	ldr	r2, [pc, #292]	@ (800155c <HAL_GPIO_Init+0x2f0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x202>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a48      	ldr	r2, [pc, #288]	@ (8001560 <HAL_GPIO_Init+0x2f4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x1fe>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a47      	ldr	r2, [pc, #284]	@ (8001564 <HAL_GPIO_Init+0x2f8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x1fa>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a46      	ldr	r2, [pc, #280]	@ (8001568 <HAL_GPIO_Init+0x2fc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x1f6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a45      	ldr	r2, [pc, #276]	@ (800156c <HAL_GPIO_Init+0x300>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x1f2>
 800145a:	2304      	movs	r3, #4
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800145e:	2307      	movs	r3, #7
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	@ (8001558 <HAL_GPIO_Init+0x2ec>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <HAL_GPIO_Init+0x304>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a24      	ldr	r2, [pc, #144]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e2:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001506:	4a1a      	ldr	r2, [pc, #104]	@ (8001570 <HAL_GPIO_Init+0x304>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_GPIO_Init+0x304>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001530:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <HAL_GPIO_Init+0x304>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f aea2 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	@ 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b8:	887a      	ldrh	r2, [r7, #2]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	041a      	lsls	r2, r3, #16
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	400b      	ands	r3, r1
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	619a      	str	r2, [r3, #24]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e267      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d075      	beq.n	80016e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015fa:	4b88      	ldr	r3, [pc, #544]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d00c      	beq.n	8001620 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001606:	4b85      	ldr	r3, [pc, #532]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800160e:	2b08      	cmp	r3, #8
 8001610:	d112      	bne.n	8001638 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001612:	4b82      	ldr	r3, [pc, #520]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800161e:	d10b      	bne.n	8001638 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4b7e      	ldr	r3, [pc, #504]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d05b      	beq.n	80016e4 <HAL_RCC_OscConfig+0x108>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d157      	bne.n	80016e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e242      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x74>
 8001642:	4b76      	ldr	r3, [pc, #472]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a75      	ldr	r2, [pc, #468]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0xb0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x98>
 800165a:	4b70      	ldr	r3, [pc, #448]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6f      	ldr	r2, [pc, #444]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b6d      	ldr	r3, [pc, #436]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a6c      	ldr	r2, [pc, #432]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0xb0>
 8001674:	4b69      	ldr	r3, [pc, #420]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a68      	ldr	r2, [pc, #416]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b66      	ldr	r3, [pc, #408]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a65      	ldr	r2, [pc, #404]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800168a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fc6a 	bl	8000f6c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fc66 	bl	8000f6c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	@ 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e207      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b5b      	ldr	r3, [pc, #364]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0xc0>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc56 	bl	8000f6c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fc52 	bl	8000f6c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	@ 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1f3      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	4b51      	ldr	r3, [pc, #324]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0xe8>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016f2:	4b4a      	ldr	r3, [pc, #296]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00b      	beq.n	8001716 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	4b47      	ldr	r3, [pc, #284]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001706:	2b08      	cmp	r3, #8
 8001708:	d11c      	bne.n	8001744 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170a:	4b44      	ldr	r3, [pc, #272]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	4b41      	ldr	r3, [pc, #260]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x152>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e1c7      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b3b      	ldr	r3, [pc, #236]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4937      	ldr	r1, [pc, #220]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e03a      	b.n	80017ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d020      	beq.n	800178e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <HAL_RCC_OscConfig+0x244>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff fc0b 	bl	8000f6c <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fc07 	bl	8000f6c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1a8      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b28      	ldr	r3, [pc, #160]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4925      	ldr	r1, [pc, #148]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178e:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_RCC_OscConfig+0x244>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fbea 	bl	8000f6c <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fbe6 	bl	8000f6c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e187      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d036      	beq.n	8001834 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d016      	beq.n	80017fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_RCC_OscConfig+0x248>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff fbca 	bl	8000f6c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff fbc6 	bl	8000f6c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e167      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_RCC_OscConfig+0x240>)
 80017f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x200>
 80017fa:	e01b      	b.n	8001834 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_RCC_OscConfig+0x248>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff fbb3 	bl	8000f6c <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	e00e      	b.n	8001828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff fbaf 	bl	8000f6c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d907      	bls.n	8001828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e150      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
 800181c:	40023800 	.word	0x40023800
 8001820:	42470000 	.word	0x42470000
 8001824:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b88      	ldr	r3, [pc, #544]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 800182a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ea      	bne.n	800180a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8097 	beq.w	8001970 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b81      	ldr	r3, [pc, #516]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b7d      	ldr	r3, [pc, #500]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	@ 0x40
 8001862:	4b7a      	ldr	r3, [pc, #488]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b77      	ldr	r3, [pc, #476]	@ (8001a50 <HAL_RCC_OscConfig+0x474>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d118      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b74      	ldr	r3, [pc, #464]	@ (8001a50 <HAL_RCC_OscConfig+0x474>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a73      	ldr	r2, [pc, #460]	@ (8001a50 <HAL_RCC_OscConfig+0x474>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7ff fb6f 	bl	8000f6c <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff fb6b 	bl	8000f6c <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e10c      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a50 <HAL_RCC_OscConfig+0x474>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x2ea>
 80018b8:	4b64      	ldr	r3, [pc, #400]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018bc:	4a63      	ldr	r2, [pc, #396]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c4:	e01c      	b.n	8001900 <HAL_RCC_OscConfig+0x324>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x30c>
 80018ce:	4b5f      	ldr	r3, [pc, #380]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018da:	4b5c      	ldr	r3, [pc, #368]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018de:	4a5b      	ldr	r2, [pc, #364]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0x324>
 80018e8:	4b58      	ldr	r3, [pc, #352]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ec:	4a57      	ldr	r2, [pc, #348]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f4:	4b55      	ldr	r3, [pc, #340]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f8:	4a54      	ldr	r2, [pc, #336]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d015      	beq.n	8001934 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fb30 	bl	8000f6c <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff fb2c 	bl	8000f6c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0cb      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	4b49      	ldr	r3, [pc, #292]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ee      	beq.n	8001910 <HAL_RCC_OscConfig+0x334>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff fb1a 	bl	8000f6c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff fb16 	bl	8000f6c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0b5      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	4b3e      	ldr	r3, [pc, #248]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ee      	bne.n	800193c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	4a38      	ldr	r2, [pc, #224]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a1 	beq.w	8001abc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197a:	4b34      	ldr	r3, [pc, #208]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	d05c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d141      	bne.n	8001a12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b31      	ldr	r3, [pc, #196]	@ (8001a54 <HAL_RCC_OscConfig+0x478>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff faea 	bl	8000f6c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fae6 	bl	8000f6c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e087      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	4b27      	ldr	r3, [pc, #156]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	491b      	ldr	r1, [pc, #108]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_RCC_OscConfig+0x478>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fabf 	bl	8000f6c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff fabb 	bl	8000f6c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e05c      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x416>
 8001a10:	e054      	b.n	8001abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <HAL_RCC_OscConfig+0x478>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff faa8 	bl	8000f6c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff faa4 	bl	8000f6c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e045      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_RCC_OscConfig+0x470>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x444>
 8001a3e:	e03d      	b.n	8001abc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e038      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000
 8001a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_RCC_OscConfig+0x4ec>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d028      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d121      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d11a      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a88:	4013      	ands	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0cc      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b68      	ldr	r3, [pc, #416]	@ (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d90c      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b65      	ldr	r3, [pc, #404]	@ (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b63      	ldr	r3, [pc, #396]	@ (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0b8      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b20:	4b59      	ldr	r3, [pc, #356]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a58      	ldr	r2, [pc, #352]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b38:	4b53      	ldr	r3, [pc, #332]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b50      	ldr	r3, [pc, #320]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	494d      	ldr	r1, [pc, #308]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d044      	beq.n	8001bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b47      	ldr	r3, [pc, #284]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d119      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e07f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e067      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001baa:	4b37      	ldr	r3, [pc, #220]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 0203 	bic.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4934      	ldr	r1, [pc, #208]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bbc:	f7ff f9d6 	bl	8000f6c <HAL_GetTick>
 8001bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc4:	f7ff f9d2 	bl	8000f6c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e04f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	4b2b      	ldr	r3, [pc, #172]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 020c 	and.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1eb      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bec:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d20c      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b22      	ldr	r3, [pc, #136]	@ (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e032      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c20:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4916      	ldr	r1, [pc, #88]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	490e      	ldr	r1, [pc, #56]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c52:	f000 f821 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	490a      	ldr	r1, [pc, #40]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	5ccb      	ldrb	r3, [r1, r3]
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	4a09      	ldr	r2, [pc, #36]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe ff34 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	080040d8 	.word	0x080040d8
 8001c90:	20000008 	.word	0x20000008
 8001c94:	2000000c 	.word	0x2000000c

08001c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c9c:	b094      	sub	sp, #80	@ 0x50
 8001c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb0:	4b79      	ldr	r3, [pc, #484]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d00d      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	f200 80e1 	bhi.w	8001e84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x34>
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cca:	e0db      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b73      	ldr	r3, [pc, #460]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001cce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd0:	e0db      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd2:	4b73      	ldr	r3, [pc, #460]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd6:	e0d8      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ce0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cee:	4b6a      	ldr	r3, [pc, #424]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	099b      	lsrs	r3, r3, #6
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	f04f 0000 	mov.w	r0, #0
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	0159      	lsls	r1, r3, #5
 8001d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1c:	0150      	lsls	r0, r2, #5
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4621      	mov	r1, r4
 8001d24:	1a51      	subs	r1, r2, r1
 8001d26:	6139      	str	r1, [r7, #16]
 8001d28:	4629      	mov	r1, r5
 8001d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d3c:	4659      	mov	r1, fp
 8001d3e:	018b      	lsls	r3, r1, #6
 8001d40:	4651      	mov	r1, sl
 8001d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d46:	4651      	mov	r1, sl
 8001d48:	018a      	lsls	r2, r1, #6
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d50:	4659      	mov	r1, fp
 8001d52:	eb63 0901 	sbc.w	r9, r3, r1
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d6a:	4690      	mov	r8, r2
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	4623      	mov	r3, r4
 8001d70:	eb18 0303 	adds.w	r3, r8, r3
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	462b      	mov	r3, r5
 8001d78:	eb49 0303 	adc.w	r3, r9, r3
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	024b      	lsls	r3, r1, #9
 8001d8e:	4621      	mov	r1, r4
 8001d90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d94:	4621      	mov	r1, r4
 8001d96:	024a      	lsls	r2, r1, #9
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001da4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001da8:	f7fe fa16 	bl	80001d8 <__aeabi_uldivmod>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4613      	mov	r3, r2
 8001db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001db4:	e058      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db6:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dc6:	623b      	str	r3, [r7, #32]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	f04f 0000 	mov.w	r0, #0
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	0159      	lsls	r1, r3, #5
 8001dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de2:	0150      	lsls	r0, r2, #5
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4641      	mov	r1, r8
 8001dea:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dee:	4649      	mov	r1, r9
 8001df0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e08:	ebb2 040a 	subs.w	r4, r2, sl
 8001e0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	00eb      	lsls	r3, r5, #3
 8001e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1e:	00e2      	lsls	r2, r4, #3
 8001e20:	4614      	mov	r4, r2
 8001e22:	461d      	mov	r5, r3
 8001e24:	4643      	mov	r3, r8
 8001e26:	18e3      	adds	r3, r4, r3
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	464b      	mov	r3, r9
 8001e2c:	eb45 0303 	adc.w	r3, r5, r3
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3e:	4629      	mov	r1, r5
 8001e40:	028b      	lsls	r3, r1, #10
 8001e42:	4621      	mov	r1, r4
 8001e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e48:	4621      	mov	r1, r4
 8001e4a:	028a      	lsls	r2, r1, #10
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e52:	2200      	movs	r2, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	61fa      	str	r2, [r7, #28]
 8001e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e5c:	f7fe f9bc 	bl	80001d8 <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
 8001e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0c1b      	lsrs	r3, r3, #16
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	3301      	adds	r3, #1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3750      	adds	r7, #80	@ 0x50
 8001e90:	46bd      	mov	sp, r7
 8001e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	00f42400 	.word	0x00f42400
 8001ea0:	007a1200 	.word	0x007a1200

08001ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec0:	f7ff fff0 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	@ (8001ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	080040e8 	.word	0x080040e8

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee8:	f7ff ffdc 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0b5b      	lsrs	r3, r3, #13
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4903      	ldr	r1, [pc, #12]	@ (8001f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	080040e8 	.word	0x080040e8

08001f0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	220f      	movs	r2, #15
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0203 	and.w	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_RCC_GetClockConfig+0x5c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_RCC_GetClockConfig+0x5c>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_RCC_GetClockConfig+0x60>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0207 	and.w	r2, r3, #7
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40023c00 	.word	0x40023c00

08001f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e041      	b.n	8002006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f839 	bl	800200e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f000 f9b2 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d001      	beq.n	800203c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e044      	b.n	80020c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1e      	ldr	r2, [pc, #120]	@ (80020d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d018      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x6c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002066:	d013      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x6c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1a      	ldr	r2, [pc, #104]	@ (80020d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00e      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x6c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <HAL_TIM_Base_Start_IT+0xb8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d009      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x6c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a17      	ldr	r2, [pc, #92]	@ (80020e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x6c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a16      	ldr	r2, [pc, #88]	@ (80020e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d111      	bne.n	80020b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d010      	beq.n	80020c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b2:	e007      	b.n	80020c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40000800 	.word	0x40000800
 80020e0:	40000c00 	.word	0x40000c00
 80020e4:	40014000 	.word	0x40014000

080020e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d020      	beq.n	800214c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0202 	mvn.w	r2, #2
 800211c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8d2 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8c4 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f8d5 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d020      	beq.n	8002198 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01b      	beq.n	8002198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0204 	mvn.w	r2, #4
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8ac 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f89e 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8af 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d020      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01b      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0208 	mvn.w	r2, #8
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2204      	movs	r2, #4
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f886 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f878 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f889 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d020      	beq.n	8002230 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01b      	beq.n	8002230 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0210 	mvn.w	r2, #16
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2208      	movs	r2, #8
 8002206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f860 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f852 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f863 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0201 	mvn.w	r2, #1
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fc06 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00c      	beq.n	8002278 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f8e6 	bl	8002444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f834 	bl	8002304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0220 	mvn.w	r2, #32
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8b8 	bl	8002430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a3a      	ldr	r2, [pc, #232]	@ (8002414 <TIM_Base_SetConfig+0xfc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00f      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002336:	d00b      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a37      	ldr	r2, [pc, #220]	@ (8002418 <TIM_Base_SetConfig+0x100>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a36      	ldr	r2, [pc, #216]	@ (800241c <TIM_Base_SetConfig+0x104>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d003      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a35      	ldr	r2, [pc, #212]	@ (8002420 <TIM_Base_SetConfig+0x108>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d108      	bne.n	8002362 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a2b      	ldr	r2, [pc, #172]	@ (8002414 <TIM_Base_SetConfig+0xfc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01b      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002370:	d017      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a28      	ldr	r2, [pc, #160]	@ (8002418 <TIM_Base_SetConfig+0x100>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a27      	ldr	r2, [pc, #156]	@ (800241c <TIM_Base_SetConfig+0x104>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00f      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a26      	ldr	r2, [pc, #152]	@ (8002420 <TIM_Base_SetConfig+0x108>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00b      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a25      	ldr	r2, [pc, #148]	@ (8002424 <TIM_Base_SetConfig+0x10c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a24      	ldr	r2, [pc, #144]	@ (8002428 <TIM_Base_SetConfig+0x110>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d003      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a23      	ldr	r2, [pc, #140]	@ (800242c <TIM_Base_SetConfig+0x114>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d108      	bne.n	80023b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a0e      	ldr	r2, [pc, #56]	@ (8002414 <TIM_Base_SetConfig+0xfc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d103      	bne.n	80023e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f023 0201 	bic.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]
  }
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40010000 	.word	0x40010000
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800
 8002420:	40000c00 	.word	0x40000c00
 8002424:	40014000 	.word	0x40014000
 8002428:	40014400 	.word	0x40014400
 800242c:	40014800 	.word	0x40014800

08002430 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e042      	b.n	80024f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fcc4 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	@ 0x24
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800249a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fdf5 	bl	800308c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b20      	cmp	r3, #32
 8002516:	d175      	bne.n	8002604 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_UART_Transmit+0x2c>
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e06e      	b.n	8002606 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2221      	movs	r2, #33	@ 0x21
 8002532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002536:	f7fe fd19 	bl	8000f6c <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	88fa      	ldrh	r2, [r7, #6]
 8002546:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002550:	d108      	bne.n	8002564 <HAL_UART_Transmit+0x6c>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d104      	bne.n	8002564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	e003      	b.n	800256c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800256c:	e02e      	b.n	80025cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	2180      	movs	r1, #128	@ 0x80
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fb91 	bl	8002ca0 <UART_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e03a      	b.n	8002606 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10b      	bne.n	80025ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	3302      	adds	r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	e007      	b.n	80025be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	781a      	ldrb	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	3301      	adds	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1cb      	bne.n	800256e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2200      	movs	r2, #0
 80025de:	2140      	movs	r1, #64	@ 0x40
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fb5d 	bl	8002ca0 <UART_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e006      	b.n	8002606 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b08a      	sub	sp, #40	@ 0x28
 8002612:	af02      	add	r7, sp, #8
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b20      	cmp	r3, #32
 800262c:	f040 8081 	bne.w	8002732 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_UART_Receive+0x2e>
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e079      	b.n	8002734 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2222      	movs	r2, #34	@ 0x22
 800264a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002654:	f7fe fc8a 	bl	8000f6c <HAL_GetTick>
 8002658:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800266e:	d108      	bne.n	8002682 <HAL_UART_Receive+0x74>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d104      	bne.n	8002682 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	e003      	b.n	800268a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800268a:	e047      	b.n	800271c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2200      	movs	r2, #0
 8002694:	2120      	movs	r1, #32
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fb02 	bl	8002ca0 <UART_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e042      	b.n	8002734 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10c      	bne.n	80026ce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	3302      	adds	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
 80026cc:	e01f      	b.n	800270e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d6:	d007      	beq.n	80026e8 <HAL_UART_Receive+0xda>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <HAL_UART_Receive+0xe8>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e008      	b.n	8002708 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002702:	b2da      	uxtb	r2, r3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	3301      	adds	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1b2      	bne.n	800268c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0ba      	sub	sp, #232	@ 0xe8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800276e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800277a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_UART_IRQHandler+0x66>
 800278e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fbb8 	bl	8002f10 <UART_Receive_IT>
      return;
 80027a0:	e25b      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80de 	beq.w	8002968 <HAL_UART_IRQHandler+0x22c>
 80027ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80d1 	beq.w	8002968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_UART_IRQHandler+0xae>
 80027d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_UART_IRQHandler+0xd2>
 80027f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f043 0202 	orr.w	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800280e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_UART_IRQHandler+0xf6>
 800281a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d011      	beq.n	8002862 <HAL_UART_IRQHandler+0x126>
 800283e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800284a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f043 0208 	orr.w	r2, r3, #8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 81f2 	beq.w	8002c50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800286c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_UART_IRQHandler+0x14e>
 8002878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fb43 	bl	8002f10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002894:	2b40      	cmp	r3, #64	@ 0x40
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <HAL_UART_IRQHandler+0x17a>
 80028ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d04f      	beq.n	8002956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fa4b 	bl	8002d52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d141      	bne.n	800294e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3314      	adds	r3, #20
 80028d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3314      	adds	r3, #20
 80028f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800290e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1d9      	bne.n	80028ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d013      	beq.n	8002946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002922:	4a7e      	ldr	r2, [pc, #504]	@ (8002b1c <HAL_UART_IRQHandler+0x3e0>)
 8002924:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fc7c 	bl	8001228 <HAL_DMA_Abort_IT>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002940:	4610      	mov	r0, r2
 8002942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002944:	e00e      	b.n	8002964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f994 	bl	8002c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800294c:	e00a      	b.n	8002964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f990 	bl	8002c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002954:	e006      	b.n	8002964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f98c 	bl	8002c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002962:	e175      	b.n	8002c50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002964:	bf00      	nop
    return;
 8002966:	e173      	b.n	8002c50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	2b01      	cmp	r3, #1
 800296e:	f040 814f 	bne.w	8002c10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8148 	beq.w	8002c10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8141 	beq.w	8002c10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ae:	2b40      	cmp	r3, #64	@ 0x40
 80029b0:	f040 80b6 	bne.w	8002b20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8145 	beq.w	8002c54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029d2:	429a      	cmp	r2, r3
 80029d4:	f080 813e 	bcs.w	8002c54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ea:	f000 8088 	beq.w	8002afe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	330c      	adds	r3, #12
 80029f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1d9      	bne.n	80029ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3314      	adds	r3, #20
 8002a40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3314      	adds	r3, #20
 8002a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1e1      	bne.n	8002a3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3314      	adds	r3, #20
 8002a7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3314      	adds	r3, #20
 8002a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002aa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e3      	bne.n	8002a76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ac6:	e853 3f00 	ldrex	r3, [r3]
 8002aca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ace:	f023 0310 	bic.w	r3, r3, #16
 8002ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	330c      	adds	r3, #12
 8002adc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ae0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ae2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ae8:	e841 2300 	strex	r3, r2, [r1]
 8002aec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e3      	bne.n	8002abc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fb25 	bl	8001148 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8b7 	bl	8002c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b1a:	e09b      	b.n	8002c54 <HAL_UART_IRQHandler+0x518>
 8002b1c:	08002e19 	.word	0x08002e19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 808e 	beq.w	8002c58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8089 	beq.w	8002c58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e3      	bne.n	8002b46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3314      	adds	r3, #20
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3314      	adds	r3, #20
 8002b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e3      	bne.n	8002b7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0310 	bic.w	r3, r3, #16
 8002bda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	330c      	adds	r3, #12
 8002be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002be8:	61fa      	str	r2, [r7, #28]
 8002bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bec:	69b9      	ldr	r1, [r7, #24]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	e841 2300 	strex	r3, r2, [r1]
 8002bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e3      	bne.n	8002bc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c06:	4619      	mov	r1, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f83d 	bl	8002c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c0e:	e023      	b.n	8002c58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <HAL_UART_IRQHandler+0x4f4>
 8002c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f909 	bl	8002e40 <UART_Transmit_IT>
    return;
 8002c2e:	e014      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <HAL_UART_IRQHandler+0x51e>
 8002c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f949 	bl	8002ee0 <UART_EndTransmit_IT>
    return;
 8002c4e:	e004      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
    return;
 8002c50:	bf00      	nop
 8002c52:	e002      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c58:	bf00      	nop
  }
}
 8002c5a:	37e8      	adds	r7, #232	@ 0xe8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb0:	e03b      	b.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d037      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fe f957 	bl	8000f6c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e03a      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d023      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b80      	cmp	r3, #128	@ 0x80
 8002ce6:	d020      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b40      	cmp	r3, #64	@ 0x40
 8002cec:	d01d      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d116      	bne.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f81d 	bl	8002d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00f      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4013      	ands	r3, r2
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d0b4      	beq.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b095      	sub	sp, #84	@ 0x54
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e5      	bne.n	8002d5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3314      	adds	r3, #20
 8002d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002db4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e5      	bne.n	8002d8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d119      	bne.n	8002dfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	e853 3f00 	ldrex	r3, [r3]
 8002dd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f023 0310 	bic.w	r3, r3, #16
 8002de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	330c      	adds	r3, #12
 8002de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dea:	61ba      	str	r2, [r7, #24]
 8002dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dee:	6979      	ldr	r1, [r7, #20]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	e841 2300 	strex	r3, r2, [r1]
 8002df6:	613b      	str	r3, [r7, #16]
   return(result);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1e5      	bne.n	8002dca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e0c:	bf00      	nop
 8002e0e:	3754      	adds	r7, #84	@ 0x54
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f7ff ff1e 	bl	8002c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b21      	cmp	r3, #33	@ 0x21
 8002e52:	d13e      	bne.n	8002ed2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5c:	d114      	bne.n	8002e88 <UART_Transmit_IT+0x48>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d110      	bne.n	8002e88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	621a      	str	r2, [r3, #32]
 8002e86:	e008      	b.n	8002e9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	1c59      	adds	r1, r3, #1
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6211      	str	r1, [r2, #32]
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ebc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ecc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e000      	b.n	8002ed4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fead 	bl	8002c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	@ 0x30
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b22      	cmp	r3, #34	@ 0x22
 8002f22:	f040 80ae 	bne.w	8003082 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f2e:	d117      	bne.n	8002f60 <UART_Receive_IT+0x50>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d113      	bne.n	8002f60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	1c9a      	adds	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f5e:	e026      	b.n	8002fae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f72:	d007      	beq.n	8002f84 <UART_Receive_IT+0x74>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <UART_Receive_IT+0x82>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e008      	b.n	8002fa4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d15d      	bne.n	800307e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0220 	bic.w	r2, r2, #32
 8002fd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	2b01      	cmp	r3, #1
 8003006:	d135      	bne.n	8003074 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	613b      	str	r3, [r7, #16]
   return(result);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f023 0310 	bic.w	r3, r3, #16
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302e:	623a      	str	r2, [r7, #32]
 8003030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	69f9      	ldr	r1, [r7, #28]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	61bb      	str	r3, [r7, #24]
   return(result);
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e5      	bne.n	800300e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b10      	cmp	r3, #16
 800304e:	d10a      	bne.n	8003066 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800306a:	4619      	mov	r1, r3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff fe0b 	bl	8002c88 <HAL_UARTEx_RxEventCallback>
 8003072:	e002      	b.n	800307a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7fd fce5 	bl	8000a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e002      	b.n	8003084 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
  }
}
 8003084:	4618      	mov	r0, r3
 8003086:	3730      	adds	r7, #48	@ 0x30
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003090:	b0c0      	sub	sp, #256	@ 0x100
 8003092:	af00      	add	r7, sp, #0
 8003094:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a8:	68d9      	ldr	r1, [r3, #12]
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	ea40 0301 	orr.w	r3, r0, r1
 80030b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030e4:	f021 010c 	bic.w	r1, r1, #12
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030f2:	430b      	orrs	r3, r1
 80030f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003106:	6999      	ldr	r1, [r3, #24]
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	ea40 0301 	orr.w	r3, r0, r1
 8003112:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b8f      	ldr	r3, [pc, #572]	@ (8003358 <UART_SetConfig+0x2cc>)
 800311c:	429a      	cmp	r2, r3
 800311e:	d005      	beq.n	800312c <UART_SetConfig+0xa0>
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b8d      	ldr	r3, [pc, #564]	@ (800335c <UART_SetConfig+0x2d0>)
 8003128:	429a      	cmp	r2, r3
 800312a:	d104      	bne.n	8003136 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7fe feda 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8003130:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003134:	e003      	b.n	800313e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003136:	f7fe fec1 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 800313a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003148:	f040 810c 	bne.w	8003364 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800314c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003150:	2200      	movs	r2, #0
 8003152:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003156:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800315a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800315e:	4622      	mov	r2, r4
 8003160:	462b      	mov	r3, r5
 8003162:	1891      	adds	r1, r2, r2
 8003164:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003166:	415b      	adcs	r3, r3
 8003168:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800316a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800316e:	4621      	mov	r1, r4
 8003170:	eb12 0801 	adds.w	r8, r2, r1
 8003174:	4629      	mov	r1, r5
 8003176:	eb43 0901 	adc.w	r9, r3, r1
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800318a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800318e:	4690      	mov	r8, r2
 8003190:	4699      	mov	r9, r3
 8003192:	4623      	mov	r3, r4
 8003194:	eb18 0303 	adds.w	r3, r8, r3
 8003198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800319c:	462b      	mov	r3, r5
 800319e:	eb49 0303 	adc.w	r3, r9, r3
 80031a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031ba:	460b      	mov	r3, r1
 80031bc:	18db      	adds	r3, r3, r3
 80031be:	653b      	str	r3, [r7, #80]	@ 0x50
 80031c0:	4613      	mov	r3, r2
 80031c2:	eb42 0303 	adc.w	r3, r2, r3
 80031c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80031c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031d0:	f7fd f802 	bl	80001d8 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4b61      	ldr	r3, [pc, #388]	@ (8003360 <UART_SetConfig+0x2d4>)
 80031da:	fba3 2302 	umull	r2, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	011c      	lsls	r4, r3, #4
 80031e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031f4:	4642      	mov	r2, r8
 80031f6:	464b      	mov	r3, r9
 80031f8:	1891      	adds	r1, r2, r2
 80031fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031fc:	415b      	adcs	r3, r3
 80031fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003200:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003204:	4641      	mov	r1, r8
 8003206:	eb12 0a01 	adds.w	sl, r2, r1
 800320a:	4649      	mov	r1, r9
 800320c:	eb43 0b01 	adc.w	fp, r3, r1
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800321c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003224:	4692      	mov	sl, r2
 8003226:	469b      	mov	fp, r3
 8003228:	4643      	mov	r3, r8
 800322a:	eb1a 0303 	adds.w	r3, sl, r3
 800322e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003232:	464b      	mov	r3, r9
 8003234:	eb4b 0303 	adc.w	r3, fp, r3
 8003238:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003248:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800324c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003250:	460b      	mov	r3, r1
 8003252:	18db      	adds	r3, r3, r3
 8003254:	643b      	str	r3, [r7, #64]	@ 0x40
 8003256:	4613      	mov	r3, r2
 8003258:	eb42 0303 	adc.w	r3, r2, r3
 800325c:	647b      	str	r3, [r7, #68]	@ 0x44
 800325e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003262:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003266:	f7fc ffb7 	bl	80001d8 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4611      	mov	r1, r2
 8003270:	4b3b      	ldr	r3, [pc, #236]	@ (8003360 <UART_SetConfig+0x2d4>)
 8003272:	fba3 2301 	umull	r2, r3, r3, r1
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2264      	movs	r2, #100	@ 0x64
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	1acb      	subs	r3, r1, r3
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003286:	4b36      	ldr	r3, [pc, #216]	@ (8003360 <UART_SetConfig+0x2d4>)
 8003288:	fba3 2302 	umull	r2, r3, r3, r2
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003294:	441c      	add	r4, r3
 8003296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	1891      	adds	r1, r2, r2
 80032ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032b0:	415b      	adcs	r3, r3
 80032b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032b8:	4641      	mov	r1, r8
 80032ba:	1851      	adds	r1, r2, r1
 80032bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80032be:	4649      	mov	r1, r9
 80032c0:	414b      	adcs	r3, r1
 80032c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032d0:	4659      	mov	r1, fp
 80032d2:	00cb      	lsls	r3, r1, #3
 80032d4:	4651      	mov	r1, sl
 80032d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032da:	4651      	mov	r1, sl
 80032dc:	00ca      	lsls	r2, r1, #3
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	4642      	mov	r2, r8
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032ec:	464b      	mov	r3, r9
 80032ee:	460a      	mov	r2, r1
 80032f0:	eb42 0303 	adc.w	r3, r2, r3
 80032f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003304:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003308:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800330c:	460b      	mov	r3, r1
 800330e:	18db      	adds	r3, r3, r3
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003312:	4613      	mov	r3, r2
 8003314:	eb42 0303 	adc.w	r3, r2, r3
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800331a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800331e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003322:	f7fc ff59 	bl	80001d8 <__aeabi_uldivmod>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <UART_SetConfig+0x2d4>)
 800332c:	fba3 1302 	umull	r1, r3, r3, r2
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2164      	movs	r1, #100	@ 0x64
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	3332      	adds	r3, #50	@ 0x32
 800333e:	4a08      	ldr	r2, [pc, #32]	@ (8003360 <UART_SetConfig+0x2d4>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	f003 0207 	and.w	r2, r3, #7
 800334a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4422      	add	r2, r4
 8003352:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003354:	e106      	b.n	8003564 <UART_SetConfig+0x4d8>
 8003356:	bf00      	nop
 8003358:	40011000 	.word	0x40011000
 800335c:	40011400 	.word	0x40011400
 8003360:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003368:	2200      	movs	r2, #0
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800336e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003372:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003376:	4642      	mov	r2, r8
 8003378:	464b      	mov	r3, r9
 800337a:	1891      	adds	r1, r2, r2
 800337c:	6239      	str	r1, [r7, #32]
 800337e:	415b      	adcs	r3, r3
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
 8003382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003386:	4641      	mov	r1, r8
 8003388:	1854      	adds	r4, r2, r1
 800338a:	4649      	mov	r1, r9
 800338c:	eb43 0501 	adc.w	r5, r3, r1
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	00eb      	lsls	r3, r5, #3
 800339a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339e:	00e2      	lsls	r2, r4, #3
 80033a0:	4614      	mov	r4, r2
 80033a2:	461d      	mov	r5, r3
 80033a4:	4643      	mov	r3, r8
 80033a6:	18e3      	adds	r3, r4, r3
 80033a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033ac:	464b      	mov	r3, r9
 80033ae:	eb45 0303 	adc.w	r3, r5, r3
 80033b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033d2:	4629      	mov	r1, r5
 80033d4:	008b      	lsls	r3, r1, #2
 80033d6:	4621      	mov	r1, r4
 80033d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033dc:	4621      	mov	r1, r4
 80033de:	008a      	lsls	r2, r1, #2
 80033e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033e4:	f7fc fef8 	bl	80001d8 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4b60      	ldr	r3, [pc, #384]	@ (8003570 <UART_SetConfig+0x4e4>)
 80033ee:	fba3 2302 	umull	r2, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	011c      	lsls	r4, r3, #4
 80033f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003400:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003404:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	1891      	adds	r1, r2, r2
 800340e:	61b9      	str	r1, [r7, #24]
 8003410:	415b      	adcs	r3, r3
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003418:	4641      	mov	r1, r8
 800341a:	1851      	adds	r1, r2, r1
 800341c:	6139      	str	r1, [r7, #16]
 800341e:	4649      	mov	r1, r9
 8003420:	414b      	adcs	r3, r1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003430:	4659      	mov	r1, fp
 8003432:	00cb      	lsls	r3, r1, #3
 8003434:	4651      	mov	r1, sl
 8003436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343a:	4651      	mov	r1, sl
 800343c:	00ca      	lsls	r2, r1, #3
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	4603      	mov	r3, r0
 8003444:	4642      	mov	r2, r8
 8003446:	189b      	adds	r3, r3, r2
 8003448:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800344c:	464b      	mov	r3, r9
 800344e:	460a      	mov	r2, r1
 8003450:	eb42 0303 	adc.w	r3, r2, r3
 8003454:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003462:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003470:	4649      	mov	r1, r9
 8003472:	008b      	lsls	r3, r1, #2
 8003474:	4641      	mov	r1, r8
 8003476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800347a:	4641      	mov	r1, r8
 800347c:	008a      	lsls	r2, r1, #2
 800347e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003482:	f7fc fea9 	bl	80001d8 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4611      	mov	r1, r2
 800348c:	4b38      	ldr	r3, [pc, #224]	@ (8003570 <UART_SetConfig+0x4e4>)
 800348e:	fba3 2301 	umull	r2, r3, r3, r1
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2264      	movs	r2, #100	@ 0x64
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	1acb      	subs	r3, r1, r3
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	3332      	adds	r3, #50	@ 0x32
 80034a0:	4a33      	ldr	r2, [pc, #204]	@ (8003570 <UART_SetConfig+0x4e4>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034ac:	441c      	add	r4, r3
 80034ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034b2:	2200      	movs	r2, #0
 80034b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80034b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80034b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	1891      	adds	r1, r2, r2
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	415b      	adcs	r3, r3
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034cc:	4641      	mov	r1, r8
 80034ce:	1851      	adds	r1, r2, r1
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	4649      	mov	r1, r9
 80034d4:	414b      	adcs	r3, r1
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034e4:	4659      	mov	r1, fp
 80034e6:	00cb      	lsls	r3, r1, #3
 80034e8:	4651      	mov	r1, sl
 80034ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ee:	4651      	mov	r1, sl
 80034f0:	00ca      	lsls	r2, r1, #3
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	4642      	mov	r2, r8
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034fe:	464b      	mov	r3, r9
 8003500:	460a      	mov	r2, r1
 8003502:	eb42 0303 	adc.w	r3, r2, r3
 8003506:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	663b      	str	r3, [r7, #96]	@ 0x60
 8003512:	667a      	str	r2, [r7, #100]	@ 0x64
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003520:	4649      	mov	r1, r9
 8003522:	008b      	lsls	r3, r1, #2
 8003524:	4641      	mov	r1, r8
 8003526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800352a:	4641      	mov	r1, r8
 800352c:	008a      	lsls	r2, r1, #2
 800352e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003532:	f7fc fe51 	bl	80001d8 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <UART_SetConfig+0x4e4>)
 800353c:	fba3 1302 	umull	r1, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	2164      	movs	r1, #100	@ 0x64
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	3332      	adds	r3, #50	@ 0x32
 800354e:	4a08      	ldr	r2, [pc, #32]	@ (8003570 <UART_SetConfig+0x4e4>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	f003 020f 	and.w	r2, r3, #15
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4422      	add	r2, r4
 8003562:	609a      	str	r2, [r3, #8]
}
 8003564:	bf00      	nop
 8003566:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800356a:	46bd      	mov	sp, r7
 800356c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003570:	51eb851f 	.word	0x51eb851f

08003574 <std>:
 8003574:	2300      	movs	r3, #0
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	e9c0 3300 	strd	r3, r3, [r0]
 800357e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003582:	6083      	str	r3, [r0, #8]
 8003584:	8181      	strh	r1, [r0, #12]
 8003586:	6643      	str	r3, [r0, #100]	@ 0x64
 8003588:	81c2      	strh	r2, [r0, #14]
 800358a:	6183      	str	r3, [r0, #24]
 800358c:	4619      	mov	r1, r3
 800358e:	2208      	movs	r2, #8
 8003590:	305c      	adds	r0, #92	@ 0x5c
 8003592:	f000 faa3 	bl	8003adc <memset>
 8003596:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <std+0x58>)
 8003598:	6263      	str	r3, [r4, #36]	@ 0x24
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <std+0x5c>)
 800359c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800359e:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <std+0x60>)
 80035a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <std+0x64>)
 80035a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80035a6:	4b0d      	ldr	r3, [pc, #52]	@ (80035dc <std+0x68>)
 80035a8:	6224      	str	r4, [r4, #32]
 80035aa:	429c      	cmp	r4, r3
 80035ac:	d006      	beq.n	80035bc <std+0x48>
 80035ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035b2:	4294      	cmp	r4, r2
 80035b4:	d002      	beq.n	80035bc <std+0x48>
 80035b6:	33d0      	adds	r3, #208	@ 0xd0
 80035b8:	429c      	cmp	r4, r3
 80035ba:	d105      	bne.n	80035c8 <std+0x54>
 80035bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c4:	f000 bb02 	b.w	8003bcc <__retarget_lock_init_recursive>
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	0800392d 	.word	0x0800392d
 80035d0:	0800394f 	.word	0x0800394f
 80035d4:	08003987 	.word	0x08003987
 80035d8:	080039ab 	.word	0x080039ab
 80035dc:	20000128 	.word	0x20000128

080035e0 <stdio_exit_handler>:
 80035e0:	4a02      	ldr	r2, [pc, #8]	@ (80035ec <stdio_exit_handler+0xc>)
 80035e2:	4903      	ldr	r1, [pc, #12]	@ (80035f0 <stdio_exit_handler+0x10>)
 80035e4:	4803      	ldr	r0, [pc, #12]	@ (80035f4 <stdio_exit_handler+0x14>)
 80035e6:	f000 b869 	b.w	80036bc <_fwalk_sglue>
 80035ea:	bf00      	nop
 80035ec:	20000014 	.word	0x20000014
 80035f0:	08003edd 	.word	0x08003edd
 80035f4:	20000024 	.word	0x20000024

080035f8 <cleanup_stdio>:
 80035f8:	6841      	ldr	r1, [r0, #4]
 80035fa:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <cleanup_stdio+0x34>)
 80035fc:	4299      	cmp	r1, r3
 80035fe:	b510      	push	{r4, lr}
 8003600:	4604      	mov	r4, r0
 8003602:	d001      	beq.n	8003608 <cleanup_stdio+0x10>
 8003604:	f000 fc6a 	bl	8003edc <_fflush_r>
 8003608:	68a1      	ldr	r1, [r4, #8]
 800360a:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <cleanup_stdio+0x38>)
 800360c:	4299      	cmp	r1, r3
 800360e:	d002      	beq.n	8003616 <cleanup_stdio+0x1e>
 8003610:	4620      	mov	r0, r4
 8003612:	f000 fc63 	bl	8003edc <_fflush_r>
 8003616:	68e1      	ldr	r1, [r4, #12]
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <cleanup_stdio+0x3c>)
 800361a:	4299      	cmp	r1, r3
 800361c:	d004      	beq.n	8003628 <cleanup_stdio+0x30>
 800361e:	4620      	mov	r0, r4
 8003620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003624:	f000 bc5a 	b.w	8003edc <_fflush_r>
 8003628:	bd10      	pop	{r4, pc}
 800362a:	bf00      	nop
 800362c:	20000128 	.word	0x20000128
 8003630:	20000190 	.word	0x20000190
 8003634:	200001f8 	.word	0x200001f8

08003638 <global_stdio_init.part.0>:
 8003638:	b510      	push	{r4, lr}
 800363a:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <global_stdio_init.part.0+0x30>)
 800363c:	4c0b      	ldr	r4, [pc, #44]	@ (800366c <global_stdio_init.part.0+0x34>)
 800363e:	4a0c      	ldr	r2, [pc, #48]	@ (8003670 <global_stdio_init.part.0+0x38>)
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	4620      	mov	r0, r4
 8003644:	2200      	movs	r2, #0
 8003646:	2104      	movs	r1, #4
 8003648:	f7ff ff94 	bl	8003574 <std>
 800364c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003650:	2201      	movs	r2, #1
 8003652:	2109      	movs	r1, #9
 8003654:	f7ff ff8e 	bl	8003574 <std>
 8003658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800365c:	2202      	movs	r2, #2
 800365e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003662:	2112      	movs	r1, #18
 8003664:	f7ff bf86 	b.w	8003574 <std>
 8003668:	20000260 	.word	0x20000260
 800366c:	20000128 	.word	0x20000128
 8003670:	080035e1 	.word	0x080035e1

08003674 <__sfp_lock_acquire>:
 8003674:	4801      	ldr	r0, [pc, #4]	@ (800367c <__sfp_lock_acquire+0x8>)
 8003676:	f000 baaa 	b.w	8003bce <__retarget_lock_acquire_recursive>
 800367a:	bf00      	nop
 800367c:	20000269 	.word	0x20000269

08003680 <__sfp_lock_release>:
 8003680:	4801      	ldr	r0, [pc, #4]	@ (8003688 <__sfp_lock_release+0x8>)
 8003682:	f000 baa5 	b.w	8003bd0 <__retarget_lock_release_recursive>
 8003686:	bf00      	nop
 8003688:	20000269 	.word	0x20000269

0800368c <__sinit>:
 800368c:	b510      	push	{r4, lr}
 800368e:	4604      	mov	r4, r0
 8003690:	f7ff fff0 	bl	8003674 <__sfp_lock_acquire>
 8003694:	6a23      	ldr	r3, [r4, #32]
 8003696:	b11b      	cbz	r3, 80036a0 <__sinit+0x14>
 8003698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800369c:	f7ff bff0 	b.w	8003680 <__sfp_lock_release>
 80036a0:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <__sinit+0x28>)
 80036a2:	6223      	str	r3, [r4, #32]
 80036a4:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <__sinit+0x2c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f5      	bne.n	8003698 <__sinit+0xc>
 80036ac:	f7ff ffc4 	bl	8003638 <global_stdio_init.part.0>
 80036b0:	e7f2      	b.n	8003698 <__sinit+0xc>
 80036b2:	bf00      	nop
 80036b4:	080035f9 	.word	0x080035f9
 80036b8:	20000260 	.word	0x20000260

080036bc <_fwalk_sglue>:
 80036bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036c0:	4607      	mov	r7, r0
 80036c2:	4688      	mov	r8, r1
 80036c4:	4614      	mov	r4, r2
 80036c6:	2600      	movs	r6, #0
 80036c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036cc:	f1b9 0901 	subs.w	r9, r9, #1
 80036d0:	d505      	bpl.n	80036de <_fwalk_sglue+0x22>
 80036d2:	6824      	ldr	r4, [r4, #0]
 80036d4:	2c00      	cmp	r4, #0
 80036d6:	d1f7      	bne.n	80036c8 <_fwalk_sglue+0xc>
 80036d8:	4630      	mov	r0, r6
 80036da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036de:	89ab      	ldrh	r3, [r5, #12]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d907      	bls.n	80036f4 <_fwalk_sglue+0x38>
 80036e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036e8:	3301      	adds	r3, #1
 80036ea:	d003      	beq.n	80036f4 <_fwalk_sglue+0x38>
 80036ec:	4629      	mov	r1, r5
 80036ee:	4638      	mov	r0, r7
 80036f0:	47c0      	blx	r8
 80036f2:	4306      	orrs	r6, r0
 80036f4:	3568      	adds	r5, #104	@ 0x68
 80036f6:	e7e9      	b.n	80036cc <_fwalk_sglue+0x10>

080036f8 <putchar>:
 80036f8:	4b02      	ldr	r3, [pc, #8]	@ (8003704 <putchar+0xc>)
 80036fa:	4601      	mov	r1, r0
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	6882      	ldr	r2, [r0, #8]
 8003700:	f000 bc76 	b.w	8003ff0 <_putc_r>
 8003704:	20000020 	.word	0x20000020

08003708 <_puts_r>:
 8003708:	6a03      	ldr	r3, [r0, #32]
 800370a:	b570      	push	{r4, r5, r6, lr}
 800370c:	6884      	ldr	r4, [r0, #8]
 800370e:	4605      	mov	r5, r0
 8003710:	460e      	mov	r6, r1
 8003712:	b90b      	cbnz	r3, 8003718 <_puts_r+0x10>
 8003714:	f7ff ffba 	bl	800368c <__sinit>
 8003718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800371a:	07db      	lsls	r3, r3, #31
 800371c:	d405      	bmi.n	800372a <_puts_r+0x22>
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	0598      	lsls	r0, r3, #22
 8003722:	d402      	bmi.n	800372a <_puts_r+0x22>
 8003724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003726:	f000 fa52 	bl	8003bce <__retarget_lock_acquire_recursive>
 800372a:	89a3      	ldrh	r3, [r4, #12]
 800372c:	0719      	lsls	r1, r3, #28
 800372e:	d502      	bpl.n	8003736 <_puts_r+0x2e>
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d135      	bne.n	80037a2 <_puts_r+0x9a>
 8003736:	4621      	mov	r1, r4
 8003738:	4628      	mov	r0, r5
 800373a:	f000 f979 	bl	8003a30 <__swsetup_r>
 800373e:	b380      	cbz	r0, 80037a2 <_puts_r+0x9a>
 8003740:	f04f 35ff 	mov.w	r5, #4294967295
 8003744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003746:	07da      	lsls	r2, r3, #31
 8003748:	d405      	bmi.n	8003756 <_puts_r+0x4e>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	059b      	lsls	r3, r3, #22
 800374e:	d402      	bmi.n	8003756 <_puts_r+0x4e>
 8003750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003752:	f000 fa3d 	bl	8003bd0 <__retarget_lock_release_recursive>
 8003756:	4628      	mov	r0, r5
 8003758:	bd70      	pop	{r4, r5, r6, pc}
 800375a:	2b00      	cmp	r3, #0
 800375c:	da04      	bge.n	8003768 <_puts_r+0x60>
 800375e:	69a2      	ldr	r2, [r4, #24]
 8003760:	429a      	cmp	r2, r3
 8003762:	dc17      	bgt.n	8003794 <_puts_r+0x8c>
 8003764:	290a      	cmp	r1, #10
 8003766:	d015      	beq.n	8003794 <_puts_r+0x8c>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	6022      	str	r2, [r4, #0]
 800376e:	7019      	strb	r1, [r3, #0]
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003776:	3b01      	subs	r3, #1
 8003778:	60a3      	str	r3, [r4, #8]
 800377a:	2900      	cmp	r1, #0
 800377c:	d1ed      	bne.n	800375a <_puts_r+0x52>
 800377e:	2b00      	cmp	r3, #0
 8003780:	da11      	bge.n	80037a6 <_puts_r+0x9e>
 8003782:	4622      	mov	r2, r4
 8003784:	210a      	movs	r1, #10
 8003786:	4628      	mov	r0, r5
 8003788:	f000 f913 	bl	80039b2 <__swbuf_r>
 800378c:	3001      	adds	r0, #1
 800378e:	d0d7      	beq.n	8003740 <_puts_r+0x38>
 8003790:	250a      	movs	r5, #10
 8003792:	e7d7      	b.n	8003744 <_puts_r+0x3c>
 8003794:	4622      	mov	r2, r4
 8003796:	4628      	mov	r0, r5
 8003798:	f000 f90b 	bl	80039b2 <__swbuf_r>
 800379c:	3001      	adds	r0, #1
 800379e:	d1e7      	bne.n	8003770 <_puts_r+0x68>
 80037a0:	e7ce      	b.n	8003740 <_puts_r+0x38>
 80037a2:	3e01      	subs	r6, #1
 80037a4:	e7e4      	b.n	8003770 <_puts_r+0x68>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	6022      	str	r2, [r4, #0]
 80037ac:	220a      	movs	r2, #10
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e7ee      	b.n	8003790 <_puts_r+0x88>
	...

080037b4 <puts>:
 80037b4:	4b02      	ldr	r3, [pc, #8]	@ (80037c0 <puts+0xc>)
 80037b6:	4601      	mov	r1, r0
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f7ff bfa5 	b.w	8003708 <_puts_r>
 80037be:	bf00      	nop
 80037c0:	20000020 	.word	0x20000020

080037c4 <setvbuf>:
 80037c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037c8:	461d      	mov	r5, r3
 80037ca:	4b57      	ldr	r3, [pc, #348]	@ (8003928 <setvbuf+0x164>)
 80037cc:	681f      	ldr	r7, [r3, #0]
 80037ce:	4604      	mov	r4, r0
 80037d0:	460e      	mov	r6, r1
 80037d2:	4690      	mov	r8, r2
 80037d4:	b127      	cbz	r7, 80037e0 <setvbuf+0x1c>
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	b913      	cbnz	r3, 80037e0 <setvbuf+0x1c>
 80037da:	4638      	mov	r0, r7
 80037dc:	f7ff ff56 	bl	800368c <__sinit>
 80037e0:	f1b8 0f02 	cmp.w	r8, #2
 80037e4:	d006      	beq.n	80037f4 <setvbuf+0x30>
 80037e6:	f1b8 0f01 	cmp.w	r8, #1
 80037ea:	f200 809a 	bhi.w	8003922 <setvbuf+0x15e>
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	f2c0 8097 	blt.w	8003922 <setvbuf+0x15e>
 80037f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037f6:	07d9      	lsls	r1, r3, #31
 80037f8:	d405      	bmi.n	8003806 <setvbuf+0x42>
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	059a      	lsls	r2, r3, #22
 80037fe:	d402      	bmi.n	8003806 <setvbuf+0x42>
 8003800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003802:	f000 f9e4 	bl	8003bce <__retarget_lock_acquire_recursive>
 8003806:	4621      	mov	r1, r4
 8003808:	4638      	mov	r0, r7
 800380a:	f000 fb67 	bl	8003edc <_fflush_r>
 800380e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003810:	b141      	cbz	r1, 8003824 <setvbuf+0x60>
 8003812:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003816:	4299      	cmp	r1, r3
 8003818:	d002      	beq.n	8003820 <setvbuf+0x5c>
 800381a:	4638      	mov	r0, r7
 800381c:	f000 f9da 	bl	8003bd4 <_free_r>
 8003820:	2300      	movs	r3, #0
 8003822:	6363      	str	r3, [r4, #52]	@ 0x34
 8003824:	2300      	movs	r3, #0
 8003826:	61a3      	str	r3, [r4, #24]
 8003828:	6063      	str	r3, [r4, #4]
 800382a:	89a3      	ldrh	r3, [r4, #12]
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	d503      	bpl.n	8003838 <setvbuf+0x74>
 8003830:	6921      	ldr	r1, [r4, #16]
 8003832:	4638      	mov	r0, r7
 8003834:	f000 f9ce 	bl	8003bd4 <_free_r>
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	f1b8 0f02 	cmp.w	r8, #2
 8003846:	81a3      	strh	r3, [r4, #12]
 8003848:	d061      	beq.n	800390e <setvbuf+0x14a>
 800384a:	ab01      	add	r3, sp, #4
 800384c:	466a      	mov	r2, sp
 800384e:	4621      	mov	r1, r4
 8003850:	4638      	mov	r0, r7
 8003852:	f000 fb6b 	bl	8003f2c <__swhatbuf_r>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	4318      	orrs	r0, r3
 800385a:	81a0      	strh	r0, [r4, #12]
 800385c:	bb2d      	cbnz	r5, 80038aa <setvbuf+0xe6>
 800385e:	9d00      	ldr	r5, [sp, #0]
 8003860:	4628      	mov	r0, r5
 8003862:	f000 fa01 	bl	8003c68 <malloc>
 8003866:	4606      	mov	r6, r0
 8003868:	2800      	cmp	r0, #0
 800386a:	d152      	bne.n	8003912 <setvbuf+0x14e>
 800386c:	f8dd 9000 	ldr.w	r9, [sp]
 8003870:	45a9      	cmp	r9, r5
 8003872:	d140      	bne.n	80038f6 <setvbuf+0x132>
 8003874:	f04f 35ff 	mov.w	r5, #4294967295
 8003878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800387c:	f043 0202 	orr.w	r2, r3, #2
 8003880:	81a2      	strh	r2, [r4, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	60a2      	str	r2, [r4, #8]
 8003886:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800388a:	6022      	str	r2, [r4, #0]
 800388c:	6122      	str	r2, [r4, #16]
 800388e:	2201      	movs	r2, #1
 8003890:	6162      	str	r2, [r4, #20]
 8003892:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003894:	07d6      	lsls	r6, r2, #31
 8003896:	d404      	bmi.n	80038a2 <setvbuf+0xde>
 8003898:	0598      	lsls	r0, r3, #22
 800389a:	d402      	bmi.n	80038a2 <setvbuf+0xde>
 800389c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800389e:	f000 f997 	bl	8003bd0 <__retarget_lock_release_recursive>
 80038a2:	4628      	mov	r0, r5
 80038a4:	b003      	add	sp, #12
 80038a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038aa:	2e00      	cmp	r6, #0
 80038ac:	d0d8      	beq.n	8003860 <setvbuf+0x9c>
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	b913      	cbnz	r3, 80038b8 <setvbuf+0xf4>
 80038b2:	4638      	mov	r0, r7
 80038b4:	f7ff feea 	bl	800368c <__sinit>
 80038b8:	f1b8 0f01 	cmp.w	r8, #1
 80038bc:	bf08      	it	eq
 80038be:	89a3      	ldrheq	r3, [r4, #12]
 80038c0:	6026      	str	r6, [r4, #0]
 80038c2:	bf04      	itt	eq
 80038c4:	f043 0301 	orreq.w	r3, r3, #1
 80038c8:	81a3      	strheq	r3, [r4, #12]
 80038ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ce:	f013 0208 	ands.w	r2, r3, #8
 80038d2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80038d6:	d01e      	beq.n	8003916 <setvbuf+0x152>
 80038d8:	07d9      	lsls	r1, r3, #31
 80038da:	bf41      	itttt	mi
 80038dc:	2200      	movmi	r2, #0
 80038de:	426d      	negmi	r5, r5
 80038e0:	60a2      	strmi	r2, [r4, #8]
 80038e2:	61a5      	strmi	r5, [r4, #24]
 80038e4:	bf58      	it	pl
 80038e6:	60a5      	strpl	r5, [r4, #8]
 80038e8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038ea:	07d2      	lsls	r2, r2, #31
 80038ec:	d401      	bmi.n	80038f2 <setvbuf+0x12e>
 80038ee:	059b      	lsls	r3, r3, #22
 80038f0:	d513      	bpl.n	800391a <setvbuf+0x156>
 80038f2:	2500      	movs	r5, #0
 80038f4:	e7d5      	b.n	80038a2 <setvbuf+0xde>
 80038f6:	4648      	mov	r0, r9
 80038f8:	f000 f9b6 	bl	8003c68 <malloc>
 80038fc:	4606      	mov	r6, r0
 80038fe:	2800      	cmp	r0, #0
 8003900:	d0b8      	beq.n	8003874 <setvbuf+0xb0>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003908:	81a3      	strh	r3, [r4, #12]
 800390a:	464d      	mov	r5, r9
 800390c:	e7cf      	b.n	80038ae <setvbuf+0xea>
 800390e:	2500      	movs	r5, #0
 8003910:	e7b2      	b.n	8003878 <setvbuf+0xb4>
 8003912:	46a9      	mov	r9, r5
 8003914:	e7f5      	b.n	8003902 <setvbuf+0x13e>
 8003916:	60a2      	str	r2, [r4, #8]
 8003918:	e7e6      	b.n	80038e8 <setvbuf+0x124>
 800391a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800391c:	f000 f958 	bl	8003bd0 <__retarget_lock_release_recursive>
 8003920:	e7e7      	b.n	80038f2 <setvbuf+0x12e>
 8003922:	f04f 35ff 	mov.w	r5, #4294967295
 8003926:	e7bc      	b.n	80038a2 <setvbuf+0xde>
 8003928:	20000020 	.word	0x20000020

0800392c <__sread>:
 800392c:	b510      	push	{r4, lr}
 800392e:	460c      	mov	r4, r1
 8003930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003934:	f000 f8fc 	bl	8003b30 <_read_r>
 8003938:	2800      	cmp	r0, #0
 800393a:	bfab      	itete	ge
 800393c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800393e:	89a3      	ldrhlt	r3, [r4, #12]
 8003940:	181b      	addge	r3, r3, r0
 8003942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003946:	bfac      	ite	ge
 8003948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800394a:	81a3      	strhlt	r3, [r4, #12]
 800394c:	bd10      	pop	{r4, pc}

0800394e <__swrite>:
 800394e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003952:	461f      	mov	r7, r3
 8003954:	898b      	ldrh	r3, [r1, #12]
 8003956:	05db      	lsls	r3, r3, #23
 8003958:	4605      	mov	r5, r0
 800395a:	460c      	mov	r4, r1
 800395c:	4616      	mov	r6, r2
 800395e:	d505      	bpl.n	800396c <__swrite+0x1e>
 8003960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003964:	2302      	movs	r3, #2
 8003966:	2200      	movs	r2, #0
 8003968:	f000 f8d0 	bl	8003b0c <_lseek_r>
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003976:	81a3      	strh	r3, [r4, #12]
 8003978:	4632      	mov	r2, r6
 800397a:	463b      	mov	r3, r7
 800397c:	4628      	mov	r0, r5
 800397e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003982:	f000 b8e7 	b.w	8003b54 <_write_r>

08003986 <__sseek>:
 8003986:	b510      	push	{r4, lr}
 8003988:	460c      	mov	r4, r1
 800398a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800398e:	f000 f8bd 	bl	8003b0c <_lseek_r>
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	bf15      	itete	ne
 8003998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800399a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800399e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80039a2:	81a3      	strheq	r3, [r4, #12]
 80039a4:	bf18      	it	ne
 80039a6:	81a3      	strhne	r3, [r4, #12]
 80039a8:	bd10      	pop	{r4, pc}

080039aa <__sclose>:
 80039aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ae:	f000 b89d 	b.w	8003aec <_close_r>

080039b2 <__swbuf_r>:
 80039b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b4:	460e      	mov	r6, r1
 80039b6:	4614      	mov	r4, r2
 80039b8:	4605      	mov	r5, r0
 80039ba:	b118      	cbz	r0, 80039c4 <__swbuf_r+0x12>
 80039bc:	6a03      	ldr	r3, [r0, #32]
 80039be:	b90b      	cbnz	r3, 80039c4 <__swbuf_r+0x12>
 80039c0:	f7ff fe64 	bl	800368c <__sinit>
 80039c4:	69a3      	ldr	r3, [r4, #24]
 80039c6:	60a3      	str	r3, [r4, #8]
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	071a      	lsls	r2, r3, #28
 80039cc:	d501      	bpl.n	80039d2 <__swbuf_r+0x20>
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	b943      	cbnz	r3, 80039e4 <__swbuf_r+0x32>
 80039d2:	4621      	mov	r1, r4
 80039d4:	4628      	mov	r0, r5
 80039d6:	f000 f82b 	bl	8003a30 <__swsetup_r>
 80039da:	b118      	cbz	r0, 80039e4 <__swbuf_r+0x32>
 80039dc:	f04f 37ff 	mov.w	r7, #4294967295
 80039e0:	4638      	mov	r0, r7
 80039e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	6922      	ldr	r2, [r4, #16]
 80039e8:	1a98      	subs	r0, r3, r2
 80039ea:	6963      	ldr	r3, [r4, #20]
 80039ec:	b2f6      	uxtb	r6, r6
 80039ee:	4283      	cmp	r3, r0
 80039f0:	4637      	mov	r7, r6
 80039f2:	dc05      	bgt.n	8003a00 <__swbuf_r+0x4e>
 80039f4:	4621      	mov	r1, r4
 80039f6:	4628      	mov	r0, r5
 80039f8:	f000 fa70 	bl	8003edc <_fflush_r>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d1ed      	bne.n	80039dc <__swbuf_r+0x2a>
 8003a00:	68a3      	ldr	r3, [r4, #8]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	60a3      	str	r3, [r4, #8]
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	6022      	str	r2, [r4, #0]
 8003a0c:	701e      	strb	r6, [r3, #0]
 8003a0e:	6962      	ldr	r2, [r4, #20]
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d004      	beq.n	8003a20 <__swbuf_r+0x6e>
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	07db      	lsls	r3, r3, #31
 8003a1a:	d5e1      	bpl.n	80039e0 <__swbuf_r+0x2e>
 8003a1c:	2e0a      	cmp	r6, #10
 8003a1e:	d1df      	bne.n	80039e0 <__swbuf_r+0x2e>
 8003a20:	4621      	mov	r1, r4
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 fa5a 	bl	8003edc <_fflush_r>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d0d9      	beq.n	80039e0 <__swbuf_r+0x2e>
 8003a2c:	e7d6      	b.n	80039dc <__swbuf_r+0x2a>
	...

08003a30 <__swsetup_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <__swsetup_r+0xa8>)
 8003a34:	4605      	mov	r5, r0
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	460c      	mov	r4, r1
 8003a3a:	b118      	cbz	r0, 8003a44 <__swsetup_r+0x14>
 8003a3c:	6a03      	ldr	r3, [r0, #32]
 8003a3e:	b90b      	cbnz	r3, 8003a44 <__swsetup_r+0x14>
 8003a40:	f7ff fe24 	bl	800368c <__sinit>
 8003a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a48:	0719      	lsls	r1, r3, #28
 8003a4a:	d422      	bmi.n	8003a92 <__swsetup_r+0x62>
 8003a4c:	06da      	lsls	r2, r3, #27
 8003a4e:	d407      	bmi.n	8003a60 <__swsetup_r+0x30>
 8003a50:	2209      	movs	r2, #9
 8003a52:	602a      	str	r2, [r5, #0]
 8003a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a58:	81a3      	strh	r3, [r4, #12]
 8003a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5e:	e033      	b.n	8003ac8 <__swsetup_r+0x98>
 8003a60:	0758      	lsls	r0, r3, #29
 8003a62:	d512      	bpl.n	8003a8a <__swsetup_r+0x5a>
 8003a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a66:	b141      	cbz	r1, 8003a7a <__swsetup_r+0x4a>
 8003a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a6c:	4299      	cmp	r1, r3
 8003a6e:	d002      	beq.n	8003a76 <__swsetup_r+0x46>
 8003a70:	4628      	mov	r0, r5
 8003a72:	f000 f8af 	bl	8003bd4 <_free_r>
 8003a76:	2300      	movs	r3, #0
 8003a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a80:	81a3      	strh	r3, [r4, #12]
 8003a82:	2300      	movs	r3, #0
 8003a84:	6063      	str	r3, [r4, #4]
 8003a86:	6923      	ldr	r3, [r4, #16]
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	81a3      	strh	r3, [r4, #12]
 8003a92:	6923      	ldr	r3, [r4, #16]
 8003a94:	b94b      	cbnz	r3, 8003aaa <__swsetup_r+0x7a>
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa0:	d003      	beq.n	8003aaa <__swsetup_r+0x7a>
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	f000 fa67 	bl	8003f78 <__smakebuf_r>
 8003aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aae:	f013 0201 	ands.w	r2, r3, #1
 8003ab2:	d00a      	beq.n	8003aca <__swsetup_r+0x9a>
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60a2      	str	r2, [r4, #8]
 8003ab8:	6962      	ldr	r2, [r4, #20]
 8003aba:	4252      	negs	r2, r2
 8003abc:	61a2      	str	r2, [r4, #24]
 8003abe:	6922      	ldr	r2, [r4, #16]
 8003ac0:	b942      	cbnz	r2, 8003ad4 <__swsetup_r+0xa4>
 8003ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ac6:	d1c5      	bne.n	8003a54 <__swsetup_r+0x24>
 8003ac8:	bd38      	pop	{r3, r4, r5, pc}
 8003aca:	0799      	lsls	r1, r3, #30
 8003acc:	bf58      	it	pl
 8003ace:	6962      	ldrpl	r2, [r4, #20]
 8003ad0:	60a2      	str	r2, [r4, #8]
 8003ad2:	e7f4      	b.n	8003abe <__swsetup_r+0x8e>
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	e7f7      	b.n	8003ac8 <__swsetup_r+0x98>
 8003ad8:	20000020 	.word	0x20000020

08003adc <memset>:
 8003adc:	4402      	add	r2, r0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <_close_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4d06      	ldr	r5, [pc, #24]	@ (8003b08 <_close_r+0x1c>)
 8003af0:	2300      	movs	r3, #0
 8003af2:	4604      	mov	r4, r0
 8003af4:	4608      	mov	r0, r1
 8003af6:	602b      	str	r3, [r5, #0]
 8003af8:	f7fd f8e1 	bl	8000cbe <_close>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d102      	bne.n	8003b06 <_close_r+0x1a>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b103      	cbz	r3, 8003b06 <_close_r+0x1a>
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	20000264 	.word	0x20000264

08003b0c <_lseek_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4d07      	ldr	r5, [pc, #28]	@ (8003b2c <_lseek_r+0x20>)
 8003b10:	4604      	mov	r4, r0
 8003b12:	4608      	mov	r0, r1
 8003b14:	4611      	mov	r1, r2
 8003b16:	2200      	movs	r2, #0
 8003b18:	602a      	str	r2, [r5, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f7fd f8f6 	bl	8000d0c <_lseek>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_lseek_r+0x1e>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_lseek_r+0x1e>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	20000264 	.word	0x20000264

08003b30 <_read_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	4d07      	ldr	r5, [pc, #28]	@ (8003b50 <_read_r+0x20>)
 8003b34:	4604      	mov	r4, r0
 8003b36:	4608      	mov	r0, r1
 8003b38:	4611      	mov	r1, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	602a      	str	r2, [r5, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f7fd f884 	bl	8000c4c <_read>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d102      	bne.n	8003b4e <_read_r+0x1e>
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	b103      	cbz	r3, 8003b4e <_read_r+0x1e>
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	20000264 	.word	0x20000264

08003b54 <_write_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4d07      	ldr	r5, [pc, #28]	@ (8003b74 <_write_r+0x20>)
 8003b58:	4604      	mov	r4, r0
 8003b5a:	4608      	mov	r0, r1
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	602a      	str	r2, [r5, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fd f88f 	bl	8000c86 <_write>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_write_r+0x1e>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_write_r+0x1e>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	20000264 	.word	0x20000264

08003b78 <__errno>:
 8003b78:	4b01      	ldr	r3, [pc, #4]	@ (8003b80 <__errno+0x8>)
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000020 	.word	0x20000020

08003b84 <__libc_init_array>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	4d0d      	ldr	r5, [pc, #52]	@ (8003bbc <__libc_init_array+0x38>)
 8003b88:	4c0d      	ldr	r4, [pc, #52]	@ (8003bc0 <__libc_init_array+0x3c>)
 8003b8a:	1b64      	subs	r4, r4, r5
 8003b8c:	10a4      	asrs	r4, r4, #2
 8003b8e:	2600      	movs	r6, #0
 8003b90:	42a6      	cmp	r6, r4
 8003b92:	d109      	bne.n	8003ba8 <__libc_init_array+0x24>
 8003b94:	4d0b      	ldr	r5, [pc, #44]	@ (8003bc4 <__libc_init_array+0x40>)
 8003b96:	4c0c      	ldr	r4, [pc, #48]	@ (8003bc8 <__libc_init_array+0x44>)
 8003b98:	f000 fa90 	bl	80040bc <_init>
 8003b9c:	1b64      	subs	r4, r4, r5
 8003b9e:	10a4      	asrs	r4, r4, #2
 8003ba0:	2600      	movs	r6, #0
 8003ba2:	42a6      	cmp	r6, r4
 8003ba4:	d105      	bne.n	8003bb2 <__libc_init_array+0x2e>
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bac:	4798      	blx	r3
 8003bae:	3601      	adds	r6, #1
 8003bb0:	e7ee      	b.n	8003b90 <__libc_init_array+0xc>
 8003bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb6:	4798      	blx	r3
 8003bb8:	3601      	adds	r6, #1
 8003bba:	e7f2      	b.n	8003ba2 <__libc_init_array+0x1e>
 8003bbc:	080040f8 	.word	0x080040f8
 8003bc0:	080040f8 	.word	0x080040f8
 8003bc4:	080040f8 	.word	0x080040f8
 8003bc8:	080040fc 	.word	0x080040fc

08003bcc <__retarget_lock_init_recursive>:
 8003bcc:	4770      	bx	lr

08003bce <__retarget_lock_acquire_recursive>:
 8003bce:	4770      	bx	lr

08003bd0 <__retarget_lock_release_recursive>:
 8003bd0:	4770      	bx	lr
	...

08003bd4 <_free_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	2900      	cmp	r1, #0
 8003bda:	d041      	beq.n	8003c60 <_free_r+0x8c>
 8003bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003be0:	1f0c      	subs	r4, r1, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bfb8      	it	lt
 8003be6:	18e4      	addlt	r4, r4, r3
 8003be8:	f000 f8e8 	bl	8003dbc <__malloc_lock>
 8003bec:	4a1d      	ldr	r2, [pc, #116]	@ (8003c64 <_free_r+0x90>)
 8003bee:	6813      	ldr	r3, [r2, #0]
 8003bf0:	b933      	cbnz	r3, 8003c00 <_free_r+0x2c>
 8003bf2:	6063      	str	r3, [r4, #4]
 8003bf4:	6014      	str	r4, [r2, #0]
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bfc:	f000 b8e4 	b.w	8003dc8 <__malloc_unlock>
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	d908      	bls.n	8003c16 <_free_r+0x42>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	1821      	adds	r1, r4, r0
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	bf01      	itttt	eq
 8003c0c:	6819      	ldreq	r1, [r3, #0]
 8003c0e:	685b      	ldreq	r3, [r3, #4]
 8003c10:	1809      	addeq	r1, r1, r0
 8003c12:	6021      	streq	r1, [r4, #0]
 8003c14:	e7ed      	b.n	8003bf2 <_free_r+0x1e>
 8003c16:	461a      	mov	r2, r3
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	b10b      	cbz	r3, 8003c20 <_free_r+0x4c>
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	d9fa      	bls.n	8003c16 <_free_r+0x42>
 8003c20:	6811      	ldr	r1, [r2, #0]
 8003c22:	1850      	adds	r0, r2, r1
 8003c24:	42a0      	cmp	r0, r4
 8003c26:	d10b      	bne.n	8003c40 <_free_r+0x6c>
 8003c28:	6820      	ldr	r0, [r4, #0]
 8003c2a:	4401      	add	r1, r0
 8003c2c:	1850      	adds	r0, r2, r1
 8003c2e:	4283      	cmp	r3, r0
 8003c30:	6011      	str	r1, [r2, #0]
 8003c32:	d1e0      	bne.n	8003bf6 <_free_r+0x22>
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	6053      	str	r3, [r2, #4]
 8003c3a:	4408      	add	r0, r1
 8003c3c:	6010      	str	r0, [r2, #0]
 8003c3e:	e7da      	b.n	8003bf6 <_free_r+0x22>
 8003c40:	d902      	bls.n	8003c48 <_free_r+0x74>
 8003c42:	230c      	movs	r3, #12
 8003c44:	602b      	str	r3, [r5, #0]
 8003c46:	e7d6      	b.n	8003bf6 <_free_r+0x22>
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	1821      	adds	r1, r4, r0
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	bf04      	itt	eq
 8003c50:	6819      	ldreq	r1, [r3, #0]
 8003c52:	685b      	ldreq	r3, [r3, #4]
 8003c54:	6063      	str	r3, [r4, #4]
 8003c56:	bf04      	itt	eq
 8003c58:	1809      	addeq	r1, r1, r0
 8003c5a:	6021      	streq	r1, [r4, #0]
 8003c5c:	6054      	str	r4, [r2, #4]
 8003c5e:	e7ca      	b.n	8003bf6 <_free_r+0x22>
 8003c60:	bd38      	pop	{r3, r4, r5, pc}
 8003c62:	bf00      	nop
 8003c64:	20000270 	.word	0x20000270

08003c68 <malloc>:
 8003c68:	4b02      	ldr	r3, [pc, #8]	@ (8003c74 <malloc+0xc>)
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	f000 b825 	b.w	8003cbc <_malloc_r>
 8003c72:	bf00      	nop
 8003c74:	20000020 	.word	0x20000020

08003c78 <sbrk_aligned>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8003cb8 <sbrk_aligned+0x40>)
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	6831      	ldr	r1, [r6, #0]
 8003c80:	4605      	mov	r5, r0
 8003c82:	b911      	cbnz	r1, 8003c8a <sbrk_aligned+0x12>
 8003c84:	f000 fa0a 	bl	800409c <_sbrk_r>
 8003c88:	6030      	str	r0, [r6, #0]
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f000 fa05 	bl	800409c <_sbrk_r>
 8003c92:	1c43      	adds	r3, r0, #1
 8003c94:	d103      	bne.n	8003c9e <sbrk_aligned+0x26>
 8003c96:	f04f 34ff 	mov.w	r4, #4294967295
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
 8003c9e:	1cc4      	adds	r4, r0, #3
 8003ca0:	f024 0403 	bic.w	r4, r4, #3
 8003ca4:	42a0      	cmp	r0, r4
 8003ca6:	d0f8      	beq.n	8003c9a <sbrk_aligned+0x22>
 8003ca8:	1a21      	subs	r1, r4, r0
 8003caa:	4628      	mov	r0, r5
 8003cac:	f000 f9f6 	bl	800409c <_sbrk_r>
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d1f2      	bne.n	8003c9a <sbrk_aligned+0x22>
 8003cb4:	e7ef      	b.n	8003c96 <sbrk_aligned+0x1e>
 8003cb6:	bf00      	nop
 8003cb8:	2000026c 	.word	0x2000026c

08003cbc <_malloc_r>:
 8003cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc0:	1ccd      	adds	r5, r1, #3
 8003cc2:	f025 0503 	bic.w	r5, r5, #3
 8003cc6:	3508      	adds	r5, #8
 8003cc8:	2d0c      	cmp	r5, #12
 8003cca:	bf38      	it	cc
 8003ccc:	250c      	movcc	r5, #12
 8003cce:	2d00      	cmp	r5, #0
 8003cd0:	4606      	mov	r6, r0
 8003cd2:	db01      	blt.n	8003cd8 <_malloc_r+0x1c>
 8003cd4:	42a9      	cmp	r1, r5
 8003cd6:	d904      	bls.n	8003ce2 <_malloc_r+0x26>
 8003cd8:	230c      	movs	r3, #12
 8003cda:	6033      	str	r3, [r6, #0]
 8003cdc:	2000      	movs	r0, #0
 8003cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003db8 <_malloc_r+0xfc>
 8003ce6:	f000 f869 	bl	8003dbc <__malloc_lock>
 8003cea:	f8d8 3000 	ldr.w	r3, [r8]
 8003cee:	461c      	mov	r4, r3
 8003cf0:	bb44      	cbnz	r4, 8003d44 <_malloc_r+0x88>
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f7ff ffbf 	bl	8003c78 <sbrk_aligned>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	d158      	bne.n	8003db2 <_malloc_r+0xf6>
 8003d00:	f8d8 4000 	ldr.w	r4, [r8]
 8003d04:	4627      	mov	r7, r4
 8003d06:	2f00      	cmp	r7, #0
 8003d08:	d143      	bne.n	8003d92 <_malloc_r+0xd6>
 8003d0a:	2c00      	cmp	r4, #0
 8003d0c:	d04b      	beq.n	8003da6 <_malloc_r+0xea>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	4639      	mov	r1, r7
 8003d12:	4630      	mov	r0, r6
 8003d14:	eb04 0903 	add.w	r9, r4, r3
 8003d18:	f000 f9c0 	bl	800409c <_sbrk_r>
 8003d1c:	4581      	cmp	r9, r0
 8003d1e:	d142      	bne.n	8003da6 <_malloc_r+0xea>
 8003d20:	6821      	ldr	r1, [r4, #0]
 8003d22:	1a6d      	subs	r5, r5, r1
 8003d24:	4629      	mov	r1, r5
 8003d26:	4630      	mov	r0, r6
 8003d28:	f7ff ffa6 	bl	8003c78 <sbrk_aligned>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d03a      	beq.n	8003da6 <_malloc_r+0xea>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	442b      	add	r3, r5
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	f8d8 3000 	ldr.w	r3, [r8]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	bb62      	cbnz	r2, 8003d98 <_malloc_r+0xdc>
 8003d3e:	f8c8 7000 	str.w	r7, [r8]
 8003d42:	e00f      	b.n	8003d64 <_malloc_r+0xa8>
 8003d44:	6822      	ldr	r2, [r4, #0]
 8003d46:	1b52      	subs	r2, r2, r5
 8003d48:	d420      	bmi.n	8003d8c <_malloc_r+0xd0>
 8003d4a:	2a0b      	cmp	r2, #11
 8003d4c:	d917      	bls.n	8003d7e <_malloc_r+0xc2>
 8003d4e:	1961      	adds	r1, r4, r5
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	6025      	str	r5, [r4, #0]
 8003d54:	bf18      	it	ne
 8003d56:	6059      	strne	r1, [r3, #4]
 8003d58:	6863      	ldr	r3, [r4, #4]
 8003d5a:	bf08      	it	eq
 8003d5c:	f8c8 1000 	streq.w	r1, [r8]
 8003d60:	5162      	str	r2, [r4, r5]
 8003d62:	604b      	str	r3, [r1, #4]
 8003d64:	4630      	mov	r0, r6
 8003d66:	f000 f82f 	bl	8003dc8 <__malloc_unlock>
 8003d6a:	f104 000b 	add.w	r0, r4, #11
 8003d6e:	1d23      	adds	r3, r4, #4
 8003d70:	f020 0007 	bic.w	r0, r0, #7
 8003d74:	1ac2      	subs	r2, r0, r3
 8003d76:	bf1c      	itt	ne
 8003d78:	1a1b      	subne	r3, r3, r0
 8003d7a:	50a3      	strne	r3, [r4, r2]
 8003d7c:	e7af      	b.n	8003cde <_malloc_r+0x22>
 8003d7e:	6862      	ldr	r2, [r4, #4]
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	bf0c      	ite	eq
 8003d84:	f8c8 2000 	streq.w	r2, [r8]
 8003d88:	605a      	strne	r2, [r3, #4]
 8003d8a:	e7eb      	b.n	8003d64 <_malloc_r+0xa8>
 8003d8c:	4623      	mov	r3, r4
 8003d8e:	6864      	ldr	r4, [r4, #4]
 8003d90:	e7ae      	b.n	8003cf0 <_malloc_r+0x34>
 8003d92:	463c      	mov	r4, r7
 8003d94:	687f      	ldr	r7, [r7, #4]
 8003d96:	e7b6      	b.n	8003d06 <_malloc_r+0x4a>
 8003d98:	461a      	mov	r2, r3
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	d1fb      	bne.n	8003d98 <_malloc_r+0xdc>
 8003da0:	2300      	movs	r3, #0
 8003da2:	6053      	str	r3, [r2, #4]
 8003da4:	e7de      	b.n	8003d64 <_malloc_r+0xa8>
 8003da6:	230c      	movs	r3, #12
 8003da8:	6033      	str	r3, [r6, #0]
 8003daa:	4630      	mov	r0, r6
 8003dac:	f000 f80c 	bl	8003dc8 <__malloc_unlock>
 8003db0:	e794      	b.n	8003cdc <_malloc_r+0x20>
 8003db2:	6005      	str	r5, [r0, #0]
 8003db4:	e7d6      	b.n	8003d64 <_malloc_r+0xa8>
 8003db6:	bf00      	nop
 8003db8:	20000270 	.word	0x20000270

08003dbc <__malloc_lock>:
 8003dbc:	4801      	ldr	r0, [pc, #4]	@ (8003dc4 <__malloc_lock+0x8>)
 8003dbe:	f7ff bf06 	b.w	8003bce <__retarget_lock_acquire_recursive>
 8003dc2:	bf00      	nop
 8003dc4:	20000268 	.word	0x20000268

08003dc8 <__malloc_unlock>:
 8003dc8:	4801      	ldr	r0, [pc, #4]	@ (8003dd0 <__malloc_unlock+0x8>)
 8003dca:	f7ff bf01 	b.w	8003bd0 <__retarget_lock_release_recursive>
 8003dce:	bf00      	nop
 8003dd0:	20000268 	.word	0x20000268

08003dd4 <__sflush_r>:
 8003dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ddc:	0716      	lsls	r6, r2, #28
 8003dde:	4605      	mov	r5, r0
 8003de0:	460c      	mov	r4, r1
 8003de2:	d454      	bmi.n	8003e8e <__sflush_r+0xba>
 8003de4:	684b      	ldr	r3, [r1, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	dc02      	bgt.n	8003df0 <__sflush_r+0x1c>
 8003dea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	dd48      	ble.n	8003e82 <__sflush_r+0xae>
 8003df0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003df2:	2e00      	cmp	r6, #0
 8003df4:	d045      	beq.n	8003e82 <__sflush_r+0xae>
 8003df6:	2300      	movs	r3, #0
 8003df8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003dfc:	682f      	ldr	r7, [r5, #0]
 8003dfe:	6a21      	ldr	r1, [r4, #32]
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	d030      	beq.n	8003e66 <__sflush_r+0x92>
 8003e04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	0759      	lsls	r1, r3, #29
 8003e0a:	d505      	bpl.n	8003e18 <__sflush_r+0x44>
 8003e0c:	6863      	ldr	r3, [r4, #4]
 8003e0e:	1ad2      	subs	r2, r2, r3
 8003e10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e12:	b10b      	cbz	r3, 8003e18 <__sflush_r+0x44>
 8003e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e16:	1ad2      	subs	r2, r2, r3
 8003e18:	2300      	movs	r3, #0
 8003e1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e1c:	6a21      	ldr	r1, [r4, #32]
 8003e1e:	4628      	mov	r0, r5
 8003e20:	47b0      	blx	r6
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	d106      	bne.n	8003e36 <__sflush_r+0x62>
 8003e28:	6829      	ldr	r1, [r5, #0]
 8003e2a:	291d      	cmp	r1, #29
 8003e2c:	d82b      	bhi.n	8003e86 <__sflush_r+0xb2>
 8003e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed8 <__sflush_r+0x104>)
 8003e30:	410a      	asrs	r2, r1
 8003e32:	07d6      	lsls	r6, r2, #31
 8003e34:	d427      	bmi.n	8003e86 <__sflush_r+0xb2>
 8003e36:	2200      	movs	r2, #0
 8003e38:	6062      	str	r2, [r4, #4]
 8003e3a:	04d9      	lsls	r1, r3, #19
 8003e3c:	6922      	ldr	r2, [r4, #16]
 8003e3e:	6022      	str	r2, [r4, #0]
 8003e40:	d504      	bpl.n	8003e4c <__sflush_r+0x78>
 8003e42:	1c42      	adds	r2, r0, #1
 8003e44:	d101      	bne.n	8003e4a <__sflush_r+0x76>
 8003e46:	682b      	ldr	r3, [r5, #0]
 8003e48:	b903      	cbnz	r3, 8003e4c <__sflush_r+0x78>
 8003e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e4e:	602f      	str	r7, [r5, #0]
 8003e50:	b1b9      	cbz	r1, 8003e82 <__sflush_r+0xae>
 8003e52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e56:	4299      	cmp	r1, r3
 8003e58:	d002      	beq.n	8003e60 <__sflush_r+0x8c>
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	f7ff feba 	bl	8003bd4 <_free_r>
 8003e60:	2300      	movs	r3, #0
 8003e62:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e64:	e00d      	b.n	8003e82 <__sflush_r+0xae>
 8003e66:	2301      	movs	r3, #1
 8003e68:	4628      	mov	r0, r5
 8003e6a:	47b0      	blx	r6
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	1c50      	adds	r0, r2, #1
 8003e70:	d1c9      	bne.n	8003e06 <__sflush_r+0x32>
 8003e72:	682b      	ldr	r3, [r5, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0c6      	beq.n	8003e06 <__sflush_r+0x32>
 8003e78:	2b1d      	cmp	r3, #29
 8003e7a:	d001      	beq.n	8003e80 <__sflush_r+0xac>
 8003e7c:	2b16      	cmp	r3, #22
 8003e7e:	d11e      	bne.n	8003ebe <__sflush_r+0xea>
 8003e80:	602f      	str	r7, [r5, #0]
 8003e82:	2000      	movs	r0, #0
 8003e84:	e022      	b.n	8003ecc <__sflush_r+0xf8>
 8003e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e8a:	b21b      	sxth	r3, r3
 8003e8c:	e01b      	b.n	8003ec6 <__sflush_r+0xf2>
 8003e8e:	690f      	ldr	r7, [r1, #16]
 8003e90:	2f00      	cmp	r7, #0
 8003e92:	d0f6      	beq.n	8003e82 <__sflush_r+0xae>
 8003e94:	0793      	lsls	r3, r2, #30
 8003e96:	680e      	ldr	r6, [r1, #0]
 8003e98:	bf08      	it	eq
 8003e9a:	694b      	ldreq	r3, [r1, #20]
 8003e9c:	600f      	str	r7, [r1, #0]
 8003e9e:	bf18      	it	ne
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	eba6 0807 	sub.w	r8, r6, r7
 8003ea6:	608b      	str	r3, [r1, #8]
 8003ea8:	f1b8 0f00 	cmp.w	r8, #0
 8003eac:	dde9      	ble.n	8003e82 <__sflush_r+0xae>
 8003eae:	6a21      	ldr	r1, [r4, #32]
 8003eb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003eb2:	4643      	mov	r3, r8
 8003eb4:	463a      	mov	r2, r7
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	47b0      	blx	r6
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	dc08      	bgt.n	8003ed0 <__sflush_r+0xfc>
 8003ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ec6:	81a3      	strh	r3, [r4, #12]
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed0:	4407      	add	r7, r0
 8003ed2:	eba8 0800 	sub.w	r8, r8, r0
 8003ed6:	e7e7      	b.n	8003ea8 <__sflush_r+0xd4>
 8003ed8:	dfbffffe 	.word	0xdfbffffe

08003edc <_fflush_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	690b      	ldr	r3, [r1, #16]
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	b913      	cbnz	r3, 8003eec <_fflush_r+0x10>
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	4628      	mov	r0, r5
 8003eea:	bd38      	pop	{r3, r4, r5, pc}
 8003eec:	b118      	cbz	r0, 8003ef6 <_fflush_r+0x1a>
 8003eee:	6a03      	ldr	r3, [r0, #32]
 8003ef0:	b90b      	cbnz	r3, 8003ef6 <_fflush_r+0x1a>
 8003ef2:	f7ff fbcb 	bl	800368c <__sinit>
 8003ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f3      	beq.n	8003ee6 <_fflush_r+0xa>
 8003efe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f00:	07d0      	lsls	r0, r2, #31
 8003f02:	d404      	bmi.n	8003f0e <_fflush_r+0x32>
 8003f04:	0599      	lsls	r1, r3, #22
 8003f06:	d402      	bmi.n	8003f0e <_fflush_r+0x32>
 8003f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f0a:	f7ff fe60 	bl	8003bce <__retarget_lock_acquire_recursive>
 8003f0e:	4628      	mov	r0, r5
 8003f10:	4621      	mov	r1, r4
 8003f12:	f7ff ff5f 	bl	8003dd4 <__sflush_r>
 8003f16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f18:	07da      	lsls	r2, r3, #31
 8003f1a:	4605      	mov	r5, r0
 8003f1c:	d4e4      	bmi.n	8003ee8 <_fflush_r+0xc>
 8003f1e:	89a3      	ldrh	r3, [r4, #12]
 8003f20:	059b      	lsls	r3, r3, #22
 8003f22:	d4e1      	bmi.n	8003ee8 <_fflush_r+0xc>
 8003f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f26:	f7ff fe53 	bl	8003bd0 <__retarget_lock_release_recursive>
 8003f2a:	e7dd      	b.n	8003ee8 <_fflush_r+0xc>

08003f2c <__swhatbuf_r>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	460c      	mov	r4, r1
 8003f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f34:	2900      	cmp	r1, #0
 8003f36:	b096      	sub	sp, #88	@ 0x58
 8003f38:	4615      	mov	r5, r2
 8003f3a:	461e      	mov	r6, r3
 8003f3c:	da0d      	bge.n	8003f5a <__swhatbuf_r+0x2e>
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f44:	f04f 0100 	mov.w	r1, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2340      	movne	r3, #64	@ 0x40
 8003f4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003f50:	2000      	movs	r0, #0
 8003f52:	6031      	str	r1, [r6, #0]
 8003f54:	602b      	str	r3, [r5, #0]
 8003f56:	b016      	add	sp, #88	@ 0x58
 8003f58:	bd70      	pop	{r4, r5, r6, pc}
 8003f5a:	466a      	mov	r2, sp
 8003f5c:	f000 f87c 	bl	8004058 <_fstat_r>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	dbec      	blt.n	8003f3e <__swhatbuf_r+0x12>
 8003f64:	9901      	ldr	r1, [sp, #4]
 8003f66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003f6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003f6e:	4259      	negs	r1, r3
 8003f70:	4159      	adcs	r1, r3
 8003f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f76:	e7eb      	b.n	8003f50 <__swhatbuf_r+0x24>

08003f78 <__smakebuf_r>:
 8003f78:	898b      	ldrh	r3, [r1, #12]
 8003f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f7c:	079d      	lsls	r5, r3, #30
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	d507      	bpl.n	8003f94 <__smakebuf_r+0x1c>
 8003f84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	6163      	str	r3, [r4, #20]
 8003f90:	b003      	add	sp, #12
 8003f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f94:	ab01      	add	r3, sp, #4
 8003f96:	466a      	mov	r2, sp
 8003f98:	f7ff ffc8 	bl	8003f2c <__swhatbuf_r>
 8003f9c:	9f00      	ldr	r7, [sp, #0]
 8003f9e:	4605      	mov	r5, r0
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f7ff fe8a 	bl	8003cbc <_malloc_r>
 8003fa8:	b948      	cbnz	r0, 8003fbe <__smakebuf_r+0x46>
 8003faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fae:	059a      	lsls	r2, r3, #22
 8003fb0:	d4ee      	bmi.n	8003f90 <__smakebuf_r+0x18>
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	f043 0302 	orr.w	r3, r3, #2
 8003fba:	81a3      	strh	r3, [r4, #12]
 8003fbc:	e7e2      	b.n	8003f84 <__smakebuf_r+0xc>
 8003fbe:	89a3      	ldrh	r3, [r4, #12]
 8003fc0:	6020      	str	r0, [r4, #0]
 8003fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc6:	81a3      	strh	r3, [r4, #12]
 8003fc8:	9b01      	ldr	r3, [sp, #4]
 8003fca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003fce:	b15b      	cbz	r3, 8003fe8 <__smakebuf_r+0x70>
 8003fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f000 f851 	bl	800407c <_isatty_r>
 8003fda:	b128      	cbz	r0, 8003fe8 <__smakebuf_r+0x70>
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	431d      	orrs	r5, r3
 8003fec:	81a5      	strh	r5, [r4, #12]
 8003fee:	e7cf      	b.n	8003f90 <__smakebuf_r+0x18>

08003ff0 <_putc_r>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	b118      	cbz	r0, 8004002 <_putc_r+0x12>
 8003ffa:	6a03      	ldr	r3, [r0, #32]
 8003ffc:	b90b      	cbnz	r3, 8004002 <_putc_r+0x12>
 8003ffe:	f7ff fb45 	bl	800368c <__sinit>
 8004002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004004:	07d8      	lsls	r0, r3, #31
 8004006:	d405      	bmi.n	8004014 <_putc_r+0x24>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	0599      	lsls	r1, r3, #22
 800400c:	d402      	bmi.n	8004014 <_putc_r+0x24>
 800400e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004010:	f7ff fddd 	bl	8003bce <__retarget_lock_acquire_recursive>
 8004014:	68a3      	ldr	r3, [r4, #8]
 8004016:	3b01      	subs	r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	60a3      	str	r3, [r4, #8]
 800401c:	da05      	bge.n	800402a <_putc_r+0x3a>
 800401e:	69a2      	ldr	r2, [r4, #24]
 8004020:	4293      	cmp	r3, r2
 8004022:	db12      	blt.n	800404a <_putc_r+0x5a>
 8004024:	b2eb      	uxtb	r3, r5
 8004026:	2b0a      	cmp	r3, #10
 8004028:	d00f      	beq.n	800404a <_putc_r+0x5a>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	6022      	str	r2, [r4, #0]
 8004030:	701d      	strb	r5, [r3, #0]
 8004032:	b2ed      	uxtb	r5, r5
 8004034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004036:	07da      	lsls	r2, r3, #31
 8004038:	d405      	bmi.n	8004046 <_putc_r+0x56>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	059b      	lsls	r3, r3, #22
 800403e:	d402      	bmi.n	8004046 <_putc_r+0x56>
 8004040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004042:	f7ff fdc5 	bl	8003bd0 <__retarget_lock_release_recursive>
 8004046:	4628      	mov	r0, r5
 8004048:	bd70      	pop	{r4, r5, r6, pc}
 800404a:	4629      	mov	r1, r5
 800404c:	4622      	mov	r2, r4
 800404e:	4630      	mov	r0, r6
 8004050:	f7ff fcaf 	bl	80039b2 <__swbuf_r>
 8004054:	4605      	mov	r5, r0
 8004056:	e7ed      	b.n	8004034 <_putc_r+0x44>

08004058 <_fstat_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	4d07      	ldr	r5, [pc, #28]	@ (8004078 <_fstat_r+0x20>)
 800405c:	2300      	movs	r3, #0
 800405e:	4604      	mov	r4, r0
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	602b      	str	r3, [r5, #0]
 8004066:	f7fc fe36 	bl	8000cd6 <_fstat>
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	d102      	bne.n	8004074 <_fstat_r+0x1c>
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	b103      	cbz	r3, 8004074 <_fstat_r+0x1c>
 8004072:	6023      	str	r3, [r4, #0]
 8004074:	bd38      	pop	{r3, r4, r5, pc}
 8004076:	bf00      	nop
 8004078:	20000264 	.word	0x20000264

0800407c <_isatty_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4d06      	ldr	r5, [pc, #24]	@ (8004098 <_isatty_r+0x1c>)
 8004080:	2300      	movs	r3, #0
 8004082:	4604      	mov	r4, r0
 8004084:	4608      	mov	r0, r1
 8004086:	602b      	str	r3, [r5, #0]
 8004088:	f7fc fe35 	bl	8000cf6 <_isatty>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_isatty_r+0x1a>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	b103      	cbz	r3, 8004096 <_isatty_r+0x1a>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	20000264 	.word	0x20000264

0800409c <_sbrk_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4d06      	ldr	r5, [pc, #24]	@ (80040b8 <_sbrk_r+0x1c>)
 80040a0:	2300      	movs	r3, #0
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	602b      	str	r3, [r5, #0]
 80040a8:	f7fc fe3e 	bl	8000d28 <_sbrk>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_sbrk_r+0x1a>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_sbrk_r+0x1a>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	20000264 	.word	0x20000264

080040bc <_init>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	bf00      	nop
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr

080040c8 <_fini>:
 80040c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ca:	bf00      	nop
 80040cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ce:	bc08      	pop	{r3}
 80040d0:	469e      	mov	lr, r3
 80040d2:	4770      	bx	lr
