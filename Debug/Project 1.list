
Project 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d74  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003f0c  08003f0c  00004f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f28  08003f28  00005074  2**0
                  CONTENTS
  4 .ARM          00000008  08003f28  08003f28  00004f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f30  08003f30  00005074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f30  08003f30  00004f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f34  08003f34  00004f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08003f38  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000074  08003fac  00005074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003fac  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee35  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ab  00000000  00000000  00013ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00016388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a67  00000000  00000000  000170f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b13  00000000  00000000  00017b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001094e  00000000  00000000  0002f672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090457  00000000  00000000  0003ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0417  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e40  00000000  00000000  000d045c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d429c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ef4 	.word	0x08003ef4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08003ef4 	.word	0x08003ef4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <resetBuffer>:
uint8_t one = 0x0f;

/* resetBuffer
 *
 */
void resetBuffer(char * buffer){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	for(int x=0; x<256; x++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e007      	b.n	80004e6 <resetBuffer+0x1e>
		buffer[x] = 0;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4413      	add	r3, r2
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
	for(int x=0; x<256; x++){
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2bff      	cmp	r3, #255	@ 0xff
 80004ea:	ddf4      	ble.n	80004d6 <resetBuffer+0xe>
	}
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <sendData>:
/*
 *  sends each byte as 2 bits
 *  baud rate = 8000 -> each half byte sends in 500us to act like one bit
 *
 */
void sendData(char * data, int length){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
	dataLength = (uint8_t) length;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <sendData+0x88>)
 800050c:	701a      	strb	r2, [r3, #0]

	//HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState); w/ hal delay
	//other option

	//send preamble
	for(int x = 0; x < byteLenght; x++){
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	e02b      	b.n	800056c <sendData+0x70>
		if(((preamble>>x) & 0x01) == 0b1){
 8000514:	4b1c      	ldr	r3, [pc, #112]	@ (8000588 <sendData+0x8c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	fa42 f303 	asr.w	r3, r2, r3
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00a      	beq.n	800053e <sendData+0x42>
			printf("1");
 8000528:	2031      	movs	r0, #49	@ 0x31
 800052a:	f003 f801 	bl	8003530 <putchar>
			HAL_UART_Transmit(&huart2, (uint8_t *)&one, 1, HAL_MAX_DELAY);
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	2201      	movs	r2, #1
 8000534:	4915      	ldr	r1, [pc, #84]	@ (800058c <sendData+0x90>)
 8000536:	4816      	ldr	r0, [pc, #88]	@ (8000590 <sendData+0x94>)
 8000538:	f001 fefa 	bl	8002330 <HAL_UART_Transmit>
 800053c:	e013      	b.n	8000566 <sendData+0x6a>
		} else if(((preamble>>x) & 0b1) == 0b0){
 800053e:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <sendData+0x8c>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	fa42 f303 	asr.w	r3, r2, r3
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d109      	bne.n	8000566 <sendData+0x6a>
			printf("0");
 8000552:	2030      	movs	r0, #48	@ 0x30
 8000554:	f002 ffec 	bl	8003530 <putchar>
			HAL_UART_Transmit(&huart2, (uint8_t *)&zero, 1, HAL_MAX_DELAY);
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	2201      	movs	r2, #1
 800055e:	490d      	ldr	r1, [pc, #52]	@ (8000594 <sendData+0x98>)
 8000560:	480b      	ldr	r0, [pc, #44]	@ (8000590 <sendData+0x94>)
 8000562:	f001 fee5 	bl	8002330 <HAL_UART_Transmit>
	for(int x = 0; x < byteLenght; x++){
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <sendData+0x9c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	429a      	cmp	r2, r3
 8000574:	dbce      	blt.n	8000514 <sendData+0x18>
		}
	}
	printf("\n");
 8000576:	200a      	movs	r0, #10
 8000578:	f002 ffda 	bl	8003530 <putchar>
			} else if((data[x]>>y) && 0x01 == 0b1){
				HAL_UART_Transmit(&huart2, (uint8_t *)&zero, 1, HAL_MAX_DELAY);
			}
		}
	}*/
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000090 	.word	0x20000090
 8000588:	20000000 	.word	0x20000000
 800058c:	20000009 	.word	0x20000009
 8000590:	200000e0 	.word	0x200000e0
 8000594:	20000008 	.word	0x20000008
 8000598:	20000004 	.word	0x20000004

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <MX_GPIO_Init+0xd0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a2c      	ldr	r2, [pc, #176]	@ (800066c <MX_GPIO_Init+0xd0>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b2a      	ldr	r3, [pc, #168]	@ (800066c <MX_GPIO_Init+0xd0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	4b26      	ldr	r3, [pc, #152]	@ (800066c <MX_GPIO_Init+0xd0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a25      	ldr	r2, [pc, #148]	@ (800066c <MX_GPIO_Init+0xd0>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b23      	ldr	r3, [pc, #140]	@ (800066c <MX_GPIO_Init+0xd0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <MX_GPIO_Init+0xd0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a1e      	ldr	r2, [pc, #120]	@ (800066c <MX_GPIO_Init+0xd0>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <MX_GPIO_Init+0xd0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_GPIO_Init+0xd0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a17      	ldr	r2, [pc, #92]	@ (800066c <MX_GPIO_Init+0xd0>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <MX_GPIO_Init+0xd0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	4812      	ldr	r0, [pc, #72]	@ (8000670 <MX_GPIO_Init+0xd4>)
 8000628:	f000 feda 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000632:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	480c      	ldr	r0, [pc, #48]	@ (8000674 <MX_GPIO_Init+0xd8>)
 8000644:	f000 fd48 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000648:	2320      	movs	r3, #32
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_GPIO_Init+0xd4>)
 8000660:	f000 fd3a 	bl	80010d8 <HAL_GPIO_Init>

}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	@ 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000
 8000674:	40020800 	.word	0x40020800

08000678 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000680:	1d39      	adds	r1, r7, #4
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	2201      	movs	r2, #1
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <__io_putchar+0x20>)
 800068a:	f001 fe51 	bl	8002330 <HAL_UART_Transmit>
return ch;
 800068e:	687b      	ldr	r3, [r7, #4]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000e0 	.word	0x200000e0

0800069c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
uint8_t ch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	71fb      	strb	r3, [r7, #7]
__HAL_UART_CLEAR_OREFLAG(&huart2);
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <__io_getchar+0x38>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <__io_getchar+0x38>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]
HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006bc:	1df9      	adds	r1, r7, #7
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	2201      	movs	r2, #1
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <__io_getchar+0x38>)
 80006c6:	f001 febe 	bl	8002446 <HAL_UART_Receive>
return ch;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000e0 	.word	0x200000e0

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0c4      	sub	sp, #272	@ 0x110
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 80006de:	4b3c      	ldr	r3, [pc, #240]	@ (80007d0 <main+0xf8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6858      	ldr	r0, [r3, #4]
 80006e4:	2300      	movs	r3, #0
 80006e6:	2202      	movs	r2, #2
 80006e8:	2100      	movs	r1, #0
 80006ea:	f002 ff87 	bl	80035fc <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fb3d 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f873 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f7ff ff51 	bl	800059c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fa:	f000 fa93 	bl	8000c24 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char rxString[255];
  int x = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  {
	  uint8_t data;
	  HAL_StatusTypeDef rx;

	  //idle at 1
	  HAL_GPIO_WritePin(GPIOA, TX_PIN_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2104      	movs	r1, #4
 8000708:	4832      	ldr	r0, [pc, #200]	@ (80007d4 <main+0xfc>)
 800070a:	f000 fe69 	bl	80013e0 <HAL_GPIO_WritePin>

	 // HAL_UART_Receive_IT(huart, pData, Size)

	  /*if(HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_RX){
		 while(rx == HAL_BUSY){*/
			  rx = HAL_UART_Receive(&huart2, &data, 1, HAL_MAX_DELAY);
 800070e:	1df9      	adds	r1, r7, #7
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	2201      	movs	r2, #1
 8000716:	4830      	ldr	r0, [pc, #192]	@ (80007d8 <main+0x100>)
 8000718:	f001 fe95 	bl	8002446 <HAL_UART_Receive>
 800071c:	4603      	mov	r3, r0
 800071e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

			  if(data == 13 || data == 10){
 8000722:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000726:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b0d      	cmp	r3, #13
 800072e:	d006      	beq.n	800073e <main+0x66>
 8000730:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000734:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b0a      	cmp	r3, #10
 800073c:	d12c      	bne.n	8000798 <main+0xc0>
				  for(int y=0; y<x; y++){
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000744:	e00f      	b.n	8000766 <main+0x8e>
					  printf("%c", rxString[y]);
 8000746:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800074a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800074e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f002 feea 	bl	8003530 <putchar>
				  for(int y=0; y<x; y++){
 800075c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000760:	3301      	adds	r3, #1
 8000762:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000766:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800076a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800076e:	429a      	cmp	r2, r3
 8000770:	dbe9      	blt.n	8000746 <main+0x6e>
				  }
				  sendData(rxString, x);
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff febe 	bl	80004fc <sendData>
				  resetBuffer(rxString);
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe9f 	bl	80004c8 <resetBuffer>
				  printf("\n");
 800078a:	200a      	movs	r0, #10
 800078c:	f002 fed0 	bl	8003530 <putchar>
				  x=0;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000796:	e012      	b.n	80007be <main+0xe6>
			  } else {
				  rxString[x] = data;
 8000798:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800079c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80007a0:	7819      	ldrb	r1, [r3, #0]
 80007a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007a6:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80007aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007ae:	4413      	add	r3, r2
 80007b0:	460a      	mov	r2, r1
 80007b2:	701a      	strb	r2, [r3, #0]
				  x++;
 80007b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007b8:	3301      	adds	r3, #1
 80007ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			  }
			  //printf("%c - %d\n", rxString[x], x);

			  if(x > 255){
 80007be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007c2:	2bff      	cmp	r3, #255	@ 0xff
 80007c4:	dd9e      	ble.n	8000704 <main+0x2c>
				  x=0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  {
 80007cc:	e79a      	b.n	8000704 <main+0x2c>
 80007ce:	bf00      	nop
 80007d0:	20000024 	.word	0x20000024
 80007d4:	40020000 	.word	0x40020000
 80007d8:	200000e0 	.word	0x200000e0

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	@ 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	2230      	movs	r2, #48	@ 0x30
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 f892 	bl	8003914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <SystemClock_Config+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	4a27      	ldr	r2, [pc, #156]	@ (80008a8 <SystemClock_Config+0xcc>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <SystemClock_Config+0xcc>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <SystemClock_Config+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <SystemClock_Config+0xd0>)
 8000826:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <SystemClock_Config+0xd0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2310      	movs	r3, #16
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800084c:	2310      	movs	r3, #16
 800084e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000850:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000854:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000856:	2304      	movs	r3, #4
 8000858:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800085a:	2304      	movs	r3, #4
 800085c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fdd6 	bl	8001414 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800086e:	f000 f83f 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000882:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2102      	movs	r1, #2
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f838 	bl	8001904 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800089a:	f000 f829 	bl	80008f0 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	@ 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	printf("hi\n");
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <HAL_UART_RxCpltCallback+0x18>)
 80008ba:	f002 fe97 	bl	80035ec <puts>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	08003f0c 	.word	0x08003f0c

080008cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d101      	bne.n	80008e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008de:	f000 fa67 	bl	8000db0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40010000 	.word	0x40010000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093a:	2007      	movs	r0, #7
 800093c:	f000 fb05 	bl	8000f4a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	@ 0x30
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <HAL_InitTick+0xd0>)
 8000962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000964:	4a2d      	ldr	r2, [pc, #180]	@ (8000a1c <HAL_InitTick+0xd0>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6453      	str	r3, [r2, #68]	@ 0x44
 800096c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a1c <HAL_InitTick+0xd0>)
 800096e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 020c 	add.w	r2, r7, #12
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f9de 	bl	8001d44 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000988:	f001 f9c8 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 800098c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800098e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000990:	4a23      	ldr	r2, [pc, #140]	@ (8000a20 <HAL_InitTick+0xd4>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	0c9b      	lsrs	r3, r3, #18
 8000998:	3b01      	subs	r3, #1
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800099c:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <HAL_InitTick+0xd8>)
 800099e:	4a22      	ldr	r2, [pc, #136]	@ (8000a28 <HAL_InitTick+0xdc>)
 80009a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009c2:	4818      	ldr	r0, [pc, #96]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009c4:	f001 f9f0 	bl	8001da8 <HAL_TIM_Base_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d11b      	bne.n	8000a0e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009d6:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009d8:	f001 fa40 	bl	8001e5c <HAL_TIM_Base_Start_IT>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d111      	bne.n	8000a0e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009ea:	2019      	movs	r0, #25
 80009ec:	f000 fad4 	bl	8000f98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d808      	bhi.n	8000a08 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009f6:	2200      	movs	r2, #0
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	2019      	movs	r0, #25
 80009fc:	f000 fab0 	bl	8000f60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <HAL_InitTick+0xe0>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e002      	b.n	8000a0e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	431bde83 	.word	0x431bde83
 8000a24:	20000094 	.word	0x20000094
 8000a28:	40010000 	.word	0x40010000
 8000a2c:	20000010 	.word	0x20000010

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a96:	f001 fa43 	bl	8001f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000094 	.word	0x20000094

08000aa4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <USART2_IRQHandler+0x10>)
 8000aaa:	f001 fd63 	bl	8002574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000e0 	.word	0x200000e0

08000ab8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e00a      	b.n	8000ae0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aca:	f7ff fde7 	bl	800069c <__io_getchar>
 8000ace:	4601      	mov	r1, r0
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	b2ca      	uxtb	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf0      	blt.n	8000aca <_read+0x12>
  }

  return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fdb3 	bl	8000678 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf1      	blt.n	8000b04 <_write+0x12>
  }
  return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_close>:

int _close(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b52:	605a      	str	r2, [r3, #4]
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f002 fef4 	bl	80039b0 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20020000 	.word	0x20020000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	200000dc 	.word	0x200000dc
 8000bfc:	20000278 	.word	0x20000278

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <MX_USART2_UART_Init+0x50>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 8000;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	f001 fb18 	bl	8002290 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c66:	f7ff fe43 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000e0 	.word	0x200000e0
 8000c74:	40004400 	.word	0x40004400

08000c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a1d      	ldr	r2, [pc, #116]	@ (8000d0c <HAL_UART_MspInit+0x94>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d133      	bne.n	8000d02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <HAL_UART_MspInit+0x98>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d10 <HAL_UART_MspInit+0x98>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <HAL_UART_MspInit+0x98>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <HAL_UART_MspInit+0x98>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a14      	ldr	r2, [pc, #80]	@ (8000d10 <HAL_UART_MspInit+0x98>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_UART_MspInit+0x98>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_PIN_Pin|RX_PIN_Pin;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4809      	ldr	r0, [pc, #36]	@ (8000d14 <HAL_UART_MspInit+0x9c>)
 8000cee:	f000 f9f3 	bl	80010d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2026      	movs	r0, #38	@ 0x26
 8000cf8:	f000 f932 	bl	8000f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cfc:	2026      	movs	r0, #38	@ 0x26
 8000cfe:	f000 f94b 	bl	8000f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	@ 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1c:	f7ff ff70 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	@ (8000d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	@ (8000d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f002 fe39 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fcc5 	bl	80006d8 <main>
  bx  lr    
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d5c:	08003f38 	.word	0x08003f38
  ldr r2, =_sbss
 8000d60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d64:	20000278 	.word	0x20000278

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d70:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f8d8 	bl	8000f4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fdd6 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fdac 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000014 	.word	0x20000014
 8000dd4:	20000128 	.word	0x20000128

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000128 	.word	0x20000128

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	@ (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	@ (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff4c 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f72:	f7ff ff61 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000f76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	6978      	ldr	r0, [r7, #20]
 8000f7e:	f7ff ffb1 	bl	8000ee4 <NVIC_EncodePriority>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff80 	bl	8000e90 <__NVIC_SetPriority>
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff54 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fc2:	f7ff ff09 	bl	8000dd8 <HAL_GetTick>
 8000fc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d008      	beq.n	8000fe6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2280      	movs	r2, #128	@ 0x80
 8000fd8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e052      	b.n	800108c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0216 	bic.w	r2, r2, #22
 8000ff4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	695a      	ldr	r2, [r3, #20]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001004:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <HAL_DMA_Abort+0x62>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0208 	bic.w	r2, r2, #8
 8001024:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001036:	e013      	b.n	8001060 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001038:	f7ff fece 	bl	8000dd8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b05      	cmp	r3, #5
 8001044:	d90c      	bls.n	8001060 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2220      	movs	r2, #32
 800104a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2203      	movs	r2, #3
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e015      	b.n	800108c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1e4      	bne.n	8001038 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001072:	223f      	movs	r2, #63	@ 0x3f
 8001074:	409a      	lsls	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d004      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2280      	movs	r2, #128	@ 0x80
 80010ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00c      	b.n	80010cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2205      	movs	r2, #5
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e159      	b.n	80013a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 8148 	bne.w	80013a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d005      	beq.n	800112a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001126:	2b02      	cmp	r3, #2
 8001128:	d130      	bne.n	800118c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	f003 0201 	and.w	r2, r3, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b03      	cmp	r3, #3
 8001196:	d017      	beq.n	80011c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d123      	bne.n	800121c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	69b9      	ldr	r1, [r7, #24]
 8001218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0203 	and.w	r2, r3, #3
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80a2 	beq.w	80013a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b57      	ldr	r3, [pc, #348]	@ (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a56      	ldr	r2, [pc, #344]	@ (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b54      	ldr	r3, [pc, #336]	@ (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127a:	4a52      	ldr	r2, [pc, #328]	@ (80013c4 <HAL_GPIO_Init+0x2ec>)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a49      	ldr	r2, [pc, #292]	@ (80013c8 <HAL_GPIO_Init+0x2f0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0x202>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a48      	ldr	r2, [pc, #288]	@ (80013cc <HAL_GPIO_Init+0x2f4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x1fe>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a47      	ldr	r2, [pc, #284]	@ (80013d0 <HAL_GPIO_Init+0x2f8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x1fa>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a46      	ldr	r2, [pc, #280]	@ (80013d4 <HAL_GPIO_Init+0x2fc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x1f6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a45      	ldr	r2, [pc, #276]	@ (80013d8 <HAL_GPIO_Init+0x300>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x1f2>
 80012c6:	2304      	movs	r3, #4
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012ca:	2307      	movs	r3, #7
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	@ (80013c4 <HAL_GPIO_Init+0x2ec>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b38      	ldr	r3, [pc, #224]	@ (80013dc <HAL_GPIO_Init+0x304>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a2f      	ldr	r2, [pc, #188]	@ (80013dc <HAL_GPIO_Init+0x304>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <HAL_GPIO_Init+0x304>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a24      	ldr	r2, [pc, #144]	@ (80013dc <HAL_GPIO_Init+0x304>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134e:	4b23      	ldr	r3, [pc, #140]	@ (80013dc <HAL_GPIO_Init+0x304>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001372:	4a1a      	ldr	r2, [pc, #104]	@ (80013dc <HAL_GPIO_Init+0x304>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <HAL_GPIO_Init+0x304>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139c:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <HAL_GPIO_Init+0x304>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f aea2 	bls.w	80010f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40013c00 	.word	0x40013c00

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e267      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d075      	beq.n	800151e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001432:	4b88      	ldr	r3, [pc, #544]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b04      	cmp	r3, #4
 800143c:	d00c      	beq.n	8001458 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143e:	4b85      	ldr	r3, [pc, #532]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001446:	2b08      	cmp	r3, #8
 8001448:	d112      	bne.n	8001470 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144a:	4b82      	ldr	r3, [pc, #520]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001456:	d10b      	bne.n	8001470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	4b7e      	ldr	r3, [pc, #504]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d05b      	beq.n	800151c <HAL_RCC_OscConfig+0x108>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d157      	bne.n	800151c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e242      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x74>
 800147a:	4b76      	ldr	r3, [pc, #472]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a75      	ldr	r2, [pc, #468]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01d      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x98>
 8001492:	4b70      	ldr	r3, [pc, #448]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a6f      	ldr	r2, [pc, #444]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b6d      	ldr	r3, [pc, #436]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 80014ac:	4b69      	ldr	r3, [pc, #420]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a68      	ldr	r2, [pc, #416]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b66      	ldr	r3, [pc, #408]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a65      	ldr	r2, [pc, #404]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fc84 	bl	8000dd8 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fc80 	bl	8000dd8 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e207      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0xc0>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc70 	bl	8000dd8 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fc6c 	bl	8000dd8 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1f3      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	4b51      	ldr	r3, [pc, #324]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0xe8>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d063      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800152a:	4b4a      	ldr	r3, [pc, #296]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001536:	4b47      	ldr	r3, [pc, #284]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800153e:	2b08      	cmp	r3, #8
 8001540:	d11c      	bne.n	800157c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001542:	4b44      	ldr	r3, [pc, #272]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x152>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e1c7      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b3b      	ldr	r3, [pc, #236]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4937      	ldr	r1, [pc, #220]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	e03a      	b.n	80015f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001584:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <HAL_RCC_OscConfig+0x244>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fc25 	bl	8000dd8 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fc21 	bl	8000dd8 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1a8      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4925      	ldr	r1, [pc, #148]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e015      	b.n	80015f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <HAL_RCC_OscConfig+0x244>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc04 	bl	8000dd8 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fc00 	bl	8000dd8 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e187      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d036      	beq.n	800166c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d016      	beq.n	8001634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_RCC_OscConfig+0x248>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fbe4 	bl	8000dd8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fbe0 	bl	8000dd8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e167      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x200>
 8001632:	e01b      	b.n	800166c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_RCC_OscConfig+0x248>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fbcd 	bl	8000dd8 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	e00e      	b.n	8001660 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001642:	f7ff fbc9 	bl	8000dd8 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d907      	bls.n	8001660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e150      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
 8001654:	40023800 	.word	0x40023800
 8001658:	42470000 	.word	0x42470000
 800165c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	4b88      	ldr	r3, [pc, #544]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ea      	bne.n	8001642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8097 	beq.w	80017a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b81      	ldr	r3, [pc, #516]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	4b7d      	ldr	r3, [pc, #500]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a7c      	ldr	r2, [pc, #496]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b7a      	ldr	r3, [pc, #488]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	4b77      	ldr	r3, [pc, #476]	@ (8001888 <HAL_RCC_OscConfig+0x474>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d118      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b6:	4b74      	ldr	r3, [pc, #464]	@ (8001888 <HAL_RCC_OscConfig+0x474>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a73      	ldr	r2, [pc, #460]	@ (8001888 <HAL_RCC_OscConfig+0x474>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fb89 	bl	8000dd8 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ca:	f7ff fb85 	bl	8000dd8 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e10c      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001888 <HAL_RCC_OscConfig+0x474>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x2ea>
 80016f0:	4b64      	ldr	r3, [pc, #400]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f4:	4a63      	ldr	r2, [pc, #396]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fc:	e01c      	b.n	8001738 <HAL_RCC_OscConfig+0x324>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b05      	cmp	r3, #5
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x30c>
 8001706:	4b5f      	ldr	r3, [pc, #380]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170a:	4a5e      	ldr	r2, [pc, #376]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6713      	str	r3, [r2, #112]	@ 0x70
 8001712:	4b5c      	ldr	r3, [pc, #368]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001716:	4a5b      	ldr	r2, [pc, #364]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6713      	str	r3, [r2, #112]	@ 0x70
 800171e:	e00b      	b.n	8001738 <HAL_RCC_OscConfig+0x324>
 8001720:	4b58      	ldr	r3, [pc, #352]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001724:	4a57      	ldr	r2, [pc, #348]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6713      	str	r3, [r2, #112]	@ 0x70
 800172c:	4b55      	ldr	r3, [pc, #340]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001730:	4a54      	ldr	r2, [pc, #336]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d015      	beq.n	800176c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff fb4a 	bl	8000dd8 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff fb46 	bl	8000dd8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0cb      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175e:	4b49      	ldr	r3, [pc, #292]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0ee      	beq.n	8001748 <HAL_RCC_OscConfig+0x334>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7ff fb34 	bl	8000dd8 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff fb30 	bl	8000dd8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e0b5      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178a:	4b3e      	ldr	r3, [pc, #248]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ee      	bne.n	8001774 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179c:	4b39      	ldr	r3, [pc, #228]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	4a38      	ldr	r2, [pc, #224]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80017a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a1 	beq.w	80018f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017b2:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d05c      	beq.n	8001878 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d141      	bne.n	800184a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_RCC_OscConfig+0x478>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb04 	bl	8000dd8 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff fb00 	bl	8000dd8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e087      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	4b27      	ldr	r3, [pc, #156]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69da      	ldr	r2, [r3, #28]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	019b      	lsls	r3, r3, #6
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	3b01      	subs	r3, #1
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	491b      	ldr	r1, [pc, #108]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_RCC_OscConfig+0x478>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fad9 	bl	8000dd8 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff fad5 	bl	8000dd8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e05c      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x416>
 8001848:	e054      	b.n	80018f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_RCC_OscConfig+0x478>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fac2 	bl	8000dd8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fabe 	bl	8000dd8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e045      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x444>
 8001876:	e03d      	b.n	80018f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e038      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
 8001884:	40023800 	.word	0x40023800
 8001888:	40007000 	.word	0x40007000
 800188c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_RCC_OscConfig+0x4ec>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d028      	beq.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d121      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d11a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d111      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	3b01      	subs	r3, #1
 80018da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0cc      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b68      	ldr	r3, [pc, #416]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d90c      	bls.n	8001940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b65      	ldr	r3, [pc, #404]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b63      	ldr	r3, [pc, #396]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b8      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001958:	4b59      	ldr	r3, [pc, #356]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a58      	ldr	r2, [pc, #352]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001970:	4b53      	ldr	r3, [pc, #332]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a52      	ldr	r2, [pc, #328]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800197a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b50      	ldr	r3, [pc, #320]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	494d      	ldr	r1, [pc, #308]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d044      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b47      	ldr	r3, [pc, #284]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d119      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e067      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e2:	4b37      	ldr	r3, [pc, #220]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 0203 	bic.w	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4934      	ldr	r1, [pc, #208]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f4:	f7ff f9f0 	bl	8000dd8 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7ff f9ec 	bl	8000dd8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e04f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 020c 	and.w	r2, r3, #12
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1eb      	bne.n	80019fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d20c      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4916      	ldr	r1, [pc, #88]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	490e      	ldr	r1, [pc, #56]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8a:	f000 f821 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	490a      	ldr	r1, [pc, #40]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe ff4e 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	08003f10 	.word	0x08003f10
 8001ac8:	2000000c 	.word	0x2000000c
 8001acc:	20000010 	.word	0x20000010

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad4:	b094      	sub	sp, #80	@ 0x50
 8001ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae8:	4b79      	ldr	r3, [pc, #484]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d00d      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x40>
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	f200 80e1 	bhi.w	8001cbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x34>
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b02:	e0db      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b73      	ldr	r3, [pc, #460]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b08:	e0db      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0a:	4b73      	ldr	r3, [pc, #460]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b0e:	e0d8      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b10:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d063      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b42:	4622      	mov	r2, r4
 8001b44:	462b      	mov	r3, r5
 8001b46:	f04f 0000 	mov.w	r0, #0
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	0159      	lsls	r1, r3, #5
 8001b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b54:	0150      	lsls	r0, r2, #5
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	1a51      	subs	r1, r2, r1
 8001b5e:	6139      	str	r1, [r7, #16]
 8001b60:	4629      	mov	r1, r5
 8001b62:	eb63 0301 	sbc.w	r3, r3, r1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b74:	4659      	mov	r1, fp
 8001b76:	018b      	lsls	r3, r1, #6
 8001b78:	4651      	mov	r1, sl
 8001b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b7e:	4651      	mov	r1, sl
 8001b80:	018a      	lsls	r2, r1, #6
 8001b82:	4651      	mov	r1, sl
 8001b84:	ebb2 0801 	subs.w	r8, r2, r1
 8001b88:	4659      	mov	r1, fp
 8001b8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ba2:	4690      	mov	r8, r2
 8001ba4:	4699      	mov	r9, r3
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	eb18 0303 	adds.w	r3, r8, r3
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	462b      	mov	r3, r5
 8001bb0:	eb49 0303 	adc.w	r3, r9, r3
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	024b      	lsls	r3, r1, #9
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bcc:	4621      	mov	r1, r4
 8001bce:	024a      	lsls	r2, r1, #9
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001be0:	f7fe fafa 	bl	80001d8 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4613      	mov	r3, r2
 8001bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bec:	e058      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bee:	4b38      	ldr	r3, [pc, #224]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	099b      	lsrs	r3, r3, #6
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c08:	4642      	mov	r2, r8
 8001c0a:	464b      	mov	r3, r9
 8001c0c:	f04f 0000 	mov.w	r0, #0
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	0159      	lsls	r1, r3, #5
 8001c16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c1a:	0150      	lsls	r0, r2, #5
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4641      	mov	r1, r8
 8001c22:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c26:	4649      	mov	r1, r9
 8001c28:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c40:	ebb2 040a 	subs.w	r4, r2, sl
 8001c44:	eb63 050b 	sbc.w	r5, r3, fp
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	00eb      	lsls	r3, r5, #3
 8001c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c56:	00e2      	lsls	r2, r4, #3
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	4643      	mov	r3, r8
 8001c5e:	18e3      	adds	r3, r4, r3
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	464b      	mov	r3, r9
 8001c64:	eb45 0303 	adc.w	r3, r5, r3
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c76:	4629      	mov	r1, r5
 8001c78:	028b      	lsls	r3, r1, #10
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c80:	4621      	mov	r1, r4
 8001c82:	028a      	lsls	r2, r1, #10
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	61fa      	str	r2, [r7, #28]
 8001c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c94:	f7fe faa0 	bl	80001d8 <__aeabi_uldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	0c1b      	lsrs	r3, r3, #16
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	3301      	adds	r3, #1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cba:	e002      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3750      	adds	r7, #80	@ 0x50
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	00f42400 	.word	0x00f42400
 8001cd8:	007a1200 	.word	0x007a1200

08001cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000000c 	.word	0x2000000c

08001cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf8:	f7ff fff0 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	0a9b      	lsrs	r3, r3, #10
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	@ (8001d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	08003f20 	.word	0x08003f20

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d20:	f7ff ffdc 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0b5b      	lsrs	r3, r3, #13
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	@ (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	08003f20 	.word	0x08003f20

08001d44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	220f      	movs	r2, #15
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <HAL_RCC_GetClockConfig+0x60>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0207 	and.w	r2, r3, #7
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	601a      	str	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e041      	b.n	8001e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f839 	bl	8001e46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f000 f9b2 	bl	8002150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d001      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e044      	b.n	8001efe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xb0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d018      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e9e:	d013      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xb8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xbc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a16      	ldr	r2, [pc, #88]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xc0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d010      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	e007      	b.n	8001efc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800
 8001f18:	40000c00 	.word	0x40000c00
 8001f1c:	40014000 	.word	0x40014000

08001f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d020      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01b      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0202 	mvn.w	r2, #2
 8001f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8d2 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8c4 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8d5 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d020      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0204 	mvn.w	r2, #4
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8ac 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f89e 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8af 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d020      	beq.n	800201c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0208 	mvn.w	r2, #8
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f886 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f878 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f889 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d020      	beq.n	8002068 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0210 	mvn.w	r2, #16
 8002038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2208      	movs	r2, #8
 800203e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f860 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f852 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f863 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00c      	beq.n	800208c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0201 	mvn.w	r2, #1
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe fc20 	bl	80008cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8e6 	bl	800227c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f834 	bl	800213c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00c      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0220 	mvn.w	r2, #32
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8b8 	bl	8002268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3a      	ldr	r2, [pc, #232]	@ (800224c <TIM_Base_SetConfig+0xfc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d00f      	beq.n	8002188 <TIM_Base_SetConfig+0x38>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216e:	d00b      	beq.n	8002188 <TIM_Base_SetConfig+0x38>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a37      	ldr	r2, [pc, #220]	@ (8002250 <TIM_Base_SetConfig+0x100>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <TIM_Base_SetConfig+0x38>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a36      	ldr	r2, [pc, #216]	@ (8002254 <TIM_Base_SetConfig+0x104>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0x38>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a35      	ldr	r2, [pc, #212]	@ (8002258 <TIM_Base_SetConfig+0x108>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d108      	bne.n	800219a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800218e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2b      	ldr	r2, [pc, #172]	@ (800224c <TIM_Base_SetConfig+0xfc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01b      	beq.n	80021da <TIM_Base_SetConfig+0x8a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a8:	d017      	beq.n	80021da <TIM_Base_SetConfig+0x8a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a28      	ldr	r2, [pc, #160]	@ (8002250 <TIM_Base_SetConfig+0x100>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <TIM_Base_SetConfig+0x8a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a27      	ldr	r2, [pc, #156]	@ (8002254 <TIM_Base_SetConfig+0x104>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00f      	beq.n	80021da <TIM_Base_SetConfig+0x8a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a26      	ldr	r2, [pc, #152]	@ (8002258 <TIM_Base_SetConfig+0x108>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00b      	beq.n	80021da <TIM_Base_SetConfig+0x8a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a25      	ldr	r2, [pc, #148]	@ (800225c <TIM_Base_SetConfig+0x10c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <TIM_Base_SetConfig+0x8a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a24      	ldr	r2, [pc, #144]	@ (8002260 <TIM_Base_SetConfig+0x110>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d003      	beq.n	80021da <TIM_Base_SetConfig+0x8a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a23      	ldr	r2, [pc, #140]	@ (8002264 <TIM_Base_SetConfig+0x114>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d108      	bne.n	80021ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0e      	ldr	r2, [pc, #56]	@ (800224c <TIM_Base_SetConfig+0xfc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f023 0201 	bic.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]
  }
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40014000 	.word	0x40014000
 8002260:	40014400 	.word	0x40014400
 8002264:	40014800 	.word	0x40014800

08002268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e042      	b.n	8002328 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fcde 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	@ 0x24
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fdf5 	bl	8002ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	@ 0x28
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	d175      	bne.n	800243c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_UART_Transmit+0x2c>
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e06e      	b.n	800243e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2221      	movs	r2, #33	@ 0x21
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800236e:	f7fe fd33 	bl	8000dd8 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002388:	d108      	bne.n	800239c <HAL_UART_Transmit+0x6c>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	e003      	b.n	80023a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023a4:	e02e      	b.n	8002404 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2200      	movs	r2, #0
 80023ae:	2180      	movs	r1, #128	@ 0x80
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fb91 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e03a      	b.n	800243e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10b      	bne.n	80023e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	3302      	adds	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	e007      	b.n	80023f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	3301      	adds	r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1cb      	bne.n	80023a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2200      	movs	r2, #0
 8002416:	2140      	movs	r1, #64	@ 0x40
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fb5d 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e006      	b.n	800243e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800243c:	2302      	movs	r3, #2
  }
}
 800243e:	4618      	mov	r0, r3
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b08a      	sub	sp, #40	@ 0x28
 800244a:	af02      	add	r7, sp, #8
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b20      	cmp	r3, #32
 8002464:	f040 8081 	bne.w	800256a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_UART_Receive+0x2e>
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e079      	b.n	800256c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2222      	movs	r2, #34	@ 0x22
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800248c:	f7fe fca4 	bl	8000dd8 <HAL_GetTick>
 8002490:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a6:	d108      	bne.n	80024ba <HAL_UART_Receive+0x74>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d104      	bne.n	80024ba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	e003      	b.n	80024c2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024c2:	e047      	b.n	8002554 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2200      	movs	r2, #0
 80024cc:	2120      	movs	r1, #32
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fb02 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e042      	b.n	800256c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10c      	bne.n	8002506 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	3302      	adds	r3, #2
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	e01f      	b.n	8002546 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800250e:	d007      	beq.n	8002520 <HAL_UART_Receive+0xda>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_UART_Receive+0xe8>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d106      	bne.n	800252e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e008      	b.n	8002540 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800253a:	b2da      	uxtb	r2, r3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	3301      	adds	r3, #1
 8002544:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1b2      	bne.n	80024c4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b0ba      	sub	sp, #232	@ 0xe8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80025b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_UART_IRQHandler+0x66>
 80025c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fbb8 	bl	8002d48 <UART_Receive_IT>
      return;
 80025d8:	e25b      	b.n	8002a92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80de 	beq.w	80027a0 <HAL_UART_IRQHandler+0x22c>
 80025e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d106      	bne.n	80025fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80d1 	beq.w	80027a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_UART_IRQHandler+0xae>
 800260a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800260e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_UART_IRQHandler+0xd2>
 800262e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f043 0202 	orr.w	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_UART_IRQHandler+0xf6>
 8002652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800266a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d011      	beq.n	800269a <HAL_UART_IRQHandler+0x126>
 8002676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f043 0208 	orr.w	r2, r3, #8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 81f2 	beq.w	8002a88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_UART_IRQHandler+0x14e>
 80026b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fb43 	bl	8002d48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026cc:	2b40      	cmp	r3, #64	@ 0x40
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <HAL_UART_IRQHandler+0x17a>
 80026e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d04f      	beq.n	800278e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa4b 	bl	8002b8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b40      	cmp	r3, #64	@ 0x40
 8002700:	d141      	bne.n	8002786 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3314      	adds	r3, #20
 8002708:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002710:	e853 3f00 	ldrex	r3, [r3]
 8002714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800271c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3314      	adds	r3, #20
 800272a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800272e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002732:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002736:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800273a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800273e:	e841 2300 	strex	r3, r2, [r1]
 8002742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1d9      	bne.n	8002702 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d013      	beq.n	800277e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275a:	4a7e      	ldr	r2, [pc, #504]	@ (8002954 <HAL_UART_IRQHandler+0x3e0>)
 800275c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fc96 	bl	8001094 <HAL_DMA_Abort_IT>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002778:	4610      	mov	r0, r2
 800277a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	e00e      	b.n	800279c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f994 	bl	8002aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002784:	e00a      	b.n	800279c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f990 	bl	8002aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278c:	e006      	b.n	800279c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f98c 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800279a:	e175      	b.n	8002a88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279c:	bf00      	nop
    return;
 800279e:	e173      	b.n	8002a88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	f040 814f 	bne.w	8002a48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8148 	beq.w	8002a48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8141 	beq.w	8002a48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e6:	2b40      	cmp	r3, #64	@ 0x40
 80027e8:	f040 80b6 	bne.w	8002958 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8145 	beq.w	8002a8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800280a:	429a      	cmp	r2, r3
 800280c:	f080 813e 	bcs.w	8002a8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002816:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002822:	f000 8088 	beq.w	8002936 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800283c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	330c      	adds	r3, #12
 800284e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002852:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800285e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800286a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1d9      	bne.n	8002826 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3314      	adds	r3, #20
 8002878:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002882:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3314      	adds	r3, #20
 8002892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002896:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800289a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800289e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80028a2:	e841 2300 	strex	r3, r2, [r1]
 80028a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80028a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1e1      	bne.n	8002872 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3314      	adds	r3, #20
 80028b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028b8:	e853 3f00 	ldrex	r3, [r3]
 80028bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80028be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3314      	adds	r3, #20
 80028ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80028d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80028d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80028e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e3      	bne.n	80028ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	330c      	adds	r3, #12
 80028fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028fe:	e853 3f00 	ldrex	r3, [r3]
 8002902:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002906:	f023 0310 	bic.w	r3, r3, #16
 800290a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	330c      	adds	r3, #12
 8002914:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002918:	65ba      	str	r2, [r7, #88]	@ 0x58
 800291a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800291e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002920:	e841 2300 	strex	r3, r2, [r1]
 8002924:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1e3      	bne.n	80028f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fb3f 	bl	8000fb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002944:	b29b      	uxth	r3, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	b29b      	uxth	r3, r3
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f8b7 	bl	8002ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002952:	e09b      	b.n	8002a8c <HAL_UART_IRQHandler+0x518>
 8002954:	08002c51 	.word	0x08002c51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002960:	b29b      	uxth	r3, r3
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 808e 	beq.w	8002a90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8089 	beq.w	8002a90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002988:	e853 3f00 	ldrex	r3, [r3]
 800298c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800298e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002994:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80029a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80029a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e3      	bne.n	800297e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3314      	adds	r3, #20
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	623b      	str	r3, [r7, #32]
   return(result);
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3314      	adds	r3, #20
 80029d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80029da:	633a      	str	r2, [r7, #48]	@ 0x30
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e3      	bne.n	80029b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	330c      	adds	r3, #12
 8002a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	e853 3f00 	ldrex	r3, [r3]
 8002a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0310 	bic.w	r3, r3, #16
 8002a12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002a20:	61fa      	str	r2, [r7, #28]
 8002a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	69b9      	ldr	r1, [r7, #24]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e3      	bne.n	80029fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f83d 	bl	8002ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a46:	e023      	b.n	8002a90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d009      	beq.n	8002a68 <HAL_UART_IRQHandler+0x4f4>
 8002a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f909 	bl	8002c78 <UART_Transmit_IT>
    return;
 8002a66:	e014      	b.n	8002a92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00e      	beq.n	8002a92 <HAL_UART_IRQHandler+0x51e>
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f949 	bl	8002d18 <UART_EndTransmit_IT>
    return;
 8002a86:	e004      	b.n	8002a92 <HAL_UART_IRQHandler+0x51e>
    return;
 8002a88:	bf00      	nop
 8002a8a:	e002      	b.n	8002a92 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a8c:	bf00      	nop
 8002a8e:	e000      	b.n	8002a92 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a90:	bf00      	nop
  }
}
 8002a92:	37e8      	adds	r7, #232	@ 0xe8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae8:	e03b      	b.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d037      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7fe f971 	bl	8000dd8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	6a3a      	ldr	r2, [r7, #32]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e03a      	b.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d023      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b80      	cmp	r3, #128	@ 0x80
 8002b1e:	d020      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b40      	cmp	r3, #64	@ 0x40
 8002b24:	d01d      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d116      	bne.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f81d 	bl	8002b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2208      	movs	r2, #8
 8002b54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	bf0c      	ite	eq
 8002b72:	2301      	moveq	r3, #1
 8002b74:	2300      	movne	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d0b4      	beq.n	8002aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b095      	sub	sp, #84	@ 0x54
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e5      	bne.n	8002b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3314      	adds	r3, #20
 8002be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e5      	bne.n	8002bc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d119      	bne.n	8002c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	330c      	adds	r3, #12
 8002c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f023 0310 	bic.w	r3, r3, #16
 8002c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c22:	61ba      	str	r2, [r7, #24]
 8002c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c26:	6979      	ldr	r1, [r7, #20]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	e841 2300 	strex	r3, r2, [r1]
 8002c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1e5      	bne.n	8002c02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c44:	bf00      	nop
 8002c46:	3754      	adds	r7, #84	@ 0x54
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff ff1e 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b21      	cmp	r3, #33	@ 0x21
 8002c8a:	d13e      	bne.n	8002d0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c94:	d114      	bne.n	8002cc0 <UART_Transmit_IT+0x48>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d110      	bne.n	8002cc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	621a      	str	r2, [r3, #32]
 8002cbe:	e008      	b.n	8002cd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	1c59      	adds	r1, r3, #1
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6211      	str	r1, [r2, #32]
 8002cca:	781a      	ldrb	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10f      	bne.n	8002d06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d0a:	2302      	movs	r3, #2
  }
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff fead 	bl	8002a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08c      	sub	sp, #48	@ 0x30
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b22      	cmp	r3, #34	@ 0x22
 8002d5a:	f040 80ae 	bne.w	8002eba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d66:	d117      	bne.n	8002d98 <UART_Receive_IT+0x50>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d113      	bne.n	8002d98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d96:	e026      	b.n	8002de6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002daa:	d007      	beq.n	8002dbc <UART_Receive_IT+0x74>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <UART_Receive_IT+0x82>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e008      	b.n	8002ddc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4619      	mov	r1, r3
 8002df4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d15d      	bne.n	8002eb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0220 	bic.w	r2, r2, #32
 8002e08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d135      	bne.n	8002eac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	613b      	str	r3, [r7, #16]
   return(result);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f023 0310 	bic.w	r3, r3, #16
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e66:	623a      	str	r2, [r7, #32]
 8002e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	69f9      	ldr	r1, [r7, #28]
 8002e6c:	6a3a      	ldr	r2, [r7, #32]
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e5      	bne.n	8002e46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d10a      	bne.n	8002e9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff fe0b 	bl	8002ac0 <HAL_UARTEx_RxEventCallback>
 8002eaa:	e002      	b.n	8002eb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fd fcff 	bl	80008b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e002      	b.n	8002ebc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3730      	adds	r7, #48	@ 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec8:	b0c0      	sub	sp, #256	@ 0x100
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	68d9      	ldr	r1, [r3, #12]
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	ea40 0301 	orr.w	r3, r0, r1
 8002eec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f1c:	f021 010c 	bic.w	r1, r1, #12
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3e:	6999      	ldr	r1, [r3, #24]
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	ea40 0301 	orr.w	r3, r0, r1
 8002f4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b8f      	ldr	r3, [pc, #572]	@ (8003190 <UART_SetConfig+0x2cc>)
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d005      	beq.n	8002f64 <UART_SetConfig+0xa0>
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003194 <UART_SetConfig+0x2d0>)
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d104      	bne.n	8002f6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f64:	f7fe feda 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 8002f68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f6c:	e003      	b.n	8002f76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f6e:	f7fe fec1 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 8002f72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f80:	f040 810c 	bne.w	800319c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f96:	4622      	mov	r2, r4
 8002f98:	462b      	mov	r3, r5
 8002f9a:	1891      	adds	r1, r2, r2
 8002f9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f9e:	415b      	adcs	r3, r3
 8002fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	eb12 0801 	adds.w	r8, r2, r1
 8002fac:	4629      	mov	r1, r5
 8002fae:	eb43 0901 	adc.w	r9, r3, r1
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fc6:	4690      	mov	r8, r2
 8002fc8:	4699      	mov	r9, r3
 8002fca:	4623      	mov	r3, r4
 8002fcc:	eb18 0303 	adds.w	r3, r8, r3
 8002fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fd4:	462b      	mov	r3, r5
 8002fd6:	eb49 0303 	adc.w	r3, r9, r3
 8002fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	18db      	adds	r3, r3, r3
 8002ff6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	eb42 0303 	adc.w	r3, r2, r3
 8002ffe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003004:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003008:	f7fd f8e6 	bl	80001d8 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4b61      	ldr	r3, [pc, #388]	@ (8003198 <UART_SetConfig+0x2d4>)
 8003012:	fba3 2302 	umull	r2, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	011c      	lsls	r4, r3, #4
 800301a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800301e:	2200      	movs	r2, #0
 8003020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003024:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003028:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800302c:	4642      	mov	r2, r8
 800302e:	464b      	mov	r3, r9
 8003030:	1891      	adds	r1, r2, r2
 8003032:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003034:	415b      	adcs	r3, r3
 8003036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003038:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800303c:	4641      	mov	r1, r8
 800303e:	eb12 0a01 	adds.w	sl, r2, r1
 8003042:	4649      	mov	r1, r9
 8003044:	eb43 0b01 	adc.w	fp, r3, r1
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003054:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800305c:	4692      	mov	sl, r2
 800305e:	469b      	mov	fp, r3
 8003060:	4643      	mov	r3, r8
 8003062:	eb1a 0303 	adds.w	r3, sl, r3
 8003066:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800306a:	464b      	mov	r3, r9
 800306c:	eb4b 0303 	adc.w	r3, fp, r3
 8003070:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003080:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003084:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003088:	460b      	mov	r3, r1
 800308a:	18db      	adds	r3, r3, r3
 800308c:	643b      	str	r3, [r7, #64]	@ 0x40
 800308e:	4613      	mov	r3, r2
 8003090:	eb42 0303 	adc.w	r3, r2, r3
 8003094:	647b      	str	r3, [r7, #68]	@ 0x44
 8003096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800309a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800309e:	f7fd f89b 	bl	80001d8 <__aeabi_uldivmod>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003198 <UART_SetConfig+0x2d4>)
 80030aa:	fba3 2301 	umull	r2, r3, r3, r1
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2264      	movs	r2, #100	@ 0x64
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	1acb      	subs	r3, r1, r3
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030be:	4b36      	ldr	r3, [pc, #216]	@ (8003198 <UART_SetConfig+0x2d4>)
 80030c0:	fba3 2302 	umull	r2, r3, r3, r2
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030cc:	441c      	add	r4, r3
 80030ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030e0:	4642      	mov	r2, r8
 80030e2:	464b      	mov	r3, r9
 80030e4:	1891      	adds	r1, r2, r2
 80030e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030e8:	415b      	adcs	r3, r3
 80030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030f0:	4641      	mov	r1, r8
 80030f2:	1851      	adds	r1, r2, r1
 80030f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80030f6:	4649      	mov	r1, r9
 80030f8:	414b      	adcs	r3, r1
 80030fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003108:	4659      	mov	r1, fp
 800310a:	00cb      	lsls	r3, r1, #3
 800310c:	4651      	mov	r1, sl
 800310e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003112:	4651      	mov	r1, sl
 8003114:	00ca      	lsls	r2, r1, #3
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	4603      	mov	r3, r0
 800311c:	4642      	mov	r2, r8
 800311e:	189b      	adds	r3, r3, r2
 8003120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003124:	464b      	mov	r3, r9
 8003126:	460a      	mov	r2, r1
 8003128:	eb42 0303 	adc.w	r3, r2, r3
 800312c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800313c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003144:	460b      	mov	r3, r1
 8003146:	18db      	adds	r3, r3, r3
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800314a:	4613      	mov	r3, r2
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003156:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800315a:	f7fd f83d 	bl	80001d8 <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <UART_SetConfig+0x2d4>)
 8003164:	fba3 1302 	umull	r1, r3, r3, r2
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	2164      	movs	r1, #100	@ 0x64
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	3332      	adds	r3, #50	@ 0x32
 8003176:	4a08      	ldr	r2, [pc, #32]	@ (8003198 <UART_SetConfig+0x2d4>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	f003 0207 	and.w	r2, r3, #7
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4422      	add	r2, r4
 800318a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800318c:	e106      	b.n	800339c <UART_SetConfig+0x4d8>
 800318e:	bf00      	nop
 8003190:	40011000 	.word	0x40011000
 8003194:	40011400 	.word	0x40011400
 8003198:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800319c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031ae:	4642      	mov	r2, r8
 80031b0:	464b      	mov	r3, r9
 80031b2:	1891      	adds	r1, r2, r2
 80031b4:	6239      	str	r1, [r7, #32]
 80031b6:	415b      	adcs	r3, r3
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031be:	4641      	mov	r1, r8
 80031c0:	1854      	adds	r4, r2, r1
 80031c2:	4649      	mov	r1, r9
 80031c4:	eb43 0501 	adc.w	r5, r3, r1
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	00eb      	lsls	r3, r5, #3
 80031d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d6:	00e2      	lsls	r2, r4, #3
 80031d8:	4614      	mov	r4, r2
 80031da:	461d      	mov	r5, r3
 80031dc:	4643      	mov	r3, r8
 80031de:	18e3      	adds	r3, r4, r3
 80031e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031e4:	464b      	mov	r3, r9
 80031e6:	eb45 0303 	adc.w	r3, r5, r3
 80031ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800320a:	4629      	mov	r1, r5
 800320c:	008b      	lsls	r3, r1, #2
 800320e:	4621      	mov	r1, r4
 8003210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003214:	4621      	mov	r1, r4
 8003216:	008a      	lsls	r2, r1, #2
 8003218:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800321c:	f7fc ffdc 	bl	80001d8 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4b60      	ldr	r3, [pc, #384]	@ (80033a8 <UART_SetConfig+0x4e4>)
 8003226:	fba3 2302 	umull	r2, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	011c      	lsls	r4, r3, #4
 800322e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003232:	2200      	movs	r2, #0
 8003234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003238:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800323c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003240:	4642      	mov	r2, r8
 8003242:	464b      	mov	r3, r9
 8003244:	1891      	adds	r1, r2, r2
 8003246:	61b9      	str	r1, [r7, #24]
 8003248:	415b      	adcs	r3, r3
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003250:	4641      	mov	r1, r8
 8003252:	1851      	adds	r1, r2, r1
 8003254:	6139      	str	r1, [r7, #16]
 8003256:	4649      	mov	r1, r9
 8003258:	414b      	adcs	r3, r1
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003268:	4659      	mov	r1, fp
 800326a:	00cb      	lsls	r3, r1, #3
 800326c:	4651      	mov	r1, sl
 800326e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003272:	4651      	mov	r1, sl
 8003274:	00ca      	lsls	r2, r1, #3
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	4603      	mov	r3, r0
 800327c:	4642      	mov	r2, r8
 800327e:	189b      	adds	r3, r3, r2
 8003280:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003284:	464b      	mov	r3, r9
 8003286:	460a      	mov	r2, r1
 8003288:	eb42 0303 	adc.w	r3, r2, r3
 800328c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	67bb      	str	r3, [r7, #120]	@ 0x78
 800329a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032a8:	4649      	mov	r1, r9
 80032aa:	008b      	lsls	r3, r1, #2
 80032ac:	4641      	mov	r1, r8
 80032ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b2:	4641      	mov	r1, r8
 80032b4:	008a      	lsls	r2, r1, #2
 80032b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032ba:	f7fc ff8d 	bl	80001d8 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	4b38      	ldr	r3, [pc, #224]	@ (80033a8 <UART_SetConfig+0x4e4>)
 80032c6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2264      	movs	r2, #100	@ 0x64
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	1acb      	subs	r3, r1, r3
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	3332      	adds	r3, #50	@ 0x32
 80032d8:	4a33      	ldr	r2, [pc, #204]	@ (80033a8 <UART_SetConfig+0x4e4>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032e4:	441c      	add	r4, r3
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ea:	2200      	movs	r2, #0
 80032ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80032ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80032f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032f4:	4642      	mov	r2, r8
 80032f6:	464b      	mov	r3, r9
 80032f8:	1891      	adds	r1, r2, r2
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	415b      	adcs	r3, r3
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003304:	4641      	mov	r1, r8
 8003306:	1851      	adds	r1, r2, r1
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	4649      	mov	r1, r9
 800330c:	414b      	adcs	r3, r1
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800331c:	4659      	mov	r1, fp
 800331e:	00cb      	lsls	r3, r1, #3
 8003320:	4651      	mov	r1, sl
 8003322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003326:	4651      	mov	r1, sl
 8003328:	00ca      	lsls	r2, r1, #3
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	4603      	mov	r3, r0
 8003330:	4642      	mov	r2, r8
 8003332:	189b      	adds	r3, r3, r2
 8003334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003336:	464b      	mov	r3, r9
 8003338:	460a      	mov	r2, r1
 800333a:	eb42 0303 	adc.w	r3, r2, r3
 800333e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	663b      	str	r3, [r7, #96]	@ 0x60
 800334a:	667a      	str	r2, [r7, #100]	@ 0x64
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003358:	4649      	mov	r1, r9
 800335a:	008b      	lsls	r3, r1, #2
 800335c:	4641      	mov	r1, r8
 800335e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003362:	4641      	mov	r1, r8
 8003364:	008a      	lsls	r2, r1, #2
 8003366:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800336a:	f7fc ff35 	bl	80001d8 <__aeabi_uldivmod>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <UART_SetConfig+0x4e4>)
 8003374:	fba3 1302 	umull	r1, r3, r3, r2
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	2164      	movs	r1, #100	@ 0x64
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	3332      	adds	r3, #50	@ 0x32
 8003386:	4a08      	ldr	r2, [pc, #32]	@ (80033a8 <UART_SetConfig+0x4e4>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	f003 020f 	and.w	r2, r3, #15
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4422      	add	r2, r4
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033a2:	46bd      	mov	sp, r7
 80033a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a8:	51eb851f 	.word	0x51eb851f

080033ac <std>:
 80033ac:	2300      	movs	r3, #0
 80033ae:	b510      	push	{r4, lr}
 80033b0:	4604      	mov	r4, r0
 80033b2:	e9c0 3300 	strd	r3, r3, [r0]
 80033b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ba:	6083      	str	r3, [r0, #8]
 80033bc:	8181      	strh	r1, [r0, #12]
 80033be:	6643      	str	r3, [r0, #100]	@ 0x64
 80033c0:	81c2      	strh	r2, [r0, #14]
 80033c2:	6183      	str	r3, [r0, #24]
 80033c4:	4619      	mov	r1, r3
 80033c6:	2208      	movs	r2, #8
 80033c8:	305c      	adds	r0, #92	@ 0x5c
 80033ca:	f000 faa3 	bl	8003914 <memset>
 80033ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <std+0x58>)
 80033d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <std+0x5c>)
 80033d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <std+0x60>)
 80033d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033da:	4b0d      	ldr	r3, [pc, #52]	@ (8003410 <std+0x64>)
 80033dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80033de:	4b0d      	ldr	r3, [pc, #52]	@ (8003414 <std+0x68>)
 80033e0:	6224      	str	r4, [r4, #32]
 80033e2:	429c      	cmp	r4, r3
 80033e4:	d006      	beq.n	80033f4 <std+0x48>
 80033e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80033ea:	4294      	cmp	r4, r2
 80033ec:	d002      	beq.n	80033f4 <std+0x48>
 80033ee:	33d0      	adds	r3, #208	@ 0xd0
 80033f0:	429c      	cmp	r4, r3
 80033f2:	d105      	bne.n	8003400 <std+0x54>
 80033f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033fc:	f000 bb02 	b.w	8003a04 <__retarget_lock_init_recursive>
 8003400:	bd10      	pop	{r4, pc}
 8003402:	bf00      	nop
 8003404:	08003765 	.word	0x08003765
 8003408:	08003787 	.word	0x08003787
 800340c:	080037bf 	.word	0x080037bf
 8003410:	080037e3 	.word	0x080037e3
 8003414:	2000012c 	.word	0x2000012c

08003418 <stdio_exit_handler>:
 8003418:	4a02      	ldr	r2, [pc, #8]	@ (8003424 <stdio_exit_handler+0xc>)
 800341a:	4903      	ldr	r1, [pc, #12]	@ (8003428 <stdio_exit_handler+0x10>)
 800341c:	4803      	ldr	r0, [pc, #12]	@ (800342c <stdio_exit_handler+0x14>)
 800341e:	f000 b869 	b.w	80034f4 <_fwalk_sglue>
 8003422:	bf00      	nop
 8003424:	20000018 	.word	0x20000018
 8003428:	08003d15 	.word	0x08003d15
 800342c:	20000028 	.word	0x20000028

08003430 <cleanup_stdio>:
 8003430:	6841      	ldr	r1, [r0, #4]
 8003432:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <cleanup_stdio+0x34>)
 8003434:	4299      	cmp	r1, r3
 8003436:	b510      	push	{r4, lr}
 8003438:	4604      	mov	r4, r0
 800343a:	d001      	beq.n	8003440 <cleanup_stdio+0x10>
 800343c:	f000 fc6a 	bl	8003d14 <_fflush_r>
 8003440:	68a1      	ldr	r1, [r4, #8]
 8003442:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <cleanup_stdio+0x38>)
 8003444:	4299      	cmp	r1, r3
 8003446:	d002      	beq.n	800344e <cleanup_stdio+0x1e>
 8003448:	4620      	mov	r0, r4
 800344a:	f000 fc63 	bl	8003d14 <_fflush_r>
 800344e:	68e1      	ldr	r1, [r4, #12]
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <cleanup_stdio+0x3c>)
 8003452:	4299      	cmp	r1, r3
 8003454:	d004      	beq.n	8003460 <cleanup_stdio+0x30>
 8003456:	4620      	mov	r0, r4
 8003458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800345c:	f000 bc5a 	b.w	8003d14 <_fflush_r>
 8003460:	bd10      	pop	{r4, pc}
 8003462:	bf00      	nop
 8003464:	2000012c 	.word	0x2000012c
 8003468:	20000194 	.word	0x20000194
 800346c:	200001fc 	.word	0x200001fc

08003470 <global_stdio_init.part.0>:
 8003470:	b510      	push	{r4, lr}
 8003472:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <global_stdio_init.part.0+0x30>)
 8003474:	4c0b      	ldr	r4, [pc, #44]	@ (80034a4 <global_stdio_init.part.0+0x34>)
 8003476:	4a0c      	ldr	r2, [pc, #48]	@ (80034a8 <global_stdio_init.part.0+0x38>)
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	4620      	mov	r0, r4
 800347c:	2200      	movs	r2, #0
 800347e:	2104      	movs	r1, #4
 8003480:	f7ff ff94 	bl	80033ac <std>
 8003484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003488:	2201      	movs	r2, #1
 800348a:	2109      	movs	r1, #9
 800348c:	f7ff ff8e 	bl	80033ac <std>
 8003490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003494:	2202      	movs	r2, #2
 8003496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800349a:	2112      	movs	r1, #18
 800349c:	f7ff bf86 	b.w	80033ac <std>
 80034a0:	20000264 	.word	0x20000264
 80034a4:	2000012c 	.word	0x2000012c
 80034a8:	08003419 	.word	0x08003419

080034ac <__sfp_lock_acquire>:
 80034ac:	4801      	ldr	r0, [pc, #4]	@ (80034b4 <__sfp_lock_acquire+0x8>)
 80034ae:	f000 baaa 	b.w	8003a06 <__retarget_lock_acquire_recursive>
 80034b2:	bf00      	nop
 80034b4:	2000026d 	.word	0x2000026d

080034b8 <__sfp_lock_release>:
 80034b8:	4801      	ldr	r0, [pc, #4]	@ (80034c0 <__sfp_lock_release+0x8>)
 80034ba:	f000 baa5 	b.w	8003a08 <__retarget_lock_release_recursive>
 80034be:	bf00      	nop
 80034c0:	2000026d 	.word	0x2000026d

080034c4 <__sinit>:
 80034c4:	b510      	push	{r4, lr}
 80034c6:	4604      	mov	r4, r0
 80034c8:	f7ff fff0 	bl	80034ac <__sfp_lock_acquire>
 80034cc:	6a23      	ldr	r3, [r4, #32]
 80034ce:	b11b      	cbz	r3, 80034d8 <__sinit+0x14>
 80034d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034d4:	f7ff bff0 	b.w	80034b8 <__sfp_lock_release>
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <__sinit+0x28>)
 80034da:	6223      	str	r3, [r4, #32]
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <__sinit+0x2c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f5      	bne.n	80034d0 <__sinit+0xc>
 80034e4:	f7ff ffc4 	bl	8003470 <global_stdio_init.part.0>
 80034e8:	e7f2      	b.n	80034d0 <__sinit+0xc>
 80034ea:	bf00      	nop
 80034ec:	08003431 	.word	0x08003431
 80034f0:	20000264 	.word	0x20000264

080034f4 <_fwalk_sglue>:
 80034f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f8:	4607      	mov	r7, r0
 80034fa:	4688      	mov	r8, r1
 80034fc:	4614      	mov	r4, r2
 80034fe:	2600      	movs	r6, #0
 8003500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003504:	f1b9 0901 	subs.w	r9, r9, #1
 8003508:	d505      	bpl.n	8003516 <_fwalk_sglue+0x22>
 800350a:	6824      	ldr	r4, [r4, #0]
 800350c:	2c00      	cmp	r4, #0
 800350e:	d1f7      	bne.n	8003500 <_fwalk_sglue+0xc>
 8003510:	4630      	mov	r0, r6
 8003512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003516:	89ab      	ldrh	r3, [r5, #12]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d907      	bls.n	800352c <_fwalk_sglue+0x38>
 800351c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003520:	3301      	adds	r3, #1
 8003522:	d003      	beq.n	800352c <_fwalk_sglue+0x38>
 8003524:	4629      	mov	r1, r5
 8003526:	4638      	mov	r0, r7
 8003528:	47c0      	blx	r8
 800352a:	4306      	orrs	r6, r0
 800352c:	3568      	adds	r5, #104	@ 0x68
 800352e:	e7e9      	b.n	8003504 <_fwalk_sglue+0x10>

08003530 <putchar>:
 8003530:	4b02      	ldr	r3, [pc, #8]	@ (800353c <putchar+0xc>)
 8003532:	4601      	mov	r1, r0
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	6882      	ldr	r2, [r0, #8]
 8003538:	f000 bc76 	b.w	8003e28 <_putc_r>
 800353c:	20000024 	.word	0x20000024

08003540 <_puts_r>:
 8003540:	6a03      	ldr	r3, [r0, #32]
 8003542:	b570      	push	{r4, r5, r6, lr}
 8003544:	6884      	ldr	r4, [r0, #8]
 8003546:	4605      	mov	r5, r0
 8003548:	460e      	mov	r6, r1
 800354a:	b90b      	cbnz	r3, 8003550 <_puts_r+0x10>
 800354c:	f7ff ffba 	bl	80034c4 <__sinit>
 8003550:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003552:	07db      	lsls	r3, r3, #31
 8003554:	d405      	bmi.n	8003562 <_puts_r+0x22>
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	0598      	lsls	r0, r3, #22
 800355a:	d402      	bmi.n	8003562 <_puts_r+0x22>
 800355c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800355e:	f000 fa52 	bl	8003a06 <__retarget_lock_acquire_recursive>
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	0719      	lsls	r1, r3, #28
 8003566:	d502      	bpl.n	800356e <_puts_r+0x2e>
 8003568:	6923      	ldr	r3, [r4, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d135      	bne.n	80035da <_puts_r+0x9a>
 800356e:	4621      	mov	r1, r4
 8003570:	4628      	mov	r0, r5
 8003572:	f000 f979 	bl	8003868 <__swsetup_r>
 8003576:	b380      	cbz	r0, 80035da <_puts_r+0x9a>
 8003578:	f04f 35ff 	mov.w	r5, #4294967295
 800357c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800357e:	07da      	lsls	r2, r3, #31
 8003580:	d405      	bmi.n	800358e <_puts_r+0x4e>
 8003582:	89a3      	ldrh	r3, [r4, #12]
 8003584:	059b      	lsls	r3, r3, #22
 8003586:	d402      	bmi.n	800358e <_puts_r+0x4e>
 8003588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800358a:	f000 fa3d 	bl	8003a08 <__retarget_lock_release_recursive>
 800358e:	4628      	mov	r0, r5
 8003590:	bd70      	pop	{r4, r5, r6, pc}
 8003592:	2b00      	cmp	r3, #0
 8003594:	da04      	bge.n	80035a0 <_puts_r+0x60>
 8003596:	69a2      	ldr	r2, [r4, #24]
 8003598:	429a      	cmp	r2, r3
 800359a:	dc17      	bgt.n	80035cc <_puts_r+0x8c>
 800359c:	290a      	cmp	r1, #10
 800359e:	d015      	beq.n	80035cc <_puts_r+0x8c>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	6022      	str	r2, [r4, #0]
 80035a6:	7019      	strb	r1, [r3, #0]
 80035a8:	68a3      	ldr	r3, [r4, #8]
 80035aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035ae:	3b01      	subs	r3, #1
 80035b0:	60a3      	str	r3, [r4, #8]
 80035b2:	2900      	cmp	r1, #0
 80035b4:	d1ed      	bne.n	8003592 <_puts_r+0x52>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da11      	bge.n	80035de <_puts_r+0x9e>
 80035ba:	4622      	mov	r2, r4
 80035bc:	210a      	movs	r1, #10
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 f913 	bl	80037ea <__swbuf_r>
 80035c4:	3001      	adds	r0, #1
 80035c6:	d0d7      	beq.n	8003578 <_puts_r+0x38>
 80035c8:	250a      	movs	r5, #10
 80035ca:	e7d7      	b.n	800357c <_puts_r+0x3c>
 80035cc:	4622      	mov	r2, r4
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 f90b 	bl	80037ea <__swbuf_r>
 80035d4:	3001      	adds	r0, #1
 80035d6:	d1e7      	bne.n	80035a8 <_puts_r+0x68>
 80035d8:	e7ce      	b.n	8003578 <_puts_r+0x38>
 80035da:	3e01      	subs	r6, #1
 80035dc:	e7e4      	b.n	80035a8 <_puts_r+0x68>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	6022      	str	r2, [r4, #0]
 80035e4:	220a      	movs	r2, #10
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e7ee      	b.n	80035c8 <_puts_r+0x88>
	...

080035ec <puts>:
 80035ec:	4b02      	ldr	r3, [pc, #8]	@ (80035f8 <puts+0xc>)
 80035ee:	4601      	mov	r1, r0
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	f7ff bfa5 	b.w	8003540 <_puts_r>
 80035f6:	bf00      	nop
 80035f8:	20000024 	.word	0x20000024

080035fc <setvbuf>:
 80035fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003600:	461d      	mov	r5, r3
 8003602:	4b57      	ldr	r3, [pc, #348]	@ (8003760 <setvbuf+0x164>)
 8003604:	681f      	ldr	r7, [r3, #0]
 8003606:	4604      	mov	r4, r0
 8003608:	460e      	mov	r6, r1
 800360a:	4690      	mov	r8, r2
 800360c:	b127      	cbz	r7, 8003618 <setvbuf+0x1c>
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	b913      	cbnz	r3, 8003618 <setvbuf+0x1c>
 8003612:	4638      	mov	r0, r7
 8003614:	f7ff ff56 	bl	80034c4 <__sinit>
 8003618:	f1b8 0f02 	cmp.w	r8, #2
 800361c:	d006      	beq.n	800362c <setvbuf+0x30>
 800361e:	f1b8 0f01 	cmp.w	r8, #1
 8003622:	f200 809a 	bhi.w	800375a <setvbuf+0x15e>
 8003626:	2d00      	cmp	r5, #0
 8003628:	f2c0 8097 	blt.w	800375a <setvbuf+0x15e>
 800362c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800362e:	07d9      	lsls	r1, r3, #31
 8003630:	d405      	bmi.n	800363e <setvbuf+0x42>
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	059a      	lsls	r2, r3, #22
 8003636:	d402      	bmi.n	800363e <setvbuf+0x42>
 8003638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800363a:	f000 f9e4 	bl	8003a06 <__retarget_lock_acquire_recursive>
 800363e:	4621      	mov	r1, r4
 8003640:	4638      	mov	r0, r7
 8003642:	f000 fb67 	bl	8003d14 <_fflush_r>
 8003646:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003648:	b141      	cbz	r1, 800365c <setvbuf+0x60>
 800364a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800364e:	4299      	cmp	r1, r3
 8003650:	d002      	beq.n	8003658 <setvbuf+0x5c>
 8003652:	4638      	mov	r0, r7
 8003654:	f000 f9da 	bl	8003a0c <_free_r>
 8003658:	2300      	movs	r3, #0
 800365a:	6363      	str	r3, [r4, #52]	@ 0x34
 800365c:	2300      	movs	r3, #0
 800365e:	61a3      	str	r3, [r4, #24]
 8003660:	6063      	str	r3, [r4, #4]
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	061b      	lsls	r3, r3, #24
 8003666:	d503      	bpl.n	8003670 <setvbuf+0x74>
 8003668:	6921      	ldr	r1, [r4, #16]
 800366a:	4638      	mov	r0, r7
 800366c:	f000 f9ce 	bl	8003a0c <_free_r>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	f1b8 0f02 	cmp.w	r8, #2
 800367e:	81a3      	strh	r3, [r4, #12]
 8003680:	d061      	beq.n	8003746 <setvbuf+0x14a>
 8003682:	ab01      	add	r3, sp, #4
 8003684:	466a      	mov	r2, sp
 8003686:	4621      	mov	r1, r4
 8003688:	4638      	mov	r0, r7
 800368a:	f000 fb6b 	bl	8003d64 <__swhatbuf_r>
 800368e:	89a3      	ldrh	r3, [r4, #12]
 8003690:	4318      	orrs	r0, r3
 8003692:	81a0      	strh	r0, [r4, #12]
 8003694:	bb2d      	cbnz	r5, 80036e2 <setvbuf+0xe6>
 8003696:	9d00      	ldr	r5, [sp, #0]
 8003698:	4628      	mov	r0, r5
 800369a:	f000 fa01 	bl	8003aa0 <malloc>
 800369e:	4606      	mov	r6, r0
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d152      	bne.n	800374a <setvbuf+0x14e>
 80036a4:	f8dd 9000 	ldr.w	r9, [sp]
 80036a8:	45a9      	cmp	r9, r5
 80036aa:	d140      	bne.n	800372e <setvbuf+0x132>
 80036ac:	f04f 35ff 	mov.w	r5, #4294967295
 80036b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036b4:	f043 0202 	orr.w	r2, r3, #2
 80036b8:	81a2      	strh	r2, [r4, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	60a2      	str	r2, [r4, #8]
 80036be:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80036c2:	6022      	str	r2, [r4, #0]
 80036c4:	6122      	str	r2, [r4, #16]
 80036c6:	2201      	movs	r2, #1
 80036c8:	6162      	str	r2, [r4, #20]
 80036ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80036cc:	07d6      	lsls	r6, r2, #31
 80036ce:	d404      	bmi.n	80036da <setvbuf+0xde>
 80036d0:	0598      	lsls	r0, r3, #22
 80036d2:	d402      	bmi.n	80036da <setvbuf+0xde>
 80036d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036d6:	f000 f997 	bl	8003a08 <__retarget_lock_release_recursive>
 80036da:	4628      	mov	r0, r5
 80036dc:	b003      	add	sp, #12
 80036de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036e2:	2e00      	cmp	r6, #0
 80036e4:	d0d8      	beq.n	8003698 <setvbuf+0x9c>
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	b913      	cbnz	r3, 80036f0 <setvbuf+0xf4>
 80036ea:	4638      	mov	r0, r7
 80036ec:	f7ff feea 	bl	80034c4 <__sinit>
 80036f0:	f1b8 0f01 	cmp.w	r8, #1
 80036f4:	bf08      	it	eq
 80036f6:	89a3      	ldrheq	r3, [r4, #12]
 80036f8:	6026      	str	r6, [r4, #0]
 80036fa:	bf04      	itt	eq
 80036fc:	f043 0301 	orreq.w	r3, r3, #1
 8003700:	81a3      	strheq	r3, [r4, #12]
 8003702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003706:	f013 0208 	ands.w	r2, r3, #8
 800370a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800370e:	d01e      	beq.n	800374e <setvbuf+0x152>
 8003710:	07d9      	lsls	r1, r3, #31
 8003712:	bf41      	itttt	mi
 8003714:	2200      	movmi	r2, #0
 8003716:	426d      	negmi	r5, r5
 8003718:	60a2      	strmi	r2, [r4, #8]
 800371a:	61a5      	strmi	r5, [r4, #24]
 800371c:	bf58      	it	pl
 800371e:	60a5      	strpl	r5, [r4, #8]
 8003720:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003722:	07d2      	lsls	r2, r2, #31
 8003724:	d401      	bmi.n	800372a <setvbuf+0x12e>
 8003726:	059b      	lsls	r3, r3, #22
 8003728:	d513      	bpl.n	8003752 <setvbuf+0x156>
 800372a:	2500      	movs	r5, #0
 800372c:	e7d5      	b.n	80036da <setvbuf+0xde>
 800372e:	4648      	mov	r0, r9
 8003730:	f000 f9b6 	bl	8003aa0 <malloc>
 8003734:	4606      	mov	r6, r0
 8003736:	2800      	cmp	r0, #0
 8003738:	d0b8      	beq.n	80036ac <setvbuf+0xb0>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	464d      	mov	r5, r9
 8003744:	e7cf      	b.n	80036e6 <setvbuf+0xea>
 8003746:	2500      	movs	r5, #0
 8003748:	e7b2      	b.n	80036b0 <setvbuf+0xb4>
 800374a:	46a9      	mov	r9, r5
 800374c:	e7f5      	b.n	800373a <setvbuf+0x13e>
 800374e:	60a2      	str	r2, [r4, #8]
 8003750:	e7e6      	b.n	8003720 <setvbuf+0x124>
 8003752:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003754:	f000 f958 	bl	8003a08 <__retarget_lock_release_recursive>
 8003758:	e7e7      	b.n	800372a <setvbuf+0x12e>
 800375a:	f04f 35ff 	mov.w	r5, #4294967295
 800375e:	e7bc      	b.n	80036da <setvbuf+0xde>
 8003760:	20000024 	.word	0x20000024

08003764 <__sread>:
 8003764:	b510      	push	{r4, lr}
 8003766:	460c      	mov	r4, r1
 8003768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376c:	f000 f8fc 	bl	8003968 <_read_r>
 8003770:	2800      	cmp	r0, #0
 8003772:	bfab      	itete	ge
 8003774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003776:	89a3      	ldrhlt	r3, [r4, #12]
 8003778:	181b      	addge	r3, r3, r0
 800377a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800377e:	bfac      	ite	ge
 8003780:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003782:	81a3      	strhlt	r3, [r4, #12]
 8003784:	bd10      	pop	{r4, pc}

08003786 <__swrite>:
 8003786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378a:	461f      	mov	r7, r3
 800378c:	898b      	ldrh	r3, [r1, #12]
 800378e:	05db      	lsls	r3, r3, #23
 8003790:	4605      	mov	r5, r0
 8003792:	460c      	mov	r4, r1
 8003794:	4616      	mov	r6, r2
 8003796:	d505      	bpl.n	80037a4 <__swrite+0x1e>
 8003798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800379c:	2302      	movs	r3, #2
 800379e:	2200      	movs	r2, #0
 80037a0:	f000 f8d0 	bl	8003944 <_lseek_r>
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037ae:	81a3      	strh	r3, [r4, #12]
 80037b0:	4632      	mov	r2, r6
 80037b2:	463b      	mov	r3, r7
 80037b4:	4628      	mov	r0, r5
 80037b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ba:	f000 b8e7 	b.w	800398c <_write_r>

080037be <__sseek>:
 80037be:	b510      	push	{r4, lr}
 80037c0:	460c      	mov	r4, r1
 80037c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c6:	f000 f8bd 	bl	8003944 <_lseek_r>
 80037ca:	1c43      	adds	r3, r0, #1
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	bf15      	itete	ne
 80037d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037da:	81a3      	strheq	r3, [r4, #12]
 80037dc:	bf18      	it	ne
 80037de:	81a3      	strhne	r3, [r4, #12]
 80037e0:	bd10      	pop	{r4, pc}

080037e2 <__sclose>:
 80037e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e6:	f000 b89d 	b.w	8003924 <_close_r>

080037ea <__swbuf_r>:
 80037ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ec:	460e      	mov	r6, r1
 80037ee:	4614      	mov	r4, r2
 80037f0:	4605      	mov	r5, r0
 80037f2:	b118      	cbz	r0, 80037fc <__swbuf_r+0x12>
 80037f4:	6a03      	ldr	r3, [r0, #32]
 80037f6:	b90b      	cbnz	r3, 80037fc <__swbuf_r+0x12>
 80037f8:	f7ff fe64 	bl	80034c4 <__sinit>
 80037fc:	69a3      	ldr	r3, [r4, #24]
 80037fe:	60a3      	str	r3, [r4, #8]
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	071a      	lsls	r2, r3, #28
 8003804:	d501      	bpl.n	800380a <__swbuf_r+0x20>
 8003806:	6923      	ldr	r3, [r4, #16]
 8003808:	b943      	cbnz	r3, 800381c <__swbuf_r+0x32>
 800380a:	4621      	mov	r1, r4
 800380c:	4628      	mov	r0, r5
 800380e:	f000 f82b 	bl	8003868 <__swsetup_r>
 8003812:	b118      	cbz	r0, 800381c <__swbuf_r+0x32>
 8003814:	f04f 37ff 	mov.w	r7, #4294967295
 8003818:	4638      	mov	r0, r7
 800381a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	6922      	ldr	r2, [r4, #16]
 8003820:	1a98      	subs	r0, r3, r2
 8003822:	6963      	ldr	r3, [r4, #20]
 8003824:	b2f6      	uxtb	r6, r6
 8003826:	4283      	cmp	r3, r0
 8003828:	4637      	mov	r7, r6
 800382a:	dc05      	bgt.n	8003838 <__swbuf_r+0x4e>
 800382c:	4621      	mov	r1, r4
 800382e:	4628      	mov	r0, r5
 8003830:	f000 fa70 	bl	8003d14 <_fflush_r>
 8003834:	2800      	cmp	r0, #0
 8003836:	d1ed      	bne.n	8003814 <__swbuf_r+0x2a>
 8003838:	68a3      	ldr	r3, [r4, #8]
 800383a:	3b01      	subs	r3, #1
 800383c:	60a3      	str	r3, [r4, #8]
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	6022      	str	r2, [r4, #0]
 8003844:	701e      	strb	r6, [r3, #0]
 8003846:	6962      	ldr	r2, [r4, #20]
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	429a      	cmp	r2, r3
 800384c:	d004      	beq.n	8003858 <__swbuf_r+0x6e>
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	07db      	lsls	r3, r3, #31
 8003852:	d5e1      	bpl.n	8003818 <__swbuf_r+0x2e>
 8003854:	2e0a      	cmp	r6, #10
 8003856:	d1df      	bne.n	8003818 <__swbuf_r+0x2e>
 8003858:	4621      	mov	r1, r4
 800385a:	4628      	mov	r0, r5
 800385c:	f000 fa5a 	bl	8003d14 <_fflush_r>
 8003860:	2800      	cmp	r0, #0
 8003862:	d0d9      	beq.n	8003818 <__swbuf_r+0x2e>
 8003864:	e7d6      	b.n	8003814 <__swbuf_r+0x2a>
	...

08003868 <__swsetup_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4b29      	ldr	r3, [pc, #164]	@ (8003910 <__swsetup_r+0xa8>)
 800386c:	4605      	mov	r5, r0
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	460c      	mov	r4, r1
 8003872:	b118      	cbz	r0, 800387c <__swsetup_r+0x14>
 8003874:	6a03      	ldr	r3, [r0, #32]
 8003876:	b90b      	cbnz	r3, 800387c <__swsetup_r+0x14>
 8003878:	f7ff fe24 	bl	80034c4 <__sinit>
 800387c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003880:	0719      	lsls	r1, r3, #28
 8003882:	d422      	bmi.n	80038ca <__swsetup_r+0x62>
 8003884:	06da      	lsls	r2, r3, #27
 8003886:	d407      	bmi.n	8003898 <__swsetup_r+0x30>
 8003888:	2209      	movs	r2, #9
 800388a:	602a      	str	r2, [r5, #0]
 800388c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	f04f 30ff 	mov.w	r0, #4294967295
 8003896:	e033      	b.n	8003900 <__swsetup_r+0x98>
 8003898:	0758      	lsls	r0, r3, #29
 800389a:	d512      	bpl.n	80038c2 <__swsetup_r+0x5a>
 800389c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800389e:	b141      	cbz	r1, 80038b2 <__swsetup_r+0x4a>
 80038a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038a4:	4299      	cmp	r1, r3
 80038a6:	d002      	beq.n	80038ae <__swsetup_r+0x46>
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 f8af 	bl	8003a0c <_free_r>
 80038ae:	2300      	movs	r3, #0
 80038b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80038b2:	89a3      	ldrh	r3, [r4, #12]
 80038b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038b8:	81a3      	strh	r3, [r4, #12]
 80038ba:	2300      	movs	r3, #0
 80038bc:	6063      	str	r3, [r4, #4]
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	81a3      	strh	r3, [r4, #12]
 80038ca:	6923      	ldr	r3, [r4, #16]
 80038cc:	b94b      	cbnz	r3, 80038e2 <__swsetup_r+0x7a>
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d8:	d003      	beq.n	80038e2 <__swsetup_r+0x7a>
 80038da:	4621      	mov	r1, r4
 80038dc:	4628      	mov	r0, r5
 80038de:	f000 fa67 	bl	8003db0 <__smakebuf_r>
 80038e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038e6:	f013 0201 	ands.w	r2, r3, #1
 80038ea:	d00a      	beq.n	8003902 <__swsetup_r+0x9a>
 80038ec:	2200      	movs	r2, #0
 80038ee:	60a2      	str	r2, [r4, #8]
 80038f0:	6962      	ldr	r2, [r4, #20]
 80038f2:	4252      	negs	r2, r2
 80038f4:	61a2      	str	r2, [r4, #24]
 80038f6:	6922      	ldr	r2, [r4, #16]
 80038f8:	b942      	cbnz	r2, 800390c <__swsetup_r+0xa4>
 80038fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80038fe:	d1c5      	bne.n	800388c <__swsetup_r+0x24>
 8003900:	bd38      	pop	{r3, r4, r5, pc}
 8003902:	0799      	lsls	r1, r3, #30
 8003904:	bf58      	it	pl
 8003906:	6962      	ldrpl	r2, [r4, #20]
 8003908:	60a2      	str	r2, [r4, #8]
 800390a:	e7f4      	b.n	80038f6 <__swsetup_r+0x8e>
 800390c:	2000      	movs	r0, #0
 800390e:	e7f7      	b.n	8003900 <__swsetup_r+0x98>
 8003910:	20000024 	.word	0x20000024

08003914 <memset>:
 8003914:	4402      	add	r2, r0
 8003916:	4603      	mov	r3, r0
 8003918:	4293      	cmp	r3, r2
 800391a:	d100      	bne.n	800391e <memset+0xa>
 800391c:	4770      	bx	lr
 800391e:	f803 1b01 	strb.w	r1, [r3], #1
 8003922:	e7f9      	b.n	8003918 <memset+0x4>

08003924 <_close_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4d06      	ldr	r5, [pc, #24]	@ (8003940 <_close_r+0x1c>)
 8003928:	2300      	movs	r3, #0
 800392a:	4604      	mov	r4, r0
 800392c:	4608      	mov	r0, r1
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	f7fd f8fb 	bl	8000b2a <_close>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d102      	bne.n	800393e <_close_r+0x1a>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	b103      	cbz	r3, 800393e <_close_r+0x1a>
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	20000268 	.word	0x20000268

08003944 <_lseek_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4d07      	ldr	r5, [pc, #28]	@ (8003964 <_lseek_r+0x20>)
 8003948:	4604      	mov	r4, r0
 800394a:	4608      	mov	r0, r1
 800394c:	4611      	mov	r1, r2
 800394e:	2200      	movs	r2, #0
 8003950:	602a      	str	r2, [r5, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	f7fd f910 	bl	8000b78 <_lseek>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d102      	bne.n	8003962 <_lseek_r+0x1e>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	b103      	cbz	r3, 8003962 <_lseek_r+0x1e>
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	20000268 	.word	0x20000268

08003968 <_read_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4d07      	ldr	r5, [pc, #28]	@ (8003988 <_read_r+0x20>)
 800396c:	4604      	mov	r4, r0
 800396e:	4608      	mov	r0, r1
 8003970:	4611      	mov	r1, r2
 8003972:	2200      	movs	r2, #0
 8003974:	602a      	str	r2, [r5, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	f7fd f89e 	bl	8000ab8 <_read>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_read_r+0x1e>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	b103      	cbz	r3, 8003986 <_read_r+0x1e>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	20000268 	.word	0x20000268

0800398c <_write_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4d07      	ldr	r5, [pc, #28]	@ (80039ac <_write_r+0x20>)
 8003990:	4604      	mov	r4, r0
 8003992:	4608      	mov	r0, r1
 8003994:	4611      	mov	r1, r2
 8003996:	2200      	movs	r2, #0
 8003998:	602a      	str	r2, [r5, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f7fd f8a9 	bl	8000af2 <_write>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_write_r+0x1e>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_write_r+0x1e>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	20000268 	.word	0x20000268

080039b0 <__errno>:
 80039b0:	4b01      	ldr	r3, [pc, #4]	@ (80039b8 <__errno+0x8>)
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000024 	.word	0x20000024

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4d0d      	ldr	r5, [pc, #52]	@ (80039f4 <__libc_init_array+0x38>)
 80039c0:	4c0d      	ldr	r4, [pc, #52]	@ (80039f8 <__libc_init_array+0x3c>)
 80039c2:	1b64      	subs	r4, r4, r5
 80039c4:	10a4      	asrs	r4, r4, #2
 80039c6:	2600      	movs	r6, #0
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	4d0b      	ldr	r5, [pc, #44]	@ (80039fc <__libc_init_array+0x40>)
 80039ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003a00 <__libc_init_array+0x44>)
 80039d0:	f000 fa90 	bl	8003ef4 <_init>
 80039d4:	1b64      	subs	r4, r4, r5
 80039d6:	10a4      	asrs	r4, r4, #2
 80039d8:	2600      	movs	r6, #0
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	08003f30 	.word	0x08003f30
 80039f8:	08003f30 	.word	0x08003f30
 80039fc:	08003f30 	.word	0x08003f30
 8003a00:	08003f34 	.word	0x08003f34

08003a04 <__retarget_lock_init_recursive>:
 8003a04:	4770      	bx	lr

08003a06 <__retarget_lock_acquire_recursive>:
 8003a06:	4770      	bx	lr

08003a08 <__retarget_lock_release_recursive>:
 8003a08:	4770      	bx	lr
	...

08003a0c <_free_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4605      	mov	r5, r0
 8003a10:	2900      	cmp	r1, #0
 8003a12:	d041      	beq.n	8003a98 <_free_r+0x8c>
 8003a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a18:	1f0c      	subs	r4, r1, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bfb8      	it	lt
 8003a1e:	18e4      	addlt	r4, r4, r3
 8003a20:	f000 f8e8 	bl	8003bf4 <__malloc_lock>
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <_free_r+0x90>)
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	b933      	cbnz	r3, 8003a38 <_free_r+0x2c>
 8003a2a:	6063      	str	r3, [r4, #4]
 8003a2c:	6014      	str	r4, [r2, #0]
 8003a2e:	4628      	mov	r0, r5
 8003a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a34:	f000 b8e4 	b.w	8003c00 <__malloc_unlock>
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d908      	bls.n	8003a4e <_free_r+0x42>
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	1821      	adds	r1, r4, r0
 8003a40:	428b      	cmp	r3, r1
 8003a42:	bf01      	itttt	eq
 8003a44:	6819      	ldreq	r1, [r3, #0]
 8003a46:	685b      	ldreq	r3, [r3, #4]
 8003a48:	1809      	addeq	r1, r1, r0
 8003a4a:	6021      	streq	r1, [r4, #0]
 8003a4c:	e7ed      	b.n	8003a2a <_free_r+0x1e>
 8003a4e:	461a      	mov	r2, r3
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	b10b      	cbz	r3, 8003a58 <_free_r+0x4c>
 8003a54:	42a3      	cmp	r3, r4
 8003a56:	d9fa      	bls.n	8003a4e <_free_r+0x42>
 8003a58:	6811      	ldr	r1, [r2, #0]
 8003a5a:	1850      	adds	r0, r2, r1
 8003a5c:	42a0      	cmp	r0, r4
 8003a5e:	d10b      	bne.n	8003a78 <_free_r+0x6c>
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	4401      	add	r1, r0
 8003a64:	1850      	adds	r0, r2, r1
 8003a66:	4283      	cmp	r3, r0
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	d1e0      	bne.n	8003a2e <_free_r+0x22>
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	6053      	str	r3, [r2, #4]
 8003a72:	4408      	add	r0, r1
 8003a74:	6010      	str	r0, [r2, #0]
 8003a76:	e7da      	b.n	8003a2e <_free_r+0x22>
 8003a78:	d902      	bls.n	8003a80 <_free_r+0x74>
 8003a7a:	230c      	movs	r3, #12
 8003a7c:	602b      	str	r3, [r5, #0]
 8003a7e:	e7d6      	b.n	8003a2e <_free_r+0x22>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	1821      	adds	r1, r4, r0
 8003a84:	428b      	cmp	r3, r1
 8003a86:	bf04      	itt	eq
 8003a88:	6819      	ldreq	r1, [r3, #0]
 8003a8a:	685b      	ldreq	r3, [r3, #4]
 8003a8c:	6063      	str	r3, [r4, #4]
 8003a8e:	bf04      	itt	eq
 8003a90:	1809      	addeq	r1, r1, r0
 8003a92:	6021      	streq	r1, [r4, #0]
 8003a94:	6054      	str	r4, [r2, #4]
 8003a96:	e7ca      	b.n	8003a2e <_free_r+0x22>
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000274 	.word	0x20000274

08003aa0 <malloc>:
 8003aa0:	4b02      	ldr	r3, [pc, #8]	@ (8003aac <malloc+0xc>)
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f000 b825 	b.w	8003af4 <_malloc_r>
 8003aaa:	bf00      	nop
 8003aac:	20000024 	.word	0x20000024

08003ab0 <sbrk_aligned>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8003af0 <sbrk_aligned+0x40>)
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	6831      	ldr	r1, [r6, #0]
 8003ab8:	4605      	mov	r5, r0
 8003aba:	b911      	cbnz	r1, 8003ac2 <sbrk_aligned+0x12>
 8003abc:	f000 fa0a 	bl	8003ed4 <_sbrk_r>
 8003ac0:	6030      	str	r0, [r6, #0]
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	f000 fa05 	bl	8003ed4 <_sbrk_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d103      	bne.n	8003ad6 <sbrk_aligned+0x26>
 8003ace:	f04f 34ff 	mov.w	r4, #4294967295
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	1cc4      	adds	r4, r0, #3
 8003ad8:	f024 0403 	bic.w	r4, r4, #3
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d0f8      	beq.n	8003ad2 <sbrk_aligned+0x22>
 8003ae0:	1a21      	subs	r1, r4, r0
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 f9f6 	bl	8003ed4 <_sbrk_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d1f2      	bne.n	8003ad2 <sbrk_aligned+0x22>
 8003aec:	e7ef      	b.n	8003ace <sbrk_aligned+0x1e>
 8003aee:	bf00      	nop
 8003af0:	20000270 	.word	0x20000270

08003af4 <_malloc_r>:
 8003af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af8:	1ccd      	adds	r5, r1, #3
 8003afa:	f025 0503 	bic.w	r5, r5, #3
 8003afe:	3508      	adds	r5, #8
 8003b00:	2d0c      	cmp	r5, #12
 8003b02:	bf38      	it	cc
 8003b04:	250c      	movcc	r5, #12
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	4606      	mov	r6, r0
 8003b0a:	db01      	blt.n	8003b10 <_malloc_r+0x1c>
 8003b0c:	42a9      	cmp	r1, r5
 8003b0e:	d904      	bls.n	8003b1a <_malloc_r+0x26>
 8003b10:	230c      	movs	r3, #12
 8003b12:	6033      	str	r3, [r6, #0]
 8003b14:	2000      	movs	r0, #0
 8003b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bf0 <_malloc_r+0xfc>
 8003b1e:	f000 f869 	bl	8003bf4 <__malloc_lock>
 8003b22:	f8d8 3000 	ldr.w	r3, [r8]
 8003b26:	461c      	mov	r4, r3
 8003b28:	bb44      	cbnz	r4, 8003b7c <_malloc_r+0x88>
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f7ff ffbf 	bl	8003ab0 <sbrk_aligned>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	4604      	mov	r4, r0
 8003b36:	d158      	bne.n	8003bea <_malloc_r+0xf6>
 8003b38:	f8d8 4000 	ldr.w	r4, [r8]
 8003b3c:	4627      	mov	r7, r4
 8003b3e:	2f00      	cmp	r7, #0
 8003b40:	d143      	bne.n	8003bca <_malloc_r+0xd6>
 8003b42:	2c00      	cmp	r4, #0
 8003b44:	d04b      	beq.n	8003bde <_malloc_r+0xea>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	4639      	mov	r1, r7
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	eb04 0903 	add.w	r9, r4, r3
 8003b50:	f000 f9c0 	bl	8003ed4 <_sbrk_r>
 8003b54:	4581      	cmp	r9, r0
 8003b56:	d142      	bne.n	8003bde <_malloc_r+0xea>
 8003b58:	6821      	ldr	r1, [r4, #0]
 8003b5a:	1a6d      	subs	r5, r5, r1
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f7ff ffa6 	bl	8003ab0 <sbrk_aligned>
 8003b64:	3001      	adds	r0, #1
 8003b66:	d03a      	beq.n	8003bde <_malloc_r+0xea>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	442b      	add	r3, r5
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	bb62      	cbnz	r2, 8003bd0 <_malloc_r+0xdc>
 8003b76:	f8c8 7000 	str.w	r7, [r8]
 8003b7a:	e00f      	b.n	8003b9c <_malloc_r+0xa8>
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	1b52      	subs	r2, r2, r5
 8003b80:	d420      	bmi.n	8003bc4 <_malloc_r+0xd0>
 8003b82:	2a0b      	cmp	r2, #11
 8003b84:	d917      	bls.n	8003bb6 <_malloc_r+0xc2>
 8003b86:	1961      	adds	r1, r4, r5
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	6025      	str	r5, [r4, #0]
 8003b8c:	bf18      	it	ne
 8003b8e:	6059      	strne	r1, [r3, #4]
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	bf08      	it	eq
 8003b94:	f8c8 1000 	streq.w	r1, [r8]
 8003b98:	5162      	str	r2, [r4, r5]
 8003b9a:	604b      	str	r3, [r1, #4]
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f82f 	bl	8003c00 <__malloc_unlock>
 8003ba2:	f104 000b 	add.w	r0, r4, #11
 8003ba6:	1d23      	adds	r3, r4, #4
 8003ba8:	f020 0007 	bic.w	r0, r0, #7
 8003bac:	1ac2      	subs	r2, r0, r3
 8003bae:	bf1c      	itt	ne
 8003bb0:	1a1b      	subne	r3, r3, r0
 8003bb2:	50a3      	strne	r3, [r4, r2]
 8003bb4:	e7af      	b.n	8003b16 <_malloc_r+0x22>
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	bf0c      	ite	eq
 8003bbc:	f8c8 2000 	streq.w	r2, [r8]
 8003bc0:	605a      	strne	r2, [r3, #4]
 8003bc2:	e7eb      	b.n	8003b9c <_malloc_r+0xa8>
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	6864      	ldr	r4, [r4, #4]
 8003bc8:	e7ae      	b.n	8003b28 <_malloc_r+0x34>
 8003bca:	463c      	mov	r4, r7
 8003bcc:	687f      	ldr	r7, [r7, #4]
 8003bce:	e7b6      	b.n	8003b3e <_malloc_r+0x4a>
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d1fb      	bne.n	8003bd0 <_malloc_r+0xdc>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6053      	str	r3, [r2, #4]
 8003bdc:	e7de      	b.n	8003b9c <_malloc_r+0xa8>
 8003bde:	230c      	movs	r3, #12
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 f80c 	bl	8003c00 <__malloc_unlock>
 8003be8:	e794      	b.n	8003b14 <_malloc_r+0x20>
 8003bea:	6005      	str	r5, [r0, #0]
 8003bec:	e7d6      	b.n	8003b9c <_malloc_r+0xa8>
 8003bee:	bf00      	nop
 8003bf0:	20000274 	.word	0x20000274

08003bf4 <__malloc_lock>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	@ (8003bfc <__malloc_lock+0x8>)
 8003bf6:	f7ff bf06 	b.w	8003a06 <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	2000026c 	.word	0x2000026c

08003c00 <__malloc_unlock>:
 8003c00:	4801      	ldr	r0, [pc, #4]	@ (8003c08 <__malloc_unlock+0x8>)
 8003c02:	f7ff bf01 	b.w	8003a08 <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	2000026c 	.word	0x2000026c

08003c0c <__sflush_r>:
 8003c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c14:	0716      	lsls	r6, r2, #28
 8003c16:	4605      	mov	r5, r0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	d454      	bmi.n	8003cc6 <__sflush_r+0xba>
 8003c1c:	684b      	ldr	r3, [r1, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	dc02      	bgt.n	8003c28 <__sflush_r+0x1c>
 8003c22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	dd48      	ble.n	8003cba <__sflush_r+0xae>
 8003c28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c2a:	2e00      	cmp	r6, #0
 8003c2c:	d045      	beq.n	8003cba <__sflush_r+0xae>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c34:	682f      	ldr	r7, [r5, #0]
 8003c36:	6a21      	ldr	r1, [r4, #32]
 8003c38:	602b      	str	r3, [r5, #0]
 8003c3a:	d030      	beq.n	8003c9e <__sflush_r+0x92>
 8003c3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	0759      	lsls	r1, r3, #29
 8003c42:	d505      	bpl.n	8003c50 <__sflush_r+0x44>
 8003c44:	6863      	ldr	r3, [r4, #4]
 8003c46:	1ad2      	subs	r2, r2, r3
 8003c48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c4a:	b10b      	cbz	r3, 8003c50 <__sflush_r+0x44>
 8003c4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	2300      	movs	r3, #0
 8003c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c54:	6a21      	ldr	r1, [r4, #32]
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b0      	blx	r6
 8003c5a:	1c43      	adds	r3, r0, #1
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	d106      	bne.n	8003c6e <__sflush_r+0x62>
 8003c60:	6829      	ldr	r1, [r5, #0]
 8003c62:	291d      	cmp	r1, #29
 8003c64:	d82b      	bhi.n	8003cbe <__sflush_r+0xb2>
 8003c66:	4a2a      	ldr	r2, [pc, #168]	@ (8003d10 <__sflush_r+0x104>)
 8003c68:	410a      	asrs	r2, r1
 8003c6a:	07d6      	lsls	r6, r2, #31
 8003c6c:	d427      	bmi.n	8003cbe <__sflush_r+0xb2>
 8003c6e:	2200      	movs	r2, #0
 8003c70:	6062      	str	r2, [r4, #4]
 8003c72:	04d9      	lsls	r1, r3, #19
 8003c74:	6922      	ldr	r2, [r4, #16]
 8003c76:	6022      	str	r2, [r4, #0]
 8003c78:	d504      	bpl.n	8003c84 <__sflush_r+0x78>
 8003c7a:	1c42      	adds	r2, r0, #1
 8003c7c:	d101      	bne.n	8003c82 <__sflush_r+0x76>
 8003c7e:	682b      	ldr	r3, [r5, #0]
 8003c80:	b903      	cbnz	r3, 8003c84 <__sflush_r+0x78>
 8003c82:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c86:	602f      	str	r7, [r5, #0]
 8003c88:	b1b9      	cbz	r1, 8003cba <__sflush_r+0xae>
 8003c8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c8e:	4299      	cmp	r1, r3
 8003c90:	d002      	beq.n	8003c98 <__sflush_r+0x8c>
 8003c92:	4628      	mov	r0, r5
 8003c94:	f7ff feba 	bl	8003a0c <_free_r>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c9c:	e00d      	b.n	8003cba <__sflush_r+0xae>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b0      	blx	r6
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	1c50      	adds	r0, r2, #1
 8003ca8:	d1c9      	bne.n	8003c3e <__sflush_r+0x32>
 8003caa:	682b      	ldr	r3, [r5, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0c6      	beq.n	8003c3e <__sflush_r+0x32>
 8003cb0:	2b1d      	cmp	r3, #29
 8003cb2:	d001      	beq.n	8003cb8 <__sflush_r+0xac>
 8003cb4:	2b16      	cmp	r3, #22
 8003cb6:	d11e      	bne.n	8003cf6 <__sflush_r+0xea>
 8003cb8:	602f      	str	r7, [r5, #0]
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e022      	b.n	8003d04 <__sflush_r+0xf8>
 8003cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc2:	b21b      	sxth	r3, r3
 8003cc4:	e01b      	b.n	8003cfe <__sflush_r+0xf2>
 8003cc6:	690f      	ldr	r7, [r1, #16]
 8003cc8:	2f00      	cmp	r7, #0
 8003cca:	d0f6      	beq.n	8003cba <__sflush_r+0xae>
 8003ccc:	0793      	lsls	r3, r2, #30
 8003cce:	680e      	ldr	r6, [r1, #0]
 8003cd0:	bf08      	it	eq
 8003cd2:	694b      	ldreq	r3, [r1, #20]
 8003cd4:	600f      	str	r7, [r1, #0]
 8003cd6:	bf18      	it	ne
 8003cd8:	2300      	movne	r3, #0
 8003cda:	eba6 0807 	sub.w	r8, r6, r7
 8003cde:	608b      	str	r3, [r1, #8]
 8003ce0:	f1b8 0f00 	cmp.w	r8, #0
 8003ce4:	dde9      	ble.n	8003cba <__sflush_r+0xae>
 8003ce6:	6a21      	ldr	r1, [r4, #32]
 8003ce8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003cea:	4643      	mov	r3, r8
 8003cec:	463a      	mov	r2, r7
 8003cee:	4628      	mov	r0, r5
 8003cf0:	47b0      	blx	r6
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	dc08      	bgt.n	8003d08 <__sflush_r+0xfc>
 8003cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d08:	4407      	add	r7, r0
 8003d0a:	eba8 0800 	sub.w	r8, r8, r0
 8003d0e:	e7e7      	b.n	8003ce0 <__sflush_r+0xd4>
 8003d10:	dfbffffe 	.word	0xdfbffffe

08003d14 <_fflush_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	690b      	ldr	r3, [r1, #16]
 8003d18:	4605      	mov	r5, r0
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	b913      	cbnz	r3, 8003d24 <_fflush_r+0x10>
 8003d1e:	2500      	movs	r5, #0
 8003d20:	4628      	mov	r0, r5
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	b118      	cbz	r0, 8003d2e <_fflush_r+0x1a>
 8003d26:	6a03      	ldr	r3, [r0, #32]
 8003d28:	b90b      	cbnz	r3, 8003d2e <_fflush_r+0x1a>
 8003d2a:	f7ff fbcb 	bl	80034c4 <__sinit>
 8003d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f3      	beq.n	8003d1e <_fflush_r+0xa>
 8003d36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d38:	07d0      	lsls	r0, r2, #31
 8003d3a:	d404      	bmi.n	8003d46 <_fflush_r+0x32>
 8003d3c:	0599      	lsls	r1, r3, #22
 8003d3e:	d402      	bmi.n	8003d46 <_fflush_r+0x32>
 8003d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d42:	f7ff fe60 	bl	8003a06 <__retarget_lock_acquire_recursive>
 8003d46:	4628      	mov	r0, r5
 8003d48:	4621      	mov	r1, r4
 8003d4a:	f7ff ff5f 	bl	8003c0c <__sflush_r>
 8003d4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d50:	07da      	lsls	r2, r3, #31
 8003d52:	4605      	mov	r5, r0
 8003d54:	d4e4      	bmi.n	8003d20 <_fflush_r+0xc>
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	059b      	lsls	r3, r3, #22
 8003d5a:	d4e1      	bmi.n	8003d20 <_fflush_r+0xc>
 8003d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d5e:	f7ff fe53 	bl	8003a08 <__retarget_lock_release_recursive>
 8003d62:	e7dd      	b.n	8003d20 <_fflush_r+0xc>

08003d64 <__swhatbuf_r>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	460c      	mov	r4, r1
 8003d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	b096      	sub	sp, #88	@ 0x58
 8003d70:	4615      	mov	r5, r2
 8003d72:	461e      	mov	r6, r3
 8003d74:	da0d      	bge.n	8003d92 <__swhatbuf_r+0x2e>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	bf14      	ite	ne
 8003d82:	2340      	movne	r3, #64	@ 0x40
 8003d84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d88:	2000      	movs	r0, #0
 8003d8a:	6031      	str	r1, [r6, #0]
 8003d8c:	602b      	str	r3, [r5, #0]
 8003d8e:	b016      	add	sp, #88	@ 0x58
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
 8003d92:	466a      	mov	r2, sp
 8003d94:	f000 f87c 	bl	8003e90 <_fstat_r>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	dbec      	blt.n	8003d76 <__swhatbuf_r+0x12>
 8003d9c:	9901      	ldr	r1, [sp, #4]
 8003d9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003da2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003da6:	4259      	negs	r1, r3
 8003da8:	4159      	adcs	r1, r3
 8003daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dae:	e7eb      	b.n	8003d88 <__swhatbuf_r+0x24>

08003db0 <__smakebuf_r>:
 8003db0:	898b      	ldrh	r3, [r1, #12]
 8003db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003db4:	079d      	lsls	r5, r3, #30
 8003db6:	4606      	mov	r6, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	d507      	bpl.n	8003dcc <__smakebuf_r+0x1c>
 8003dbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	6163      	str	r3, [r4, #20]
 8003dc8:	b003      	add	sp, #12
 8003dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dcc:	ab01      	add	r3, sp, #4
 8003dce:	466a      	mov	r2, sp
 8003dd0:	f7ff ffc8 	bl	8003d64 <__swhatbuf_r>
 8003dd4:	9f00      	ldr	r7, [sp, #0]
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	4639      	mov	r1, r7
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f7ff fe8a 	bl	8003af4 <_malloc_r>
 8003de0:	b948      	cbnz	r0, 8003df6 <__smakebuf_r+0x46>
 8003de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003de6:	059a      	lsls	r2, r3, #22
 8003de8:	d4ee      	bmi.n	8003dc8 <__smakebuf_r+0x18>
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	f043 0302 	orr.w	r3, r3, #2
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	e7e2      	b.n	8003dbc <__smakebuf_r+0xc>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	6020      	str	r0, [r4, #0]
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dfe:	81a3      	strh	r3, [r4, #12]
 8003e00:	9b01      	ldr	r3, [sp, #4]
 8003e02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e06:	b15b      	cbz	r3, 8003e20 <__smakebuf_r+0x70>
 8003e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f000 f851 	bl	8003eb4 <_isatty_r>
 8003e12:	b128      	cbz	r0, 8003e20 <__smakebuf_r+0x70>
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	81a3      	strh	r3, [r4, #12]
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	431d      	orrs	r5, r3
 8003e24:	81a5      	strh	r5, [r4, #12]
 8003e26:	e7cf      	b.n	8003dc8 <__smakebuf_r+0x18>

08003e28 <_putc_r>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	460d      	mov	r5, r1
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	4606      	mov	r6, r0
 8003e30:	b118      	cbz	r0, 8003e3a <_putc_r+0x12>
 8003e32:	6a03      	ldr	r3, [r0, #32]
 8003e34:	b90b      	cbnz	r3, 8003e3a <_putc_r+0x12>
 8003e36:	f7ff fb45 	bl	80034c4 <__sinit>
 8003e3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e3c:	07d8      	lsls	r0, r3, #31
 8003e3e:	d405      	bmi.n	8003e4c <_putc_r+0x24>
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	0599      	lsls	r1, r3, #22
 8003e44:	d402      	bmi.n	8003e4c <_putc_r+0x24>
 8003e46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e48:	f7ff fddd 	bl	8003a06 <__retarget_lock_acquire_recursive>
 8003e4c:	68a3      	ldr	r3, [r4, #8]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	60a3      	str	r3, [r4, #8]
 8003e54:	da05      	bge.n	8003e62 <_putc_r+0x3a>
 8003e56:	69a2      	ldr	r2, [r4, #24]
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	db12      	blt.n	8003e82 <_putc_r+0x5a>
 8003e5c:	b2eb      	uxtb	r3, r5
 8003e5e:	2b0a      	cmp	r3, #10
 8003e60:	d00f      	beq.n	8003e82 <_putc_r+0x5a>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	6022      	str	r2, [r4, #0]
 8003e68:	701d      	strb	r5, [r3, #0]
 8003e6a:	b2ed      	uxtb	r5, r5
 8003e6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e6e:	07da      	lsls	r2, r3, #31
 8003e70:	d405      	bmi.n	8003e7e <_putc_r+0x56>
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	059b      	lsls	r3, r3, #22
 8003e76:	d402      	bmi.n	8003e7e <_putc_r+0x56>
 8003e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e7a:	f7ff fdc5 	bl	8003a08 <__retarget_lock_release_recursive>
 8003e7e:	4628      	mov	r0, r5
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	4629      	mov	r1, r5
 8003e84:	4622      	mov	r2, r4
 8003e86:	4630      	mov	r0, r6
 8003e88:	f7ff fcaf 	bl	80037ea <__swbuf_r>
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	e7ed      	b.n	8003e6c <_putc_r+0x44>

08003e90 <_fstat_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	4d07      	ldr	r5, [pc, #28]	@ (8003eb0 <_fstat_r+0x20>)
 8003e94:	2300      	movs	r3, #0
 8003e96:	4604      	mov	r4, r0
 8003e98:	4608      	mov	r0, r1
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	602b      	str	r3, [r5, #0]
 8003e9e:	f7fc fe50 	bl	8000b42 <_fstat>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	d102      	bne.n	8003eac <_fstat_r+0x1c>
 8003ea6:	682b      	ldr	r3, [r5, #0]
 8003ea8:	b103      	cbz	r3, 8003eac <_fstat_r+0x1c>
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	bd38      	pop	{r3, r4, r5, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000268 	.word	0x20000268

08003eb4 <_isatty_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4d06      	ldr	r5, [pc, #24]	@ (8003ed0 <_isatty_r+0x1c>)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	f7fc fe4f 	bl	8000b62 <_isatty>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_isatty_r+0x1a>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_isatty_r+0x1a>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	20000268 	.word	0x20000268

08003ed4 <_sbrk_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4d06      	ldr	r5, [pc, #24]	@ (8003ef0 <_sbrk_r+0x1c>)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	4604      	mov	r4, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	f7fc fe58 	bl	8000b94 <_sbrk>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_sbrk_r+0x1a>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_sbrk_r+0x1a>
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	20000268 	.word	0x20000268

08003ef4 <_init>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr

08003f00 <_fini>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	bf00      	nop
 8003f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f06:	bc08      	pop	{r3}
 8003f08:	469e      	mov	lr, r3
 8003f0a:	4770      	bx	lr
